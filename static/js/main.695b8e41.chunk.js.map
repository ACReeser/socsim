{"version":3,"sources":["events/Events.tsx","GameStorage.ts","World.tsx","MoverStoreSingleton.tsx","simulation/MoverBus.tsx","simulation/Beliefs.tsx","simulation/Utils.tsx","simulation/Geography.tsx","WorldGen.tsx","simulation/Government.tsx","simulation/Economy.tsx","simulation/Pickup.tsx","simulation/Bean.tsx","SignalStore.tsx","simulation/Player.tsx","simulation/AgentDurationInstance.tsx","simulation/AgentDuration.tsx","simulation/RealEstate.tsx","simulation/BeanAndCity.tsx","simulation/City.tsx","state/entity.state.ts","WorldSound.tsx","petri-ui/Building.tsx","simulation/Priorities.tsx","simulation/Agent.tsx","simulation/MarketTraits.tsx","simulation/Time.tsx","simulation/WorldSim.tsx","Game.tsx","state/features/world.reducer.ts","state/features/world.ts","state/hooks.ts","state/features/selected.reducer.ts","state/state.ts","widgets/ConfirmButton.tsx","widgets/StringDropdown.tsx","modal-content/BeliefRow.tsx","modal-content/Brainwashing.tsx","modal-content/Campaigns.tsx","i18n/text.ts","widgets/NeedReadout.tsx","modal-content/EconomyReport.tsx","modal-content/EscapeMenu.tsx","widgets/TreasuryReport.tsx","modal-content/Gov.tsx","modal-content/GreetingPanel.tsx","modal-content/LoadGameMenu.tsx","modal-content/MainMenu.tsx","widgets/RobotArm.tsx","modal-content/Research.tsx","modal-content/TraitsReport.tsx","petri-ui/AnimatedUFO2.tsx","petri-ui/Buildings.tsx","petri-ui/Magnet.tsx","petri-ui/AnimatedBean.tsx","petri-ui/AnimatedPickup.tsx","petri-ui/Mover.tsx","petri-ui/WorldTile.tsx","widgets/CardButton.tsx","widgets/CostSmall.tsx","right-panel/BeanPanel.tsx","chrome/Subtab.tsx","simulation/Institutions.tsx","right-panel/HexPanel.tsx","right-panel/OverviewPanel.tsx","right-panel/DetailPanel.tsx","right-panel/Events.tsx","right-panel/Goals.tsx","right-panel/MarketPanel.tsx","simulation/SeedGen.tsx","widgets/Autosave.tsx","widgets/BubbleText.tsx","widgets/CapsuleLabel.tsx","widgets/Modal.tsx","widgets/Season.tsx","widgets/SocialGraph.tsx","widgets/StopPlayFast.tsx","widgets/TimelyEventToggle.tsx","App.tsx","serviceWorker.js","index.js"],"names":["PubSub","onPublish","callbacks","current","undefined","args","this","forEach","c","callback","push","splice","indexOf","ChangePubSub","MaslowHappinessScore","GameStorageInstance","Dirty","Saving","rawID","localStorage","getItem","id","parseInt","isNaN","slots","i","brief","JSON","parse","rawgame","errors","game","e","world","raw","stringify","Name","cities","byID","name","Population","beans","allIDs","map","x","filter","y","lifecycle","length","Age","day","date","hour","season","year","setItem","saveSlot","toString","publish","MoverStoreInstance","cache","type","key","PickupPhysics","BeanPhysics","TraitIcon","Deficient","Sufficient","Abundant","GoodToThreshold","warning","sufficient","abundant","JobToGood","job","GoodIcon","EmoteIcon","EmotionWorth","EmotionSanity","CommonalityChances","PrimaryBeliefData","prog","noun","adj","icon","description","rarity","trad","state","ego","NarrativeBeliefData","rocket","dragon","music","noFaith","SecondaryBeliefData","Diligence","Natalism","Antinatalism","Charity","Progressivism","Libertarianism","Wanderlust","Germophobia","Parochialism","Cosmopolitanism","Capitalism","Socialism","Communism","Fraud","Naturalism","Hedonism","Gluttony","Paranoia","Depression","Optimism","Authority","Anarchism","Greed","Bloodthirst","Extroversion","Introversion","Charisma","Gossip","Antagonism","Enthusiasm","Sadism","Vandalism","Neuroticism","Dogmatism","BeliefsAll","Object","keys","RandomBeliefBucket","reduce","list","str","t","MathClamp","input","min","max","Math","SampleNormalDistribution","seed","q","u","v","mean","standardDeviation","GetRandomFloat","sqrt","log","Hex","r","hex_directions","hex_direction","direction","hex_neighbor","hex","dir","hex_ring","center","radius","a","k","results","cube","b","hex_add","j","hex_spiral","concat","OriginAccelerator","point","velocity","accelerate_towards","mover","target","acceleration","maxSpeed","colDistance","brake","delta","magnitude","accelerator_coast","lerp","cube_lerp","z","cube_round","rx","round","ry","rz","x_diff","abs","y_diff","z_diff","cube_to_axial","axial_to_cube","cube_linedraw","N","cube_distance","layout_flat","f0","f1","f2","f3","b0","b1","b2","b3","start_angle","origin_point","hex_to_pixel","size","origin","h","M","polarToPoint","p","cos","az","sin","transformPoint","transform","BuildingIcon","UpgradedBuildingIcon","BuildingJobIcon","BuildingToGood","GoodToBuilding","JobToBuilding","BuildingToJob","RandomSeeds","GetRandomGenerator","Rand","PRNG","sfc32","GetRandomNumber","randomNumber","next","ceil","floor","GetRandom","choices","GetRandomIndex","RandomIdeal","RandomCommunity","RandomFaith","PI","CityPrefixes","CityFirstsnames","CityLastnames","GenerateCity","numberOfRings","hexes","hex_size","petriRadius","petriOrigin","deadBeanKeys","beanKeys","ufoKeys","pickupKeys","buildingKeys","pickupMagnetPoint","costOfLiving","buildingMap","GenerateBean","city","parent","hexPoint","newBean","nextID","cityKey","ethnicity","community","ideals","faith","stamina","health","food","discrete_food","discrete_health","discrete_sanity","discrete_stamina","discrete_fun","graceTicks","dob","sanity","beliefs","hedonHistory","happiness","flatAverage","all","maxSource","minSource","weightedAverage","lastHappiness","hedonFiveDayRecord","fairGoodPrice","bornInPetri","cash","ticksSinceLastSale","ticksSinceLastRelax","lastChatMS","action","actionData","act","activity_duration","beanBeliefCount","random","newBelief","includes","split","PlayerKnowsPrereq","prereq","seen","Array","isArray","some","PlayerKnowsBelief","BeliefString","LawData","group","axis","prereqs","IsLaw","gov","l","lawTree","GovPurchaseQualifiesForWelfare","law","buyer","good","bean","GovCanPayWelfare","price","AllGoods","MarketTransact","market","listing","demand","seller","salesTaxPercentage","MarketListingSubtract","listPrice","tax","grossPrice","bought","MarketGovernmentTransact","quantity","listings","EconomyTryTransact","economy","getSeller","minDemand","maxDemand","monthlyDemand","MarketLowestPriceListing","actualDemand","salesTaxPercent","receipt","unfulfilledMonthlyDemand","GetFairGoodPrice","econ","supply","monthlySupply","GetCostOfLiving","fullListings","numberOfSamePriceListings","lowPrice","GenerateEmoteFromBean","emote","Get","BeanCalculateHealth","difficulty","BeanCalculateShelter","BeanCalculateFood","BeanMaybeChat","Date","now","roll","chance","BeanBelievesIn","BeanEmote","source","out","trait","BeanMaybeBaby","BeanIsInCrisis","BeanCanBaby","GetRandomRoll","base","BeanBabyChance","trigger","message","BeanMaybeDie","cause","isDire","BeanDie","pains","emotes","death","beanKey","BeanLoseSanity","amount","multiplier","BeanGetSpeech","chat","participation","preachBelief","BeanCanPurchase","cost","sanityBonus","BeanGetFace","SignalStoreInstance","alienEnergy","alienBots","alienHedons","newTraitSeen","events","autosave","Goals","found_utopia","text","check","buildings","build_house_n_farm","find","reward","energy","bots","beam_3","scan","alien","scanned_bean","set_policy","brainwash","Curriculums","GradeWorld","Happiness","BooleanAverageGrader","o","Prosperity","Stability","Dogma","GradeUpToNumber","speechcrimes","RubricDescription","number","allowance","maximum","NormalizedScoreToGrade","array","grade","normNumber","GradeWeights","A","B","C","D","F","TechData","tech","techPoints","PlayerReward","player","change","hedons","HasResearched","techProgress","researchPoints","PlayerCanAfford","qty","PlayerTryPurchase","PlayerPurchase","AgentDurationStoreInstance","elapsed","duration","EnterpriseBuildings","BuildingOpenSlots","s","jobs","upgraded","GenerateIBuilding","newBuilding","address","enterpriseKey","enterprises","enterpriseType","sellerCityKey","sellerEnterpriseKey","BeanTryFindJob","openSlotBuildings","counter","index","temp","shuffle","canHire","isHiring","building","BeanSetJob","enterprise","employerEnterpriseKey","ownerBeanKey","BuildingUnsetJob","oldLen","BuildingTryFreeBean","CreateEntitySlice","entity","hxPosition","EntityAddToSlice","slice","newEntity","SFXToFile","SoundBuffer","file","volume","buffer","ended","audio","shift","play","aud","Audio","process","WorldSfxInstance","lib","sfx","slot_size","getSlotOffset","hexToTransform","hexDirectionToJobSlot","2","0","4","1","5","3","PetriBuilding","props","style","cityName","getStyle","UIBuilding","className","UIBuildingSlots","d","jobSlot","hasJob","PriorityNode","value","priority","DumbPriorityQueue","_values","values","sort","BeanActions","enter","agent","deltaMS","destinationTargetIndex","destinationIndex","destinations","intent","newActivity","console","warn","newAccelerator","collide","beanHitDestination","nearbyBeanKeys","bKey","squared","pow","CityGetNearestNeighbors","targets","findNeedy","needy","targetBeanKey","persuasionStrength","BeanGetRandomChat","least","changeState","newState","WanderlustEmoteChance","beanEmote","exit","beanWork","belief","strength","defense","BeanMaybePersuaded","beanBePersuaded","priorities","GetPriorities","top","dequeue","travelState","sideEffect","substitute","SubstituteIntent","CreateTravelFromIntent","BeanMaybeParanoid","buyReceipt","buyAttempts","beanBuy","beanCrime","crimeGood","durationMS","beanRelax","desiredGoodState","EconomyCanBuy","BeanMaybeCrime","scarce","BeanMaybeScarcity","IntentToDestination","RouteRandom","buildingDest","keysOfType","CityGetRandomEntertainmentBuilding","Route","destination","GetPriority","StatsNormalMean","StatsNormalDev","bean_life","vital_thresh","medicine","shelter","buildingType","CityGetRandomBuildingOfType","start","nearestHex","pt","pixel_to_hex","offset","getRandomSlotOffset","Season","CommonalityBaseCost","CommonalityRandomMaxCost","getMarketTraitListing","rare","PartOfDay","TicksPerHour","simulate_world","pop","unshift","eKey","workers","share","owner","pay","commShare","simulate_every_day","marketTraitsForSale","newTraits","GetMarketTraits","WorldAddEvent","collected","cityID","selectBeansByCity","allowedTreasury","perBean","MaybeRebate","simulate_every_week","fun","simulate_every_month","arr","percent","sum","yearlyInflationDollars","richest","obj","winner","WorldInflate","simulate_every_year","income","currentlyResearchingTech","abductedBeanKeys","beliefInventory","charges","CoL","ageResult","diff","wasNotHungry","wasNotSick","degrade_per_tick","penalty","starving_health","starve","exposure","sick","BeanAge","pickups","lastPoint","allSum","daySum","sources","allSources","val","GetHedonReport","BeanCalculateSanity","goals","goal","goalProgress","done","step","CheckGoals","workingReportCard","CheckReportCard","triadToString","sign","costs","tortrons","join","DefaultDifficulty","emptyHex","build","house","farm","theater","hospital","church","courthouse","park","nature","beam","upgrade","bean_brain","brainwash_ideal","brainimplant_secondary","brainwash_secondary","abduct","gift","empower","vaporize","siphon","scrubHedons","resource","common","uncommon","homeless_health","death_chance","starvation","sickness","vaporization","report_card_progression","worldSlice","createSlice","initialState","ufos","laws","Spring","seenBeliefs","next_grade","pastReportCards","spotlightEvent","GetBlankWorldState","reducers","refreshMarket","magnetChange","payload","px","worldTick","newGame","loadGame","what","where","changeEnterprise","newType","fireBean","buildingKey","ufo","remove_ufo","ufoKey","cheatAdd","release","lucky_bean_key","luckyBean","washCommunity","washMotive","washNarrative","oldFaith","washBelief","sanityCostBonus","existing","chargeBonus","setResearch","implant","PlayerUseCharge","pickUpPickup","pickup","pickupKey","amt","oldAct","ADS","beanGiveCharity","senderBeanKey","_emote","needyBeanKey","_ifBelievesInMaybeEmote","newJob","last","GoodToJob","allOfType","BeanTrySetJob","workedForEmployer","employer","EconomyEmployAndPrice","sellerBeanKey","EconomyProduceAndPrice","stolen","enactLaw","data","lawKey","repealLaw","buyBots","buyEnergy","buyTrait","beanPosition","actions","selectCityBeanIDs","createSelector","cityBeanIDs","beansByID","cityBeanKey","useAppDispatch","cityBeans","count","circle","square","triangle","useDispatch","useAppSelector","useSelector","selectedSlice","selectedHexKey","selectedCityKey","selectedBeanKey","doSelectCity","selectedBuildingKey","doSelectHex","doSelectBuilding","doSelectBean","doSelectNone","store","configureStore","reducer","selected","middleware","getDefaultMiddleware","storeApi","startsWith","selectSelectedCity","selectSelectedBean","selectSelectedBuilding","buildingID","selectEventIDs","ConfirmButton","confirming","onConfirm","setState","onClick","click","disabled","confirmText","children","React","Component","StringDropdown","onChange","hint","hidden","titleCase","toUpperCase","options","title","getTitleForOption","getTextForOption","required","BeliefWidget","leftButton","titleView","bottomView","EditBeliefInput","frozen","available","wash","divergent","SortedBeliefs","localeCompare","TraitInventoryList","dispatch","dogmatic","BrainwashingContent","isScanned","toFixed","CampaignsPanel","keyToName","starving","hungry","sated","stuffed","homeless","sleepy","awake","rested","sickly","bruised","fresh","sane","stressed","disturbed","NeedReadout","dire","need","dire_style","width","full","full_style","header","median","half","EconomyReport","food_median","health_median","shelter_median","wealth_total","wealth_avg","wealth_median","wealth_dire","wealth_marker","wealthy","wealthy_percentage","wealthy_ownership","unemployed","jobless","avg","meds","houses","farmer","builder","doc","entertainer","EscapeMenu","TreasuryReport","coin","GovernmentPanel","useState","view","setView","LawDetailList","enacted","lKey","revokeLaw","LawFormula","canSeeName","unlocked","every","PlayerMeetsPrereqs","has","PrereqString","GreetingPanel","whiteSpace","changeSeed","currentTarget","maxLength","fontFamily","fontSize","LoadGameMenu","MainMenu","continueID","HasContinueGame","GetGameSlots","startGame","RobotArm","height","xmlns","classN","fill","display","overflow","strokeWidth","stroke","cy","cx","tool","tools","loop","lastI","ResearchPanel","currentTech","tool1","setTool1","tool2","setTool2","tool3","setTool3","tool4","setTool4","useEffect","interval","window","setInterval","clearInterval","techs","progress","total","complete","isCurrent","rootClassName","renderTech","TraitsReport","AnimatedUFO2","showBeam","setShowBeam","setTimeout","HexPetriBuilding2","hexKey","selectBuilding","selectCityBuildingByHex","selectCity","PetriHex","extraClasses","hexString","hex_style","xy","onMouseEnter","stopPropagation","PetriHexes2","hexStr","SocialBuildings","selectBuildingKeysByCity","selectBuildingsByCity","onClickBuilding","Magnet2","useRef","magnetPoint","BeanIsBuying","AnimatedBean","st","working","speech","face","classes","animationClasses","selectBeanAnimation","isSelected","sitStill","AnimatedPickup","played","setPlayed","useContext","SfxContext","Mover","MoverContext","el","onMove","pubsub","moverType","moverKey","subscribe","unsubscribe","ref","PetriBeanList","PickupList2","pKey","HexSizeR","left","WorldTile2","mtn_transforms","mtnRadius","bk","onMouseLeave","uK","CardButton","thin","singleLine","subtext","TraitToCard","CostSmall","rider","renderInner","scanned","innerView","idealPro","idealCon","colSpan","hedonTable","ActivityDisplay","ActivityIcon","acts","actDurations","BeanPanel","faceOverride","setFaceOverride","setInnerView","_resetFace","renderTraits","Error","Subtabs","additionalClasses","active","EnterpriseTypes","EnterpriseTypeIcon","BeamButton","HexStringToHex","HexPanel","eHex","HexBuildingPanel","free","hasJobs","renderDensityWarning","typ","WorkerList","EnterpriseTypePicker","substring","EnterpriseListings","OverviewPanel","clearCity","avg_happy","avg_cash","scannedBeans","from","m","prev","get","set","Map","entries","aC","CityGetPopulationTraitsList","DetailPanel","openBrainwash","EventsPanel","elements","alert","tallTrigger","shouldEventJumpToBean","href","renderGoal","g","tooltip","renderReward","GoalsPanel","reportCard","margin","MarketPanel","MarketTraits","fourLetterWords","GetSeedName","rand","AutosaveWidget","isDirty","setDirty","isSaving","setSaving","onDirty","dirty","onSaving","BubbleNumberText","bubbleSeed","ev","positive","bubbles","string","changeEvent","bubbleClass","BubbleSeenTraitsText","sub","setBubbles","onEvent","event","useBubbles","CapsuleLabel","label","EnergyAmount","BotsAmount","HedonAmount","Modal","show","closeButtonText","getButton","SeasonWidget","Morning","Noon","Evening","SocialGraph","static","StopPlayFastButtons","timeScale","setTimeScale","GeoNetworkButtons","activeMain","setActiveMain","TimelyEventToggle","eventCount","eventClass","eventIcon","createContext","StoreState","App","previousTimeMS","logicTickAccumulatorMS","millisecondsSinceLastSave","saveAccumulatorMS","tick","timeMS","deltaTimeMS","gameDeltaTimeMS","animate_ufos","getState","pickupIDs","pickupID","magnet","animate_pickups","actResult","exitAction","enterAction","animate_beans","SaveGame","requestAnimationFrame","cheatMode","keyupHandler","activeModal","newGameSeed","shiftKey","onDeath","startSpotlight","timescaleBeforeSpotlight","activeRightPanel","document","addEventListener","time","removeEventListener","endSpotlight","Provider","defaultScale","wheel","slot","GetGame","n","getPanel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.695b8e41.chunk.js","sourcesContent":["import { Point } from \"../simulation/Geography\";\r\n\r\nexport type EventTrigger = 'speechcrime'|'birth'|'death'|'nojobslots'|'marketrefresh'|'persuasion';\r\n\r\nexport interface IEvent{\r\n    key: number;\r\n    icon: string;\r\n    message: string;\r\n    beanKey?: number;\r\n    cityKey?: number;\r\n    point?: Point;\r\n    trigger: EventTrigger;\r\n}\r\n\r\nexport class PubSub<T>{\r\n    constructor(private onPublish?: (args: T) => void){}\r\n    private callbacks: Array<(args: T) => void> = [];\r\n    public current: T|undefined = undefined;\r\n    public publish(args: T){\r\n        if (this.onPublish)\r\n            this.onPublish(args);\r\n        this.current = args;\r\n        this.callbacks.forEach((c) => c(args));\r\n    }\r\n    public subscribe(callback: (args: T) => void){\r\n        this.callbacks.push(callback);\r\n    }\r\n    public unsubscribe(callback: (ev: T) => void) {\r\n        this.callbacks.splice(this.callbacks.indexOf(callback), 1);\r\n    }\r\n}\r\n\r\nexport class ChangePubSub extends PubSub<{change: number}>{\r\n}\r\n\r\nexport type IEventBus = {[key in EventTrigger]: PubSub<IEvent>};\r\nexport interface IEventBuffer{\r\n    buffer: IEvent[]   \r\n}\r\nexport const EventBusBufferLength = 20; \r\nexport class EventBus implements IEventBus, IEventBuffer{\r\n    buffer: IEvent[] = [];\r\n    private sendToBuffer = (event: IEvent) => {\r\n        if (this.buffer.length > EventBusBufferLength){\r\n            this.buffer.pop();\r\n        }\r\n        this.buffer.unshift(event);\r\n    }\r\n    speechcrime = new PubSub<IEvent>(this.sendToBuffer);\r\n    nojobslots = new PubSub<IEvent>(this.sendToBuffer);\r\n    birth = new PubSub<IEvent>(this.sendToBuffer);\r\n    death = new PubSub<IEvent>(this.sendToBuffer);\r\n    marketrefresh = new PubSub<IEvent>(this.sendToBuffer);\r\n    persuasion = new PubSub<IEvent>(this.sendToBuffer);\r\n}\r\n\r\nexport class Live<T>{\r\n    public readonly onChange = new PubSub<T>();\r\n    constructor(protected current: T){}\r\n    public set(newValue: T){\r\n        this.current = newValue;\r\n        if (this.afterSetBeforePublish)\r\n            this.afterSetBeforePublish(newValue);\r\n        this.onChange.publish(newValue);\r\n    }\r\n    public get get(): T{\r\n        return this.current;\r\n    }\r\n    public afterSetBeforePublish?: (val: T) => void; \r\n}\r\nexport class LiveList<T> extends Live<Array<T>>{\r\n    public readonly onPush = new PubSub<T>();\r\n    public push(child: T): void{\r\n        this.set([...this.get, child]);\r\n        this.onPush.publish(child);\r\n    }\r\n    public remove(child: T): void{\r\n        const all = this.get;\r\n        const i = all.indexOf(child);\r\n        if (i > -1){\r\n            all.splice(i, 1);\r\n            this.set([...all]);\r\n        }\r\n    }\r\n}\r\nexport class LiveMap<K, V> extends Live<Map<K, V>>{\r\n    public readonly onAdd = new PubSub<{k: K, v: V}>();\r\n    public add(newKey: K, newValue: V){\r\n        const copy = new Map<K, V>(this.current);\r\n        copy.set(newKey, newValue);\r\n        this.set(copy);\r\n        this.onAdd.publish({k: newKey, v: newValue});\r\n    }\r\n    public remove(key: K){\r\n        const copy = new Map<K, V>(this.current);\r\n        copy.delete(key);\r\n        this.set(copy);\r\n    }\r\n    public at(key: K): V|undefined{\r\n        return this.current.get(key);\r\n    }\r\n}","import { PubSub } from \"./events/Events\";\r\nimport { IDate } from \"./simulation/Time\";\r\nimport { IWorldState } from \"./state/features/world\";\r\n\r\nconst GameSavePrefix = 'game-';\r\nconst GameBriefPrefix = 'game-brief-';\r\nconst LastGameSaveIDKey = 'last-game-id';\r\nconst MaxNumGameSlots = 3;\r\n\r\ninterface IWorldBrief {\r\n    Name: string,\r\n    Population: number,\r\n    Age: IDate\r\n}\r\nexport function isGame(g: {game: IWorldState}|{errors: string[]}): g is {game:IWorldState}{\r\n    return (<any>g).game != null;\r\n}\r\nexport class GameStorage{\r\n    HasContinueGame(): number|undefined{\r\n        const rawID = localStorage.getItem(LastGameSaveIDKey);\r\n        if (rawID == null)\r\n            return undefined;\r\n\r\n        const id = parseInt(rawID);\r\n        if (isNaN(id))\r\n            return undefined;\r\n\r\n        const rawgame = localStorage.getItem(`${GameSavePrefix}${id}`);\r\n        if (rawgame != null)\r\n            return id;\r\n        else\r\n            return undefined;\r\n    }\r\n    GetGameSlots(): {id: number, brief?: IWorldBrief}[] {\r\n        const slots: {id: number, brief: IWorldBrief}[] = [];\r\n        for (let i = 0; i < MaxNumGameSlots; i++) {\r\n            const brief = localStorage.getItem(`${GameBriefPrefix}${i+1}`);\r\n            slots.push({\r\n                id: i+1,\r\n                brief: brief ? JSON.parse(brief) : undefined\r\n            });\r\n        }\r\n        return slots;\r\n    }\r\n    GetGame(id: number): {game: IWorldState}|{errors: string[]}{\r\n        const rawgame = localStorage.getItem(`${GameSavePrefix}${id}`);\r\n        if (rawgame){\r\n\r\n        } else {\r\n            return {\r\n                errors: ['Cannot find game']\r\n            }\r\n        }\r\n        try {\r\n            const game = JSON.parse(rawgame);\r\n            return {\r\n                game: game as IWorldState\r\n            }\r\n        } catch(e) {\r\n            return {\r\n                errors: [e]\r\n            }\r\n        }\r\n    }\r\n    SaveGame(world: IWorldState){\r\n        const raw = JSON.stringify(world);\r\n        const brief: IWorldBrief = {\r\n            Name: world.cities.byID[0].name,\r\n            Population: world.beans.allIDs.map(x => world.beans.byID[x]).filter(y => y.lifecycle != 'dead').length,\r\n            Age: {\r\n                day: world.date.day,\r\n                hour: world.date.hour,\r\n                season: world.date.season,\r\n                year: world.date.year\r\n            }\r\n        };\r\n        localStorage.setItem(`${GameSavePrefix}${world.saveSlot}`, raw);\r\n        localStorage.setItem(`${GameBriefPrefix}${world.saveSlot}`, JSON.stringify(brief));\r\n        localStorage.setItem(LastGameSaveIDKey, world.saveSlot.toString());\r\n        this.Dirty.publish(false);\r\n        this.Saving.publish();\r\n    }\r\n    Dirty = new PubSub<boolean>();\r\n    Saving = new PubSub<void>();\r\n}\r\nexport const GameStorageInstance = new GameStorage();","import * as React from 'react';\r\nimport { Policy, Party, BaseParty, ICityPartyHQ } from './simulation/Politics';\r\nimport { IEvent, EventBus, LiveList } from './events/Events';\r\nimport { Season, IDate } from './simulation/Time';\r\nimport { Government, PollTaxWeeklyAmount } from './simulation/Government';\r\nimport { TechData } from './simulation/Player';\r\nimport { accelerate_towards, accelerator_coast, move_towards } from './simulation/Geography';\r\nimport { Pickup } from './simulation/City';\r\nimport { shuffle } from './simulation/Utils';\r\nimport { Act, IBean, IChatData } from './simulation/Agent';\r\nimport { IDifficulty, PlayerResources } from './Game';\r\nimport { type } from 'os';\r\nimport { GetHedonReport, IsBeliefDivergent, SecondaryBeliefData, TraitBelief } from './simulation/Beliefs';\r\nimport { WorldSfxInstance, WorldSound } from './WorldSound';\r\nimport { GetMarketTraits, MarketTraitListing } from './simulation/MarketTraits';\r\nimport { IWorldState } from './state/features/world';\r\n\r\nexport const PickupPhysics = {\r\n    Brake: { x: .94, y: .94},\r\n    AccelerateS: 60,\r\n    MaxSpeed: 9,\r\n    CollisionDistance: 10\r\n}\r\nexport const BeanPhysics = {\r\n    Brake: { x: .94, y: .94},\r\n    AccelerateS: 10,\r\n    MaxSpeed: 4,\r\n    CollisionDistance: 10\r\n}\r\nexport const MaxHedonHistory = 5;\r\n\r\nexport interface IEnvironment{\r\n    year: number;\r\n    season: Season;\r\n}\r\n\r\nexport interface ITile {\r\n    name?: string, \r\n    url: string, \r\n    type: string,\r\n    key: number\r\n}\r\n\r\n\r\nexport type TraitCommunity = 'state'|'ego';\r\nexport type TraitIdeals = 'prog'|'trad';\r\nexport type TraitEthno = 'circle'|'square'|'triangle';\r\nexport type TraitFaith = 'rocket'|'music'|'dragon'|'noFaith';\r\nexport type TraitFood = 'starving'|'hungry'|'sated'|'stuffed';\r\nexport type TraitStamina = 'homeless'|'sleepy'|'awake'|'rested';\r\nexport type TraitHealth = 'sick'|'sickly'|'bruised'|'fresh';\r\nexport type TraitSanity = 'psychotic'|'disturbed'|'stressed'|'sane';\r\nexport type TraitJob = 'farmer'|'builder'|'doc'|'entertainer'|'cleric'|'polit'|'jobless';\r\n\r\nexport type Trait = TraitCommunity|TraitIdeals|TraitEthno|TraitFaith|TraitFood|TraitStamina|TraitHealth|TraitSanity;\r\n\r\nexport const TraitIcon: {[key in Trait]: string} = {\r\n    'state': '🕊️', 'ego': '🦅',\r\n    'prog': '⚖️', 'trad': '👑',\r\n    'circle': '🤎', 'square': '💛', 'triangle': '🧡',\r\n    'rocket': '🚀', 'music': '🎵', 'dragon': '🐲',\r\n    'noFaith': '⚫️',\r\n    'starving': '🍴', 'hungry': '🍽️', 'sated': '🥜', 'stuffed': '🥩',\r\n    'homeless': '🌨️', 'sleepy': '🌙', 'awake': '☀️', 'rested': '🌞',\r\n    'sick': '🤢', 'sickly': '😷', 'bruised': '🩹', 'fresh': '💪',\r\n    'psychotic': '🤪', 'disturbed': '🤤', 'stressed':'', 'sane': '🧠',\r\n}\r\nexport enum MaslowHappinessScore {Deficient= -.25, Sufficient=0, Abundant=.15}\r\n\r\nexport interface IHappinessModifier{\r\n    reason: string;\r\n    /**\r\n     * -1 to 1, where 0 is \"no effect\" and +/-1 is +/-100%\r\n     */\r\n    mod: number;\r\n}\r\n\r\nexport function GetHappiness(array: IHappinessModifier[]){\r\n    const clampedPercent = Math.min(\r\n        1,\r\n        Math.max(\r\n            -1,\r\n            array.reduce((sum, hapMod) => {\r\n                sum += hapMod.mod;\r\n                return sum\r\n            }, 0)\r\n        )\r\n    );\r\n\r\n    return (clampedPercent * 100);\r\n}\r\n\r\nexport const TraitToModifier: {[key in TraitFood|TraitStamina|TraitHealth]: IHappinessModifier} = {\r\n    'homeless': {reason: 'Homeless', mod: MaslowHappinessScore.Deficient},\r\n    'sleepy': {reason: 'Renting', mod: MaslowHappinessScore.Sufficient},\r\n    'awake': {reason: 'Homeowner', mod: MaslowHappinessScore.Sufficient},\r\n    'rested': {reason: 'Homeowner', mod: MaslowHappinessScore.Abundant},\r\n    'sick': {reason: 'Sick', mod: MaslowHappinessScore.Deficient},\r\n    'sickly': {reason: 'Sick', mod: MaslowHappinessScore.Sufficient},\r\n    'bruised': {reason: 'Bruised', mod: MaslowHappinessScore.Sufficient},\r\n    'fresh': {reason: 'Healthy', mod: MaslowHappinessScore.Abundant},\r\n    'starving': {reason: 'Hungry', mod: MaslowHappinessScore.Deficient},\r\n    'hungry': {reason: 'Hungry', mod: MaslowHappinessScore.Sufficient},\r\n    'sated': {reason: 'Sated', mod: MaslowHappinessScore.Sufficient},\r\n    'stuffed': {reason: 'Stuffed', mod: MaslowHappinessScore.Abundant},\r\n}\r\nexport interface IThreshold {warning: number, sufficient: number, abundant: number}\r\nexport const GoodToThreshold: {[key in TraitGood]: IThreshold} = {\r\n    'food': {warning: 0.5, sufficient: 1, abundant: 3},\r\n    'shelter': {warning: 3, sufficient: 4, abundant: 7},\r\n    'medicine': {warning: 0.5, sufficient: 1, abundant: 3},\r\n    'fun': {warning: 0.1, sufficient: 1, abundant: 3},\r\n}\r\n\r\nexport function JobToGood(job: TraitJob): TraitGood{\r\n    switch(job){\r\n        case 'builder': return 'shelter';\r\n        case 'doc': return 'medicine';\r\n        case 'entertainer': return 'fun';\r\n        default: case 'farmer': return 'food';\r\n    }\r\n}\r\nexport function GoodToJob(good: TraitGood): TraitJob{\r\n    switch(good){\r\n        case 'shelter': return 'builder';\r\n        case 'medicine': return 'doc';\r\n        case 'fun': return 'entertainer';\r\n        default: case 'food': return 'farmer';\r\n    }\r\n}\r\nexport type TraitGood = 'food'|'shelter'|'medicine'|'fun';\r\nexport const GoodIcon: {[key in TraitGood]: string} ={\r\n    'food': '🥪',\r\n    'shelter': '🏠', \r\n    'medicine': '💊', \r\n    'fun': '👏'\r\n};\r\n\r\nexport type TraitEmote = 'happiness'|'unhappiness'|'love'|'hate';\r\nexport const EmoteIcon: {[key in TraitEmote]: string} ={\r\n    'love': '💛',\r\n    'happiness': '👍',\r\n    'unhappiness': '💢',\r\n    'hate': '💔'\r\n};\r\nexport const EmotionWorth: {[key in TraitEmote]: number} ={\r\n    'love': 5,\r\n    'happiness': 1,\r\n    'unhappiness': -1,\r\n    'hate': -5\r\n};\r\nexport const EmotionSanity: {[key in TraitEmote]: number} ={\r\n    'love': 1,\r\n    'happiness': 0.2,\r\n    'unhappiness': 0,\r\n    'hate': -1\r\n};\r\n\r\nexport function WorldInflate(world: IWorldState){\r\n    const beans = world.beans.allIDs.reduce((arr, key) => { arr.push(world.beans.byID[key]); return arr;}, [] as IBean[])\r\n    const allMoney = beans.reduce((sum, b) => sum+b.cash, 0);\r\n    const percent = allMoney / 100;\r\n    const yearlyInflationDollars = Math.round(percent * 1);\r\n    if (yearlyInflationDollars > 0){\r\n        const richest = beans.reduce((obj: {winner?: IBean, max: number}, b) => {\r\n            if (b.cash > obj.max){\r\n                obj.winner = b;\r\n                obj.max = b.cash;\r\n            }\r\n            return obj;\r\n        }, {max: 0});\r\n        if (richest.winner){\r\n            richest.winner.cash += yearlyInflationDollars;\r\n        }\r\n    }\r\n}","import { MoverStore } from \"./simulation/MoverBus\";\r\n\r\nexport const MoverStoreInstance = new MoverStore();","import { PubSub } from \"../events/Events\";\r\nimport { IAccelerator } from \"./Geography\";\r\n\r\nexport type MoverType = 'ufo'|'bean'|'pickup';\r\ntype MoverCache = {\r\n    [key in MoverType]: {\r\n        [k2: number]: PubSub<IAccelerator>;\r\n    };\r\n};\r\n\r\nexport class MoverStore{\r\n    private cache: MoverCache = {\r\n        'ufo': {},\r\n        'bean': {},\r\n        'pickup': {}\r\n    }\r\n    public Get(type: MoverType, key: number): PubSub<IAccelerator>{\r\n        if (!this.cache[type][key])\r\n            this.cache[type][key] = new PubSub<IAccelerator>();\r\n        return this.cache[type][key];\r\n    }\r\n}","import { TraitCommunity, TraitFaith, TraitIdeals } from \"../World\";\r\n\r\nexport type BeliefCommonality = 'common'|'uncommon'|'rare';\r\nexport const CommonalityChances: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 2,\r\n    'rare': 1\r\n};\r\n\r\nexport type TraitBelief = 'Diligence'| // happy from work\r\n'Natalism'| // increased % of having kids\r\n'Antinatalism'|\r\n'Naturalism'|\r\n'Hedonism'| //more entertainment\r\n'Progressivism'|\r\n'Libertarianism'|\r\n'Parochialism'|\r\n'Cosmopolitanism'|\r\n'Capitalism'|\r\n'Socialism'|\r\n'Communism'|\r\n// 'Tribalism'| \r\n// 'Globalism'| \r\n// 'Pacifism'| \r\n'Neuroticism'| // takes extra sanity damage\r\n'Dogmatism'| \r\n// 'Mysticism'| \r\n 'Paranoia'| \r\n// 'Evangelism'| \r\n// 'Fanaticism'| // doesn't like beings that don't share narrative \r\n'Authority'| //less crime, more crime reports\r\n'Anarchism'| // breaks rules easily\r\n'Sadism'| \r\n'Vandalism'|\r\n'Antagonism'|\r\n'Enthusiasm'|\r\n'Gossip'|\r\n'Extroversion'|\r\n'Charity'| // % to donate\r\n'Gluttony'|\r\n'Wanderlust'|\r\n'Germophobia'|\r\n'Bloodthirst'|\r\n'Introversion'|\r\n'Charisma'|\r\n'Depression'|\r\n'Optimism'|\r\n'Fraud'|\r\n'Greed'; // steal easier\r\n\r\n\r\n// 'friendly'| // likes all beings more\r\n// 'realistic'| // lower happiness\r\n// 'athletic'| // takes less health damage\r\n// 'open-minded'| // beliefs are easily changed\r\n\r\nexport type BeliefSubject = 'self'|'other';\r\nexport type BeliefVerb = 'are'|'arenot';\r\nexport interface IBeliefData {\r\n    noun: string,\r\n    adj: string,\r\n    icon: string,\r\n    description?: string,\r\n    rarity: BeliefCommonality,\r\n    idealPro?: Array<TraitIdeals|TraitCommunity>,\r\n    idealCon?: Array<TraitIdeals|TraitCommunity>\r\n}\r\nexport const PrimaryBeliefData: {[key in TraitIdeals|TraitCommunity]: IBeliefData} = {\r\n    prog: {\r\n        noun: 'Progressivism', adj: 'Progressive', icon: '⚖️',\r\n        description: \"Strives to help others\", rarity: 'common',\r\n    },\r\n    trad: {\r\n        noun: 'Elitism', adj: 'Elitist', icon: '👑',\r\n        description: \"Strives for individual power\", rarity: 'common',\r\n    },\r\n    state: {\r\n        noun: 'Collectivism', adj: 'Collectivist', icon: '🕊️',\r\n        description: \"Trusts in the social group\", rarity: 'common',\r\n    },\r\n    ego: {\r\n        noun: 'Independence', adj: 'Independent', icon: '🦅',\r\n        description: \"Trusts only in oneself\", rarity: 'common',\r\n    },\r\n}\r\nexport const NarrativeBeliefData: {[key in TraitFaith]: IBeliefData} = {\r\n    rocket: {\r\n        noun: 'Futurism', adj: 'Futuristic', icon: '🚀',\r\n        description: \"Loves stories of the far future\", rarity: 'common',\r\n    },\r\n    dragon: {\r\n        noun: 'Mythology', adj: 'Mythical', icon: '🐲',\r\n        description: \"Loves stories of the legendary past\", rarity: 'common',\r\n    },\r\n    music: {\r\n        noun: 'Drama', adj: 'Dramatic', icon: '🎵',\r\n        description: \"Loves stories of emotional bonding\", rarity: 'common',\r\n    },\r\n    noFaith: {\r\n        noun: 'Nihilism', adj: 'Nihilist', icon: '⚫️',\r\n        description: \"Hates fairy tales\", rarity: 'common',\r\n    },\r\n}\r\nexport const SecondaryBeliefData: {[key in TraitBelief]: IBeliefData} = {\r\n    // misc 🎲 traits\r\n    Diligence: {\r\n        noun: 'Diligence', adj: 'Diligence', icon: '💪', rarity: 'common',\r\n        description: \"🎲 to 👍 while working\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['state', 'ego']\r\n    },\r\n    Natalism: {\r\n        noun: 'Natalism', adj: 'Natalist', icon: '👶', rarity: 'common',\r\n        description: \"Extra 🎲 for 👶;Extra 👍 after birth\" //implemented\r\n    },\r\n    Antinatalism: {\r\n        noun: 'Antinatalism', adj: 'Antinatalist', icon: '🚷', rarity: 'uncommon',\r\n        description: \"Less 🎲 for 👶;💢 after birth\" //implemented\r\n    },\r\n    Charity: {\r\n        noun: 'Charity', adj: 'Charitable', icon: '😇', rarity: 'uncommon',\r\n        description: \"🎲 to gift 💰 to the penniless; and spread 👍\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog']\r\n    },\r\n    Progressivism: {\r\n        noun: 'Progressivism', adj: 'Progressive', icon: '⚖️', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when paying taxes\" //implemented\r\n    },\r\n    Libertarianism: {\r\n        noun: 'Libertarianism', adj: 'Libertarian', icon: '🔫', rarity: 'rare',\r\n        description: \"🎲 to 💢 when paying taxes\", //implemented\r\n    },\r\n    Wanderlust: {\r\n        noun: 'Wanderlust', adj: 'Wanderer', icon: '🔭', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when travelling\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Germophobia: {\r\n        noun: 'Germophobia', adj: 'Germophobic', icon: '🤧', rarity: 'rare',\r\n        description: \"💢 when sick or working in hospital\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n\r\n    // work traits\r\n    Parochialism: {\r\n        noun: 'Parochialism', adj: 'Parochial', icon: '🐮', rarity: 'common',\r\n        description: \"Extra 👍 working 🌾; 💢 from dense houses\",  //first part implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Cosmopolitanism: {\r\n        noun: 'Cosmopolitanism', adj: 'Cosmopolitan', icon: '🍸', rarity: 'common',\r\n        description: \"Extra 👍 working 🎻; 💢 from rural houses\",  //first part implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Capitalism: {\r\n        noun: 'Capitalism', adj: 'Capitalist', icon: '🎩', rarity: 'common',\r\n        description: \"💢 working in co-ops and communes; Extra 👍 when owner\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Socialism: {\r\n        noun: 'Socialism', adj: 'Socialist', icon: '🤝', rarity: 'common',\r\n        description: \"Extra 👍 working in co-ops\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Communism: {\r\n        noun: 'Communism', adj: 'Communist', icon: '⚒️', rarity: 'common',\r\n        description: \"💢 working in companies\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n\r\n    Fraud: {\r\n        noun: 'Fraud', adj: 'Fraudulent', icon: '🤥', rarity: 'uncommon',\r\n        description: \"🎲 to avoid taxes; Extra 🎲 for theft 😈 Crime\"\r\n    },\r\n\r\n    // 👍 traits\r\n    Naturalism: {\r\n        noun: 'Naturalism', adj: 'Naturalist', icon: '🛶', rarity: 'uncommon',\r\n        description: \"Extra 👍 from 😎; 😎 3x longer\" //implemented\r\n    },\r\n    Hedonism: {\r\n        noun: 'Hedonism', adj: 'Hedonistic', icon: '💋', rarity: 'uncommon',\r\n        description: \"🎲 to emote extra 👍;🎲 to 💢 when working;\", //implemented\r\n        //idealCon: ['prog'], idealPro: ['ego', 'trad']\r\n    },\r\n    Gluttony: {\r\n        noun: 'Gluttony', adj: 'Glutton', icon: '🎃', rarity: 'common',\r\n        description: \"Extra 👍 when stuffed; Extra 💢 when hungry;\", //implemented\r\n        //idealCon: ['prog'], idealPro: ['ego', 'trad']\r\n    },\r\n    Paranoia: {\r\n        noun: 'Paranoia', adj: 'Paranoid', icon: '👽', rarity: 'uncommon',\r\n        description: \"🎲 to 💢 at any time\",  //implemented\r\n        //idealCon: ['state'], idealPro: ['ego']\r\n    },\r\n    Depression: {\r\n        noun: 'Depression', adj: 'Depressive', icon: '😓', rarity: 'common',\r\n        description: \"🎲 to 💢 when unhappy\",\r\n    },\r\n    Optimism: {\r\n        noun: 'Optimism', adj: 'Optimistic', icon: '😺', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when happy\",\r\n    },\r\n\r\n    // 😈 Crime traits\r\n    Authority: {\r\n        noun: 'Authority', adj: 'Authoritarian', icon: '👢', rarity: 'common',\r\n        description: \"Less 🎲 for all 😈 Crime\", //implemented\r\n        //idealCon: ['ego'], idealPro: ['state']\r\n    },\r\n    Anarchism: {\r\n        noun: 'Anarchism', adj: 'Anarchist', icon: '🖕', rarity: 'uncommon',\r\n        description: \"Extra 🎲 for all 😈 Crime\", //implemented\r\n    },\r\n    Greed: {\r\n        noun: 'Greed', adj: 'Greedy', icon: '🤑', rarity: 'common',\r\n        description: \"Extra 🎲 for theft 😈 Crime; Extra 👍 when rich\",\r\n        //idealCon: ['prog'], idealPro: ['trad']\r\n    },\r\n    Bloodthirst: {\r\n        noun: 'Bloodthirst', adj: 'Bloodthirsty', icon: '🩸', rarity: 'rare',\r\n        description: \"High 🎲 to ☠️ Kill during 😈 Crime\"\r\n    },\r\n    // Pacifism: {\r\n    //     noun: 'Pacifism', adj: 'Pacifist', icon: '😘', rarity: 'common',\r\n    //     description: \"will never punish others\",\r\n    //     idealCon: ['trad'], idealPro: ['prog']\r\n    // },\r\n    // Mysticism: {\r\n    //     noun: 'Mysticism', adj: 'Mystical', icon: '🔮', rarity: 'common',\r\n    //     description: \"🎲 to 👏 in any conversation\",\r\n    //     idealCon: ['trad'], idealPro: ['prog']\r\n    // },\r\n\r\n    // 🗣️ traits\r\n    Extroversion: {\r\n        noun: 'Extroversion', adj: 'Extroverted', icon: '🤩', rarity: 'common',\r\n        description: \"Extra 🎲 to start a 🗣️\", //implemented\r\n    },\r\n    Introversion: {\r\n        noun: 'Introversion', adj: 'Introverted', icon: '🤓', rarity: 'uncommon',\r\n        description: \"Less 🎲 to be in a 🗣️\", //implemented\r\n    },\r\n    Charisma: {\r\n        noun: 'Charisma', adj: 'Charismatic', icon: '😏', rarity: 'uncommon',\r\n        description: \"More 🎲 to persuade in a 🗣️\", //implemented\r\n    },\r\n    Gossip: {\r\n        noun: 'Gossip', adj: 'Gossipy', icon: '📞', rarity: 'common',\r\n        description: \"🎲 to spread 💢 in a 🗣️; 🎲 to 👍 after 🗣️\", //implemented\r\n    },\r\n    Antagonism: {\r\n        noun: 'Antagonism', adj: 'Antagonistic', icon: '🤬', rarity: 'common',\r\n        description: \"🎲 to spread 💢 in a 🗣️\" //implemented\r\n    },\r\n    Enthusiasm: {\r\n        noun: 'Enthusiasm', adj: 'Enthusiastic', icon: '🥳', rarity: 'common',\r\n        description: \"🎲 to spread 👍 in a 🗣️\" //implemented\r\n    },\r\n    // Globalism: {\r\n    //     noun: 'Globalism', adj: 'Globalist', icon: '🌍', rarity: 'common',\r\n    //     description: \"🎲 to 👍 other hair colors in a 🗣️\",\r\n    //     idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    // },\r\n    // Tribalism: {\r\n    //     noun: 'Tribalism', adj: 'Tribal', icon: '🏰', rarity: 'common',\r\n    //     description: \"🎲 to 💢 other hair colors in a 🗣️\",\r\n    //     idealCon: ['prog'], idealPro: ['state', 'ego']\r\n    // },\r\n\r\n    // narrative traits\r\n    // Evangelism: {\r\n    //     noun: 'Evangelism', adj: 'Evangelist', icon: '📣', rarity: 'common',\r\n    //     description: \"+50% persuasion of 🎭\",\r\n    //     idealCon: ['ego'], idealPro: ['state']\r\n    // },\r\n    // Fanaticism: {\r\n    //     noun: 'Fanaticism', adj: 'Fanatical', icon: '👺', rarity: 'common',\r\n    //     description: \"🎲 to 💢 other 🎭\",\r\n    //     idealCon: ['prog'], idealPro: []\r\n    // },\r\n    // Xenophobia: {\r\n    //     noun: 'Xenophobia', adj: 'Xenophobic', icon: '🛑', rarity: 'common',\r\n    //     description: \"🎲 to 💢 when living with other hair colors\",\r\n    // },\r\n\r\n    // super bad traits\r\n    Sadism: {\r\n        noun: 'Sadism', adj: 'Sadistic', icon: '😈', rarity: 'rare',\r\n        description: \"🎲 to ☠️ Kill in a 🗣️;👍 from ☠️ Kill\"\r\n    },\r\n    Vandalism: {\r\n        noun: 'Vandalism', adj: 'Vandal', icon: '💩', rarity: 'rare',\r\n        description: \"🎲 to destroy goods;👍 from 😈 Theft Crime\"\r\n    },\r\n\r\n    // madness traits\r\n    // Delirium: {\r\n    //     noun: 'Delirium', adj: 'Delirious', icon: '😪', rarity: 'rare',\r\n    //     description: \"Chooses actions at random\"\r\n    // },\r\n    // DelusionalMania: {\r\n    //     noun: 'Delusional Mania', adj: 'Delusional Maniac', icon: '😵', rarity: 'rare',\r\n    //     description: \"🎲 to ☠️ nearby subjects\"\r\n    // },\r\n    // Catatonia: {\r\n    //     noun: 'Catatonia', adj: 'Catatonic', icon: '😶', rarity: 'rare',\r\n    //     description: \"-50% walk speed. Cannot work.\"\r\n    // },\r\n\r\n    // meta-traits\r\n    Neuroticism: {\r\n        noun: 'Neuroticism', adj: 'Neurotic', icon: '😱', rarity: 'rare',\r\n        description: \"+100% 🧠 damage\", //implemented\r\n    },\r\n    Dogmatism: {\r\n        noun: 'Dogmatism', adj: 'Dogmatic', icon: '🐶', rarity: 'uncommon',\r\n        description: \"Cannot change beliefs\", //implemented\r\n    },\r\n};\r\n\r\nexport function IsIdealDivergent(con: TraitCommunity|TraitIdeals, utopiaMotive: TraitIdeals, utopiaCommunity: TraitCommunity): boolean{\r\n    switch(con){\r\n        case 'trad':\r\n        case 'prog':\r\n            return con == utopiaMotive;\r\n        case 'state':\r\n        case 'ego':\r\n            return con == utopiaCommunity;\r\n    }\r\n}\r\n\r\nexport function IsBeliefDivergent(belief: TraitBelief, utopiaMotive: TraitIdeals, utopiaCommunity: TraitCommunity): boolean{\r\n    const data = SecondaryBeliefData[belief];\r\n    return data.idealCon != null && data.idealCon.reduce((isDivergent: boolean, con) => {\r\n        return isDivergent || IsIdealDivergent(con, utopiaMotive, utopiaCommunity);\r\n    }, false);\r\n}\r\n\r\nexport const BeliefsAll = Object.keys(SecondaryBeliefData).map((x) => x as TraitBelief);\r\n\r\n/**\r\n * static list of beliefs with rarity\r\n * \r\n * common traits are duplicated many times within the array\r\n * rarer traits have fewer duplications or a singular instance \r\n */\r\nexport const RandomBeliefBucket = Object.keys(SecondaryBeliefData).reduce((list, str) => {\r\n    const t = str as TraitBelief;\r\n    const slots = CommonalityChances[SecondaryBeliefData[t].rarity];\r\n    for (let i = 0; i < slots; i++) {\r\n        list.push(t);\r\n    }\r\n    return list;\r\n}, [] as TraitBelief[]);\r\n\r\nexport interface Belief{\r\n    subject: BeliefSubject;\r\n    verb: BeliefVerb;\r\n    adj: TraitBelief;\r\n}\r\n\r\nexport type HedonSourceToVal = {[source: string]: number};\r\nexport interface HedonReport {\r\n    flatAverage: number,\r\n    weightedAverage: number,\r\n    maxSource: string,\r\n    minSource: string,\r\n    all: HedonSourceToVal\r\n}\r\nexport interface HedonExtremes { max:number, min:number }\r\n\r\nexport function GetHedonReport(hedonHistory: HedonSourceToVal[]): HedonReport {\r\n    if (hedonHistory.length === 0){\r\n        return {\r\n            all: {},\r\n            flatAverage: 0,\r\n            weightedAverage: 0,\r\n            maxSource: '',\r\n            minSource: ''\r\n        }\r\n    }\r\n    const all: {[source: string]: number} = {};\r\n    let weightedAverage: number = 0;\r\n    let allSum: number = 0;\r\n    for (let i = 0; i < hedonHistory.length; i++) {\r\n        const day = hedonHistory[i];\r\n        let daySum = 0;\r\n        const sources = Object.keys(day);\r\n        for (let j = 0; j < sources.length; j++) {\r\n            const source = sources[j];\r\n            daySum += day[source];\r\n            if (!all[source]) all[source] = 0;\r\n            all[source] += day[source];\r\n        }\r\n        weightedAverage += daySum / (i + 1);\r\n        allSum += daySum;\r\n    }\r\n\r\n    const allSources = Object.keys(all);\r\n    return {\r\n        flatAverage: allSum / hedonHistory.length,\r\n        weightedAverage: weightedAverage,\r\n        maxSource: allSources.reduce((max, source) => {\r\n            if (all[source] > max.val)\r\n                return {source: source, val: all[source]};\r\n            else return max;\r\n        }, {source: '', val: 0}).source,\r\n        minSource: allSources.reduce((max, source) => {\r\n            if (all[source] < max.val)\r\n                return {source: source, val: all[source]};\r\n            else return max;\r\n        }, {source: '', val: 0}).source,\r\n        all: all\r\n    }\r\n}","import { GetRandomFloat } from \"../WorldGen\";\r\n\r\nexport function shuffle<T>(array: Array<T>) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport function MathClamp(input: number, min: number, max: number): number{\r\n    return Math.max(Math.min(input, max), min)\r\n}\r\n\r\nexport function groupBy<T>(list: T[], keyGetter: (val: T) => string|number): Map<string|number, T[]> {\r\n    const map = new Map<string|number, T[]>();\r\n    list.forEach((item) => {\r\n         const key = keyGetter(item);\r\n         const collection = map.get(key);\r\n         if (!collection) {\r\n             map.set(key, [item]);\r\n         } else {\r\n             collection.push(item);\r\n         }\r\n    });\r\n    return map;\r\n}\r\n\r\nexport const StatsNormalMean = 0.5;\r\nexport const StatsNormalDev = 0.125;\r\n\r\n/**\r\n * Marsaglia polar method\r\n * @param mean \r\n * @param standardDeviation \r\n * @returns \r\n */\r\nexport function SampleNormalDistribution(seed: string, mean: number = StatsNormalMean, standardDeviation: number = StatsNormalDev) {\r\n    let q, u, v, p;\r\n    do {\r\n        u = 2.0 * GetRandomFloat(seed) - 1.0;\r\n        v = 2.0 * GetRandomFloat(seed) - 1.0;\r\n        q = u * u + v * v;\r\n    } while (q >= 1.0 || q === 0);\r\n    p = Math.sqrt(-2.0 * Math.log(q) / q);\r\n    return mean + standardDeviation * u * p;\r\n}","import { LiveMap } from \"../events/Events\";\r\nimport { TraitGood, TraitJob } from \"../World\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\nimport { MathClamp } from \"./Utils\";\r\n\r\nexport interface HexPoint{\r\n    q: number;\r\n    r: number;\r\n}\r\nexport class Hex implements HexPoint{\r\n    constructor(public q: number, public r: number){}\r\n}\r\nexport const hex_directions: HexPoint[] = [\r\n    {q:+1, r:0}, {q: +1, r: -1}, {q: 0, r: -1}, \r\n    {q:-1, r:0}, {q: -1, r: +1}, {q: 0, r: +1}, \r\n];\r\nexport function hex_direction(direction: number): HexPoint{\r\n    return hex_directions[direction]\r\n}\r\n\r\nexport function hex_neighbor(hex: HexPoint, direction: number): HexPoint{\r\n    var dir = hex_direction(direction)\r\n    return {q: hex.q + dir.q, r: hex.r + dir.r};\r\n}\r\nexport function hex_distance(a: HexPoint, b: HexPoint): number{\r\n    return (Math.abs(a.q - b.q) \r\n          + Math.abs(a.q + a.r - b.q - b.r)\r\n          + Math.abs(a.r - b.r)) / 2\r\n}\r\nexport function hex_add(a: HexPoint, b: HexPoint): HexPoint {\r\n    return {q: a.q + b.q, r: a.r + b.r};\r\n}\r\nexport function hex_scale(a: HexPoint, k: number): HexPoint {\r\n    return {q:a.q * k, r:a.r * k};\r\n}\r\nexport function hex_ring(center: HexPoint, radius: number): HexPoint[]{\r\n    var results: HexPoint[] = [];\r\n    // this code doesn't work for radius == 0; can you see why?\r\n    var cube = hex_add(center, \r\n                        hex_scale(hex_direction(4), radius));\r\n    for (let i = 0; i < 6; i++) {\r\n        for (let j = 0; j < radius; j++) {\r\n            results.push(cube)\r\n            cube = hex_neighbor(cube, i);       \r\n        }\r\n    }\r\n    return results;\r\n}\r\nexport function hex_spiral(center: HexPoint, radius: number): HexPoint[]{\r\n    var results = [center];\r\n    for (let k = 0; k < radius; k++) {\r\n        results = results.concat(hex_ring(center, k));\r\n        //console.log(results);   \r\n    }\r\n    return results;\r\n}\r\n\r\nexport function move_towards(current: Point, target: Point, maxDistanceDelta: number)\r\n{\r\n    const a: Point = {x: target.x - current.x, y: target.y - current.y};\r\n    const magnitude = Math.sqrt(a.x * a.x + a.y * a.y);\r\n    if (magnitude <= maxDistanceDelta || magnitude == 0)\r\n    {\r\n        return target;\r\n    }\r\n    return {\r\n        x: current.x + a.x / magnitude * maxDistanceDelta,\r\n        y: current.y + a.y / magnitude * maxDistanceDelta,\r\n    };\r\n}\r\nexport interface IAccelerator {point: Point, velocity: Vector};\r\nexport const OriginAccelerator = { point: {x: 0, y: 0}, velocity: {x: 0, y: 0}}\r\nexport function accelerate_towards(\r\n    mover: IAccelerator, \r\n    target: Point, \r\n    acceleration: number,\r\n    maxSpeed: number, \r\n    colDistance: number, \r\n    brake: Point): boolean\r\n{\r\n    const delta: Point = {\r\n        x: target.x - mover.point.x, \r\n        y: target.y - mover.point.y\r\n    };\r\n    const magnitude = Math.sqrt((delta.x * delta.x) + (delta.y * delta.y));\r\n    if (magnitude <= colDistance) return true;\r\n\r\n    delta.x /= magnitude;\r\n    delta.y /= magnitude;\r\n\r\n    mover.velocity.x += (delta.x * acceleration);\r\n    mover.velocity.y += (delta.y * acceleration);\r\n    mover.velocity.x = MathClamp(mover.velocity.x, -maxSpeed, maxSpeed);\r\n    mover.velocity.y = MathClamp(mover.velocity.y, -maxSpeed, maxSpeed);\r\n\r\n    accelerator_coast(mover, brake);\r\n    return false;\r\n}\r\nexport function accelerator_coast(\r\n    current: IAccelerator, \r\n    brake: Point): void\r\n{\r\n    current.velocity.x *= brake.x;\r\n    current.velocity.y *= brake.y;\r\n\r\n    current.point.x += current.velocity.x;\r\n    current.point.y += current.velocity.y;\r\n}\r\n\r\nexport function lerp(a: number, b: number, t: number): number{\r\n    return a + (b - a) * t\r\n}\r\n\r\nexport function vector_lerp(a: Point, b: Point, t: number): Point{\r\n    return {\r\n        x: lerp(a.x, b.x, t),\r\n        y: lerp(a.y, b.y, t)\r\n    };\r\n}\r\nfunction cube_lerp(a: CubicPoint, b: CubicPoint, t: number): CubicPoint{\r\n    return {\r\n        x: lerp(a.x, b.x, t),\r\n        y: lerp(a.y, b.y, t),\r\n        z: lerp(a.z, b.z, t)\r\n    };\r\n}\r\nfunction cube_distance(a: CubicPoint, b: CubicPoint): number{\r\n    return (Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z)) / 2\r\n}\r\nfunction cube_round(cube: CubicPoint): CubicPoint{\r\n    var rx = Math.round(cube.x);\r\n    var ry = Math.round(cube.y);\r\n    var rz = Math.round(cube.z);\r\n\r\n    var x_diff = Math.abs(rx - cube.x)\r\n    var y_diff = Math.abs(ry - cube.y)\r\n    var z_diff = Math.abs(rz - cube.z)\r\n\r\n    if (x_diff > y_diff && x_diff > z_diff)\r\n        rx = -ry-rz;\r\n    else if (y_diff > z_diff)\r\n        ry = -rx-rz;\r\n    else\r\n        rz = -rx-ry;\r\n\r\n    return {x: rx, y: ry, z: rz};\r\n}\r\nfunction round_point_to_hex(hex: HexPoint): HexPoint{\r\n    return cube_to_axial(cube_round(axial_to_cube(hex)))\r\n\r\n}\r\nfunction cube_to_axial(cube: CubicPoint){\r\n    var q = cube.x;\r\n    var r = cube.z;\r\n    return new Hex(q, r);\r\n}\r\nfunction axial_to_cube(hex: HexPoint): CubicPoint{\r\n    return {\r\n        x: hex.q,\r\n        z: hex.r,\r\n        y: -hex.q-hex.r\r\n    };\r\n}\r\nfunction cube_linedraw(a: CubicPoint, b: CubicPoint): HexPoint[]{\r\n    var N = cube_distance(a, b);\r\n    var results: HexPoint[] = [];\r\n    for (let i = 0; i <= N; i++) {\r\n        results.push(cube_to_axial(cube_round(cube_lerp(a, b, 1.0/N * i))))\r\n    }\r\n    return results;\r\n}\r\nexport function hex_linedraw(a: HexPoint, b: HexPoint): HexPoint[]{\r\n    return cube_linedraw(axial_to_cube(a), axial_to_cube(b));\r\n}\r\n\r\nclass Orientation {\r\n    // angle is in multiples of 60°\r\n    constructor(public f0: number, public f1: number, public  f2: number, public f3: number,\r\n        public b0: number, public b1: number,public b2: number,public b3: number,\r\n        public start_angle: number){}\r\n};\r\nexport const layout_flat: Orientation = new Orientation(\r\n    3.0 / 2.0, \r\n    0.0, \r\n    Math.sqrt(3.0) / 2.0, \r\n    Math.sqrt(3.0),\r\n    2.0 / 3.0, \r\n    0.0, \r\n    -1.0 / 3.0, \r\n    Math.sqrt(3.0) / 3.0,\r\n    0.0\r\n);\r\nexport const origin_point: Point = {x: 0, y: 0};\r\nexport const hex_origin: HexPoint = {q: 0, r: 0};\r\nexport function hex_to_pixel(size: Point, origin: Point, h: HexPoint): Point {\r\n    const M: Orientation = layout_flat;\r\n    const x = (M.f0 * h.q + M.f1 * h.r) * size.x;\r\n    const y = (M.f2 * h.q + M.f3 * h.r) * size.y;\r\n    return {x: x + origin.x, y: y + origin.y};\r\n}\r\nexport function pixel_to_hex(size: Point, origin: Point, p: Point) {\r\n    const M = layout_flat;\r\n    const pt = {x: (p.x - origin.x) / size.x,\r\n                y: (p.y - origin.y) / size.y\r\n            };\r\n    const q = M.b0 * pt.x + M.b1 * pt.y;\r\n    const r = M.b2 * pt.x + M.b3 * pt.y;\r\n    return new Hex(q, r);\r\n}\r\n\r\n\r\nexport interface PolarPoint{\r\n    /**\r\n     * radius (in pixels)\r\n     */\r\n    r: number;\r\n    /**\r\n     * azimuth (radians)\r\n     */\r\n    az: number;\r\n}\r\n\r\nexport function polarToPoint(p: PolarPoint): Point{\r\n    return {\r\n        x: p.r * Math.cos(p.az),\r\n        y: p.r * Math.sin(p.az)\r\n    }\r\n}\r\n\r\nexport function distanceBetweenPolar(a: PolarPoint, b: PolarPoint): number{\r\n    const aCart = polarToPoint(a);\r\n    const bCart = polarToPoint(b)\r\n    return Math.sqrt(\r\n        Math.pow(aCart.x - aCart.x, 2) +\r\n        Math.pow(bCart.y - aCart.y, 2)\r\n    );\r\n}\r\n\r\nexport interface Point{\r\n    x: number; y: number;\r\n}\r\nexport interface Vector extends Point{\r\n}\r\nexport interface CubicPoint extends Point{\r\n    z: number;\r\n}\r\n\r\nexport function transformPoint(p: Point){\r\n    return {transform:`translate(${p.x}px, ${p.y}px)`};\r\n}\r\n\r\nexport interface IBuilding{\r\n    key: number;\r\n    address: HexPoint;\r\n    type: BuildingTypes;\r\n    jobs: number[];\r\n    upgraded: boolean,\r\n    enterpriseKey?: number\r\n}\r\n\r\n/**\r\n * address books allow lookups from entity \"name\" to location\r\n */\r\nexport interface AddressBookHex{\r\n    [entityKey: number]: HexPoint\r\n}\r\nexport interface AddressBookPoint{\r\n    [entityKey: number]: Point\r\n}\r\n/**\r\n * address grids allow lookups from location to entity\r\n * \r\n * note: coordinates are of form \"X,Y\"\r\n * and the map cannot distinguish between hex and cartesian points\r\n */\r\nexport interface AddressGrid<T>{\r\n    [coordinate: string]: T|undefined\r\n}\r\nexport interface AddressBuildingGrid extends AddressGrid<IBuilding>{}\r\n\r\nexport interface BuildingMap{\r\n    coordByID: AddressBookHex;\r\n    all: IBuilding[];\r\n}\r\n\r\nexport class CityBook {\r\n    /**\r\n     * given \"q,r\", return the IBuilding.key\r\n     */\r\n    public readonly map = new LiveMap<string, number>(new Map());\r\n    /**\r\n     * given IBuilding.type return the IBuilding[]\r\n     */\r\n    public readonly yellow = new LiveMap<string, number[]>(new Map());\r\n    /**\r\n     * given IBuilding.key, return \"q,r\"\r\n     */\r\n    public readonly white = new LiveMap<number, string>(new Map());\r\n    /**\r\n     * given IBuilding.key, return IBuilding\r\n     */\r\n    public readonly db: LiveMap<number, IBuilding>;\r\n\r\n    constructor(_db: Map<number, IBuilding>){\r\n        this.db = new LiveMap<number, IBuilding>(_db);\r\n        this.buildIndexes();\r\n        this.db.afterSetBeforePublish = () => this.buildIndexes();\r\n    }\r\n\r\n    private buildIndexes(){\r\n        const keys = Array.from(this.db.get.keys());\r\n        const ix = { \r\n            map: new Map<string, number>(),\r\n            yellow: new Map<string, number[]>(),\r\n            white: new Map<number, string>()\r\n        }\r\n        keys.forEach((key: number) => {\r\n            const b = this.db.get.get(key);\r\n            if (b){\r\n                const address = b.address.q+','+b.address.r;\r\n                ix.map.set(address, b.key);\r\n                ix.white.set(b.key, address);\r\n                const group = ix.yellow.get(b.type) || []\r\n                ix.yellow.set(b.type, group.concat([b.key]));\r\n            }\r\n\r\n        });\r\n        this.white.set(ix.white);\r\n        this.map.set(ix.map);\r\n        this.yellow.set(ix.yellow);\r\n    }\r\n\r\n    public addBuilding(b: IBuilding){\r\n        this.db.add(b.key, b);\r\n        this.buildIndexes();\r\n    }\r\n    public removeBuilding(b: IBuilding){\r\n        this.db.remove(b.key);\r\n        this.buildIndexes();\r\n    }\r\n\r\n    public getBuildings(): IBuilding[]{\r\n        return Array.from(this.db.get.values());\r\n    }\r\n    public findBuildingByCoordinate(h: HexPoint){\r\n        const address = h.q+','+h.r;\r\n        const key = this.map.get.get(address);\r\n        if (key != null) \r\n            return this.db.get.get(key);\r\n        return undefined;\r\n    }\r\n    public getRandomBuildingOfType(seed: string, buildingType: BuildingTypes): IBuilding|undefined{\r\n        const keysOfType: number[] = this.yellow.get.get(buildingType) || [];\r\n        const r = GetRandom(seed, keysOfType);\r\n        return this.db.at(r);\r\n    }\r\n\r\n    public getRandomEntertainmentBuilding(seed: string): IBuilding|undefined{\r\n        const keysOfType: number[] = (this.yellow.get.get('park') || []).concat(this.yellow.get.get('nature') || []);\r\n        const r = GetRandom(seed, keysOfType);\r\n        return this.db.at(r);\r\n    }\r\n\r\n    public getCountOfType(buildingType: BuildingTypes): number{\r\n        return Array.from(this.yellow.get.get(buildingType) || []).length;\r\n    }\r\n}\r\n\r\nexport type BuildingTypes = 'farm'|'house'|'hospital'|'church'|'theater'|'courthouse'|'park'|'nature';\r\nexport type TopiaBuildingTypes = 'utopia_fields'|'utopia_pump'|'dystopia_refinery'|'dystopia_crypt';\r\n//utopian fields = free relax\r\n//utopia pump = slowly sucks up happiness/unhappiness?\r\n//dystopia refinery = slowly converts negative emotions to energy/bots\r\n//dystopia crypt = skips death notifications (limited use?)\r\nexport type MoverTypes = 'bean'|'ufo'|'pickup';\r\nexport type MatterTypes = MoverTypes|BuildingTypes;\r\n\r\nexport const BuildingIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🐄',\r\n    'house': '🏡', 'hospital': '🏥', 'church': '⛪', 'theater': '🎪', 'courthouse':'🏫',\r\n    'park': '⛲️', 'nature': '🏞️'\r\n};\r\nexport const UpgradedBuildingIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🚜',\r\n    'house': '🏘️', 'hospital': '🏙️', 'church': '⛪', 'theater': '🏟️', 'courthouse':'🏫',\r\n    'park': '🎡', 'nature': '🏞️'\r\n};\r\nexport const BuildingJobIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🌾',\r\n    'house': '📪', 'hospital': '🛏️', 'church': '⛪', 'theater': '🪑', 'courthouse':'🏫',\r\n    'park': '💐', 'nature': '♨️'\r\n};\r\nexport const BuildingToGood: {[key in BuildingTypes]: TraitGood} = {\r\n    'farm': 'food',\r\n    'house': 'shelter', \r\n    'hospital': 'medicine', \r\n    'church': 'fun', \r\n    'theater': 'fun', \r\n    'courthouse': 'fun',\r\n    'park': 'fun', \r\n    'nature': 'fun'\r\n};\r\nexport const GoodToBuilding: {[key in TraitGood]: BuildingTypes} = {\r\n    'food': 'farm',\r\n    'shelter': 'house',\r\n    'medicine':'hospital',\r\n    'fun': 'theater'\r\n};\r\nexport const JobToBuilding: {[key in TraitJob]: BuildingTypes} = {\r\n    'farmer': 'farm',\r\n    'builder': 'house', \r\n    'doc':'hospital', \r\n    'entertainer': 'theater',\r\n    'cleric': 'church', \r\n    'jobless': 'house', \r\n    'polit': 'house'\r\n};\r\nexport const BuildingToJob: {[key in BuildingTypes]: TraitJob} = {\r\n    'farm': 'farmer',\r\n    'house': 'builder', \r\n    'hospital':'doc', \r\n    'theater': 'entertainer',\r\n    'church': 'cleric',\r\n    'park': 'entertainer',\r\n    'nature': 'entertainer',\r\n    'courthouse': 'polit'\r\n};\r\n\r\nexport const HexSizePX = 70;\r\nexport const HexSizeR = 120; // rounded sqrt(3) * HexSizePX\r\n\r\nexport function GenerateGeography(){\r\n    const numberOfRings = 5;\r\n    const radius = ((numberOfRings - 0.5) * HexSizeR) + numberOfRings;\r\n    return {\r\n        numberOfRings: numberOfRings,\r\n        hexes: hex_spiral({q:0, r:0}, numberOfRings),\r\n        hex_size: {x: HexSizePX, y: HexSizePX},\r\n        petriRadius: radius,\r\n        petriOrigin: {x: radius, y: radius}\r\n    }\r\n}","import { IBean } from './simulation/Agent';\r\nimport { RandomBeliefBucket } from './simulation/Beliefs';\r\nimport { ICity } from './simulation/City';\r\nimport { BuildingTypes, GenerateGeography, HexPoint, PolarPoint } from './simulation/Geography';\r\nimport { IDate } from './simulation/Time';\r\nimport { IWorldState } from './state/features/world';\r\nimport { TraitCommunity, TraitEthno, TraitFaith, TraitIdeals, TraitJob } from './World';\r\nimport Rand, {PRNG} from 'rand-seed';\r\n\r\nconst EnterpriseStartingListing = 1;\r\nconst MaxNumBeanTraitsOnGenerate = 3;\r\nconst RandomSeeds: {[seed: string]: Rand} = {};\r\n\r\nexport function GetRandomGenerator(seed: string){\r\n    if (RandomSeeds[seed] == null)\r\n        RandomSeeds[seed] = new Rand(seed, PRNG.sfc32);\r\n    return RandomSeeds[seed];\r\n}\r\n\r\n/**\r\n * return better random values\r\n * @param min \r\n * @param max \r\n * @returns \r\n */\r\nexport function GetRandomNumber(seed: string, min: number = 0, max: number = 1): number{\r\n    const randomNumber = GetRandomGenerator(seed).next();\r\n    // const randomNumber = window.crypto.getRandomValues()[0] / (0xffffffff + 1);\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(randomNumber * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * \r\n * @returns float between 0 and 1\r\n */\r\nexport function GetRandomFloat(seed: string): number{\r\n    return GetRandomGenerator(seed).next();\r\n}\r\n\r\n/**\r\n * given a chance (0-1) return true if random float is <= chance\r\n * @param chance \r\n * @returns \r\n */\r\nexport function GetRandomRoll(seed: string, chance: number): boolean{\r\n    const randomNumber = GetRandomFloat(seed);\r\n    //console.log(`DC ${(chance*100).toFixed(3)} rolled ${(randomNumber*100).toFixed(4)}`);\r\n    return randomNumber <= chance;\r\n}\r\n\r\n/**\r\n * convenience random function\r\n * @param length \r\n * @returns \r\n */\r\nexport function GetRandomIndex(seed: string, length: number): number{\r\n    return GetRandomNumber(seed, 0, length-1)\r\n}\r\n\r\nexport function GetRandom<S>(seed: string, choices: S[]):S {\r\n    const max = choices.length;\r\n    if (max == 1)\r\n        return choices[0];\r\n\r\n    const i = GetRandomIndex(seed, choices.length);\r\n    return choices[i];\r\n}\r\nexport function RandomIdeal(seed: string): TraitIdeals{\r\n    return GetRandom(seed, ['prog', 'trad']);\r\n}\r\nexport function RandomCommunity(seed: string): TraitCommunity{\r\n    return GetRandom(seed, ['state', 'ego']);\r\n}\r\nexport function RandomEthno(seed: string): TraitEthno{\r\n    return GetRandom(seed, ['circle','square','triangle']);\r\n}\r\nexport function RandomFaith(seed: string): TraitFaith{\r\n    return GetRandom(seed, ['rocket','music','dragon', 'noFaith']);\r\n}\r\nexport function StartingCash(job: TraitJob): number{\r\n    let base = 4 + Math.floor(Math.random() * 3);\r\n    switch(job){\r\n        case 'doc': return base+2;\r\n        default: return base;\r\n    }\r\n}\r\nexport const MAX_PETRI_RADIUS = 200;\r\nexport const PI2 = Math.PI*2;\r\nexport function RandomPolar(seed: string, r?: number): PolarPoint{\r\n    return {\r\n        r: r || GetRandomNumber(seed, 0, MAX_PETRI_RADIUS),\r\n        az: GetRandomNumber(seed, 0, PI2)\r\n    };\r\n}\r\nexport function GetBuildingR(seed: string, type: BuildingTypes): number{\r\n    switch(type){\r\n        case 'farm':\r\n            return GetRandomNumber(seed, 200, 300);\r\n        default: \r\n            return GetRandomNumber(seed, 80, 200);\r\n    }\r\n}\r\n\r\nconst CityPrefixes = ['New ', 'Old ', 'Fort ', 'St. ', 'Mount ', 'Grand ', '', '', '', '', '', '', '', '', '', ''];\r\nconst CityFirstsnames = ['Spring', 'Timber', 'Over', 'West', 'East', 'North', 'South', 'Rock', 'Sand', 'Clay', 'Iron', 'Ore', 'Coal', 'Liver', 'Hawk', 'Red', 'Yellow', 'Gold', 'Blue', 'Black', 'White', 'Sunny', 'Reed', 'Ox', 'Mill', 'Fern', 'Down', 'Bel', 'Bald', 'Ash'];\r\nconst CityLastnames = ['water ', ' Springs', 'ville', 'dale', 'lane', 'peak', 'coast', 'beach', 'port', 'market', 'ton', 'brook', ' Creek', 'land', 'burgh', 'bridge', 'ford', 'bury', 'chester', 'son', 'vale', ' Valley', 'hill', 'more', 'wood', ' Oaks', ' Cove', 'mouth', 'way', 'crest'];\r\nexport function GetRandomCityName(seed: string){\r\n    return `${GetRandom(seed, CityPrefixes)}${GetRandom(seed, CityFirstsnames)}${GetRandom(seed, CityLastnames)}`;\r\n}\r\nexport const Number_Starting_City_Pop = 0;\r\n\r\nexport function GenerateCity(): ICity{\r\n    return {\r\n        ...GenerateGeography(),\r\n        key: 0,\r\n        name: 'string',\r\n        deadBeanKeys: [],\r\n        beanKeys: [],\r\n        ufoKeys: [],\r\n        pickupKeys: [],\r\n        buildingKeys: [],\r\n        pickupMagnetPoint: undefined,\r\n        costOfLiving: 0,\r\n        buildingMap: {}\r\n      }\r\n}\r\n\r\nexport function GenerateBean(world: {beans: {nextID:number}, date: IDate, seed: string}, city: ICity, parent?: IBean, hexPoint?: HexPoint, job?: TraitJob): IBean{\r\n    let newBean: IBean = {\r\n        key: world.beans.nextID++,\r\n        cityKey: city.key,\r\n        name: '',\r\n        ethnicity: RandomEthno(world.seed),\r\n        community: RandomCommunity(world.seed),\r\n        ideals: RandomIdeal(world.seed),\r\n        faith: RandomFaith(world.seed),\r\n        stamina: 'awake',\r\n        health: 'fresh',\r\n        food: 'sated',\r\n        discrete_food: 3,\r\n        discrete_health: 2,\r\n        discrete_sanity: 10,\r\n        discrete_stamina: 7,\r\n        discrete_fun: 0,\r\n        graceTicks: 0,\r\n        dob: {year: world.date.year, season: world.date.season, day: world.date.day, hour: world.date.hour},\r\n        sanity: 'sane',\r\n        beliefs: [],\r\n        lifecycle: 'alive',\r\n        hedonHistory: [{}, {}, {}, {}, {}],\r\n        job: 'jobless',\r\n        happiness: { flatAverage: 0,all: {}, maxSource: '', minSource: '', weightedAverage: 0},\r\n        lastHappiness: 0,\r\n        hedonFiveDayRecord: { max: 0, min: 0 },\r\n        fairGoodPrice: 0,\r\n        bornInPetri: parent != null,\r\n        cash: 3,\r\n        ticksSinceLastSale: 0,\r\n        ticksSinceLastRelax: 0,\r\n        lastChatMS: 0,\r\n        action: 'idle',\r\n        actionData: {act: 'idle'},\r\n        activity_duration: {'buy': 0, 'chat': 0, 'craze': 0, 'crime': 0, 'idle': 0, 'relax': 0, 'sleep': 0, 'soapbox': 0, 'travel': 0, 'work': 0},\r\n    };\r\n    // MoverBusInstance.Get('bean', newBean.key).publish({\r\n    //     velocity: {x: 0, y: 0},\r\n    //     point: hex_to_pixel(city.hex_size, city.petriOrigin, hexPoint || {q: 0, r: 0})\r\n    // });\r\n    newBean.name = GetRandom(world.seed, ['Joe', 'Frank', 'Jill', 'Jose',\r\n    'Johnny', 'Isabelle', 'Carmen', 'Ace', 'Carl', 'Zander', 'Jean',\r\n    'Anne', 'Leslie', 'Ben', 'Ron', \r\n    'Ellen', 'Dallas', 'Kane', 'Ash', \r\n    'Jim', 'James', 'Leonard', 'Nyota', 'Christine', 'Scotty', 'Tasha', 'Geordi', 'Beverly', 'Deanna', 'Wesley', 'Majel',\r\n    'Malcolm','River',  \r\n    'Luke', 'Han', 'Owen', 'Rey', 'Mace', 'Cody',\r\n    'Dana', 'Walter',  \r\n    'Rick', 'Holden', 'Roy', 'Pris', 'Eldon', 'Rachael',\r\n    'Rose', 'Donna', 'Jack', 'Amy', 'Rory', 'Martha', 'Clara', \r\n    'Arnold', 'Dave', 'Holly', \r\n    'Kara', 'Gaius','William', 'Lee', 'Laura', 'Saul',\r\n    'Max', 'Edison', 'Theora', 'Bryce', 'Murray', 'Ned',\r\n    'Daniel', 'Samantha', \r\n    'Logan', 'Francis', 'Jessica',\r\n    'Thomas',\r\n    'Benny', 'James', 'John Henry', 'Sarah', 'Piper', 'Nick', 'Shaun', 'Preston'\r\n    ]) + ' ';\r\n    newBean.name += GetRandom(world.seed, [\r\n        'Ripley', 'Bishop', 'Hicks', 'Vasquez', 'Hudson', \r\n        'Rico', 'Flores', 'Ibanez', 'Levy', 'Jenkins', 'Barlow', 'Zim', 'Rasczak',\r\n        'Kirk', 'McCoy', 'Sulu', 'Uhura', 'Chekov', 'Chapel', 'Rand','Riker', 'Crusher', 'Barret', \"O'Brien\",\r\n        'Reynolds', 'Tam', \r\n        'Scully', 'Mulder','Skinner', \r\n        'Connor', \r\n        'Rex',\r\n        'Thrace', 'Baltar', 'Smith','Adama', 'Roslin', 'Tigh', 'Song', 'Oswald', \r\n        'Deckard', 'Bryant', 'Tyrell', 'Sebastian', 'Voight', 'Kampff',\r\n        'Tyler', 'Harkness', 'Jones', 'Noble', 'Pond', 'Williams',\r\n        'Rimmer', 'Lister', \r\n        'Head', 'Carter', 'Lynch', 'McKenzie', 'Grossberg',\r\n        \"O'Neil\", 'Jackson', 'Carter',\r\n        'Whitmore',\r\n        'House', 'Mitchell', 'Eden', 'Lyons', 'Valentine', 'Garvey'\r\n         ]);\r\n    const beanBeliefCount = Math.ceil(Math.random() * MaxNumBeanTraitsOnGenerate);\r\n    while (newBean.beliefs.length < beanBeliefCount) {\r\n        const newBelief = GetRandom(world.seed, RandomBeliefBucket);\r\n        const hasAlready = newBean.beliefs.includes(newBelief);\r\n        if (!hasAlready)\r\n            newBean.beliefs.push(newBelief);\r\n    }\r\n\r\n    if (parent){\r\n        newBean.ethnicity = parent.ethnicity;\r\n        newBean.name = newBean.name.split(' ')[0] + ' ' + parent.name.split(' ')[1];\r\n        newBean.cash = parent.cash / 2;\r\n        parent.cash /= 2;\r\n    }\r\n    \r\n    // if (job == null){\r\n    //     switch (city.beanSeed){\r\n    //         case 1:\r\n    //             job = 'farmer'; break;\r\n    //         case 2:\r\n    //             job = 'builder'; break;\r\n    //         case 3:\r\n    //             job = 'doc'; break;\r\n    //         default:\r\n    //             job = GetRandom(['farmer', 'builder', 'doc', 'entertainer']); break;\r\n    //     }\r\n    // }\r\n    // newBean.trySetJob(job);\r\n    \r\n    return newBean;\r\n}","import { Live } from \"../events/Events\";\r\nimport { TraitCommunity, TraitFood, TraitGood, TraitHealth, TraitIdeals } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { IEconomicAgent } from \"./Economy\";\r\nimport { IPolicy } from \"./Politics\";\r\n\r\nexport type LawGroup = 'Taxation'|'Welfare'|'Economics'|'Crime'|'Culture';\r\nexport type LawAxis = 'wel_food'|'wel_house'|'wel_health'|'tax_basic'|'tax_second'|'econ_sub'|'cul_rel'|'cul_theo'|'crime_theo';\r\n\r\nexport type LawType = 'civil'|'criminal';\r\n\r\nexport type LawKey = 'food_aid'\r\n|'medical_aid'\r\n|'poll_tax'\r\n// |'wealth_tax'\r\n// |'food_bank'\r\n// |'univ_rations'\r\n// |'housing_subsidy'\r\n// |'state_apartments'\r\n// |'clinics'\r\n// |'grain_sub'\r\n// |'arts'\r\n// |'theocracy'\r\n// |'secularism'\r\n// |'atheism'\r\n// |'mythology'\r\n// |'futurism'\r\n// |'drama'\r\n|'sales_tax'\r\n// |'vice_tax'\r\n// |'prop_tax'\r\n|'death_tax';\r\n\r\nexport type LawPrereq = TraitBelief|TraitBelief[];\r\nexport const DollarPerBeanRebateThreshold = 1;\r\nexport const PollTaxWeeklyAmount = 0.1;\r\n\r\nexport function PlayerCanSeePrereqs(prereqs: LawPrereq[], seen: {[belief: string]: boolean}){\r\n    return prereqs.length === 0 || prereqs.some((x) => PlayerKnowsPrereq(x, seen));\r\n}\r\nexport function PlayerMeetsPrereqs(prereqs: LawPrereq[], seen: {[belief: string]: boolean}){\r\n    return prereqs.length === 0 || prereqs.every((x) => PlayerKnowsPrereq(x, seen));\r\n}\r\nexport function PlayerKnowsPrereq(prereq: LawPrereq, seen: {[belief: string]: boolean}){\r\n    return Array.isArray(prereq) ? prereq.some((x) => PlayerKnowsBelief(x, seen)) : PlayerKnowsBelief(prereq, seen);\r\n}\r\nexport function PlayerKnowsBelief(prereq: TraitBelief, seen: {[belief: string]: boolean}){\r\n    return seen[prereq];\r\n}\r\nexport function PrereqKey(prereq: LawPrereq){\r\n    return Array.isArray(prereq) ? prereq.join('/') : prereq;\r\n}\r\nexport function PrereqString(prereq: LawPrereq){\r\n    return Array.isArray(prereq) ? prereq.map(x => BeliefString(x)).join(' / ') : BeliefString(prereq);\r\n}\r\nexport function BeliefString(prereq: TraitBelief){\r\n    return SecondaryBeliefData[prereq].icon+' '+SecondaryBeliefData[prereq].noun;\r\n}\r\n\r\nexport type LawPunishment = 'fine'|'imprison'|'death';\r\n\r\nexport interface ILaw{\r\n    /**\r\n     * convenience grouping property\r\n     */\r\n    group: LawGroup;\r\n    /**\r\n     * \"slot\" for law\r\n     */\r\n    axis: LawAxis;\r\n    /**\r\n     * specific law selected\r\n     */\r\n    key: LawKey;\r\n}\r\nexport interface IGovernment{\r\n    laws: ILaw[];\r\n    lawTree: {[key in LawAxis]: ILaw|undefined};\r\n    cash: number;\r\n    ticksSinceLastSale: number;\r\n}\r\nexport interface ILawData extends ILaw{\r\n    prereqs: LawPrereq[];\r\n    name: string;\r\n    hint?: string;\r\n    description?: string;\r\n    icon?: string;\r\n}\r\nexport const LawAxisData: {[key in LawAxis]: {name: string}} = {\r\n    'wel_food': {name: 'Food Welfare'},\r\n    'wel_house': {name: 'Housing Welfare'},\r\n    'wel_health': {name: 'Healthcare'},\r\n    'tax_basic': {name: 'Taxation'},\r\n    'tax_second': {name: 'Advanced Taxation'},\r\n    'econ_sub': {name: 'Subsidies'},\r\n    'cul_rel': {name: 'Culture'},\r\n    'cul_theo': {name: 'State Narrative'},\r\n    crime_theo: {name: 'Persecution'}\r\n}\r\nexport const LawData: {[key in LawKey]: ILawData} = {\r\n    'food_aid':{\r\n        key: 'food_aid', group: 'Welfare', name: 'Food Aid', axis: 'wel_food', icon: '👨‍🌾',\r\n        description: 'The government buys Hungry Subjects food.', prereqs: [['Gluttony','Parochialism'], ['Charity', 'Socialism']]},\r\n    'medical_aid':{\r\n        key: 'medical_aid', group: 'Welfare', name: 'Med Aid', axis: 'wel_health', icon: '👩‍⚕️',\r\n        description: 'The government buys Sick Subjects medicine.', prereqs: ['Charity', 'Cosmopolitanism']},\r\n    // 'food_bank':{\r\n    //     key: 'food_bank', group: 'Welfare', name: 'Food Bank', axis: 'wel_food',\r\n    //     description: 'Hungry Subjects are provided food purchased by the government.'\r\n    // },\r\n    // 'food_stamps':{\r\n    //     key: 'food_stamps', group: 'Welfare', name: 'Food Stamps', axis: 'wel_food',\r\n    //     description: 'Hungry Subjects are provided money by the government to purchase food.'},\r\n    // 'univ_rations':{\r\n    //     key: 'univ_rations', group: 'Welfare', name: 'Universal Rations', axis: 'wel_food',\r\n    //     description: 'All Subjects are provided small amounts of food from the government.'},\r\n    // 'outside':{\r\n    //     key: 'outside', group: 'Welfare', name: 'Sleep Outside', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects must sleep in the cold.'},\r\n    // 'homeless_shelters':{\r\n    //     key: 'homeless_shelters', group: 'Welfare', name: 'Homeless Shelters', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects are provided shelter purchased by the government.'},\r\n    // 'housing_subsidy':{\r\n    //     key: 'housing_subsidy', group: 'Welfare', name: 'Housing Subsidy', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects are provided money by the government to purchase shelter.'},\r\n    // 'state_apartments':{\r\n    //     key: 'state_apartments', group: 'Welfare', name: 'State Apartments', axis: 'wel_house'},\r\n    // 'stay_healthy':{\r\n    //     key: 'stay_healthy', group: 'Welfare', name: 'Stay Healthy', axis: 'wel_health',\r\n    //     description: 'Sick Subjects must pay for their own medical care.'},\r\n    // 'clinics':{\r\n    //     key: 'clinics', group: 'Welfare', name: 'Charity Clinics', axis: 'wel_health',\r\n    //     description: 'Sick Subjects are provided medicine purchased by the government.'},\r\n    // 'medical_aid':{\r\n    //     key: 'medical_aid', group: 'Welfare', name: 'Medical Aid', axis: 'wel_health',\r\n    //     description: 'Sick Subjects are provided money by the government to pay for medical care.'},\r\n    // 'univ_health':{\r\n    //     key: 'univ_health', group: 'Welfare', name: 'Universal Healthcare', axis: 'wel_health',\r\n    //     description: 'All Subjects are provided medical care by the government.'},\r\n    // 'hands_off':{\r\n    //     key: 'hands_off', group: 'Economics', name: 'Laissez-faire', axis: 'econ_sub',\r\n    //     description: 'No industries receive subsidies.'},\r\n    // 'grain_sub':{\r\n    //     key: 'grain_sub', group: 'Economics', name: 'Grain Subsidy', axis: 'econ_sub',\r\n    //     description: 'Farmers are provided money.'},\r\n    // 'arts':{\r\n    //     key: 'arts', group: 'Economics', name: 'Arts Patronage', axis: 'econ_sub'},\r\n    // 'theocracy':{\r\n    //     key: 'theocracy', group: 'Crime', name: 'Illegal Narratives', axis: 'crime_theo',\r\n    //     description: \"It is illegal for subjects to speak about other universal narratives.\"},\r\n    // 'secularism':{\r\n    //     key: 'secularism', group: 'Culture', name: 'Secularism', axis: 'cul_theo',\r\n    //     description: \"The government does not endorse a particular universal narrative.\"},\r\n    // 'atheism':{\r\n    //     key: 'atheism', group: 'Culture', name: 'State Nihilism', axis: 'cul_theo'},\r\n    // 'mythology':{\r\n    //     key: 'mythology', group: 'Culture', name: 'State Mythology 🐲', axis: 'cul_theo'},\r\n    // 'futurism':{\r\n    //     key: 'futurism', group: 'Culture', name: 'State Futurism 🚀', axis: 'cul_theo'},\r\n    // 'drama':{\r\n    //     key: 'drama', group: 'Culture', name: 'State Drama 🎵', axis: 'cul_theo'},\r\n    // '':{key: // , group: '', name: 'Religious Schooling', 'state', idealPro: [ 'trad', axis: 'cul_ed'},\r\n    // '':{key: // , group: '', name: 'University Grants', 'ego', axis: 'cul_ed'},\r\n    // '':{key: // , group: '', name: 'College For All', 'state', idealPro: [ 'prog', axis: 'cul_ed'},\r\n    'poll_tax':{\r\n        key: 'poll_tax', group: 'Taxation', name: 'Head Tax', axis: 'tax_basic', prereqs: [], icon: '👑',\r\n        description: 'Subjects must pay a flat tax.'},\r\n    'sales_tax':{\r\n        key: 'sales_tax', group: 'Taxation', name: 'Sales Tax', axis: 'tax_basic', prereqs: [], icon: '💸',\r\n        description: 'Subjects must pay a percentage tax for every transaction.'},\r\n    // 'wealth_tax':{\r\n    //     key: 'wealth_tax', group: 'Taxation', name: 'Wealth Tax', axis: 'tax_basic',\r\n    //     description: 'Rich subjects must pay a percentage tax on their excess cash.'},\r\n    // 'vice_tax':{\r\n    //     key: 'vice_tax', group: 'Taxation', name: 'Vice Tax', axis: 'tax_second',\r\n    //     description: 'Entertainment goods have a flat tax.'},\r\n    // 'prop_tax':{\r\n    //     key: 'prop_tax', group: 'Taxation', name: 'Property Tax', axis: 'tax_second',\r\n    //     description: 'Subjects must pay a tax on housing.'},\r\n    'death_tax':{\r\n        key: 'death_tax', group: 'Taxation', name: 'Death Tax', axis: 'tax_second', prereqs: [], icon: '☠️',\r\n        description: 'Dead subjects pay a portion of their cash to the government.'},\r\n}\r\nexport interface IGovernment{\r\n    \r\n}\r\nexport type LawGroupToLaws = {\r\n    [key in LawGroup]: ILaw[]\r\n};\r\nexport const SalesTaxPercentage = 0.05;\r\nexport class Government{\r\n    public get laws(): ILaw[] {\r\n        return Object.values(this.lawTree).flatMap(law => law ? [law] : []);\r\n    }\r\n    public set laws(val: ILaw[]) {\r\n        val.forEach((v) => {\r\n            this.lawTree[v.axis] = v;\r\n        });\r\n    }\r\n    public getLawsByGroup(): LawGroupToLaws {\r\n        return this.laws.reduce((d, x) => {\r\n            d[x.group].push(x);\r\n            return d;\r\n        }, {\r\n            Taxation: [] as ILaw[],\r\n            Welfare: [] as ILaw[],\r\n            Economics: [] as ILaw[],\r\n            Crime: [] as ILaw[],\r\n            Culture: [] as ILaw[]\r\n        });\r\n    }\r\n    public lawTree: {[key in LawAxis]: ILaw|undefined} = {} as {[key in LawAxis]: ILaw|undefined};\r\n    public treasury: Live<number> = new Live<number>(0);\r\n\r\n    isLaw(l: LawKey): boolean{\r\n        return this.lawTree[LawData[l].axis]?.key === l;\r\n    }\r\n\r\n    enact(l: LawKey): void {\r\n        const data = LawData[l];\r\n        this.lawTree[data.axis] = data;\r\n    }\r\n\r\n    revoke(l: LawKey): void {\r\n        const data = LawData[l];\r\n        this.lawTree[data.axis] = undefined;\r\n    }\r\n\r\n    get salesTaxPercentage(): number{\r\n        return this.isLaw('sales_tax') ? SalesTaxPercentage : 0;\r\n    }\r\n    \r\n    PurchaseQualifiesForWelfare(bean: IBean, good: TraitGood): boolean{\r\n        switch(good){\r\n            case 'food':\r\n                return (bean.food === 'starving' || bean.food === 'hungry') && this.isLaw('food_aid');\r\n            case 'medicine':\r\n                return (bean.health === 'sick' || bean.health === 'sickly') && this.isLaw('medical_aid');\r\n        }\r\n        return false;\r\n    }\r\n    CanPayWelfare(price: number): boolean{\r\n        return this.treasury.get >= price;\r\n    }\r\n    MaybeRebate(beans: IBean[]){\r\n        const allowedTreasury = beans.length * DollarPerBeanRebateThreshold;\r\n        if (this.treasury.get > allowedTreasury){\r\n            const overage = this.treasury.get - allowedTreasury;\r\n            const perBean = overage / beans.length;\r\n            this.treasury.set(allowedTreasury);\r\n            beans.forEach((b) => b.cash += perBean);\r\n        }\r\n    }\r\n}\r\n\r\nexport function IsLaw(gov: IGovernment, l: LawKey){\r\n    return gov.lawTree[LawData[l].axis]?.key === l;\r\n}\r\nexport function MaybeRebate(gov: IGovernment, beans: IBean[]){\r\n    const allowedTreasury = beans.length * DollarPerBeanRebateThreshold;\r\n    if (gov.cash > allowedTreasury){\r\n        const overage = gov.cash - allowedTreasury;\r\n        const perBean = overage / beans.length;\r\n        gov.cash = allowedTreasury;\r\n        beans.forEach((b) => b.cash += perBean);\r\n    }\r\n}\r\nfunction AgentIsPhysical(bean: any): bean is {food: TraitFood, health: TraitHealth} {\r\n    return bean['food'] != undefined && bean['sick'] != undefined;\r\n}\r\nexport function GovPurchaseQualifiesForWelfare(law: IGovernment, buyer: IEconomicAgent, good: TraitGood){\r\n    if (AgentIsPhysical(buyer)){\r\n        switch(good){\r\n            case 'food':\r\n                return (buyer.food === 'starving' || buyer.food === 'hungry') && IsLaw(law, 'food_aid');\r\n            case 'medicine':\r\n                return (buyer.health === 'sick' || buyer.health === 'sickly') && IsLaw(law, 'medical_aid');\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function GovCanPayWelfare(law: IGovernment, price: number): boolean{\r\n    return law.cash >= price;\r\n}","import { TraitGood, TraitJob, GoodToJob, Trait } from \"../World\";\r\nimport { LibertarianTaxUnhappyChance, ProgressivismTaxHappyChance } from \"./Bean\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IEvent, IEventBus, Live } from \"../events/Events\";\r\nimport { GovCanPayWelfare, Government, GovPurchaseQualifiesForWelfare, IGovernment, ILaw, IsLaw, SalesTaxPercentage } from \"./Government\";\r\nimport { IBean } from \"./Agent\";\r\n\r\nexport interface IEconomicAgent{\r\n    cash: number;\r\n}\r\nexport interface ISeller extends IEconomicAgent{\r\n    ticksSinceLastSale: number;\r\n}\r\nfunction AgentIsSeller(a: any): a is ISeller{\r\n    return a.ticksSinceLastSale != null;\r\n}\r\nexport interface IListing{\r\n    sellerCityKey?: number;\r\n    sellerBeanKey?: number;\r\n    sellerEnterpriseKey?: number;\r\n    price: number;\r\n    seller?: ISeller;\r\n    quantity: number;\r\n}\r\nconst AllGoods: TraitGood[] = ['food', 'shelter', 'medicine', 'fun'];\r\n\r\nexport interface IEconomy{\r\n    unfulfilledMonthlyDemand: {[key in TraitGood]: number};\r\n    monthlyDemand: {[key in TraitGood]: number};\r\n    monthlySupply: {[key in TraitGood]: number};\r\n    market: IMarket;\r\n}\r\nexport interface IMarket{\r\n    listings: {[key in TraitGood]: IListing[]};\r\n}\r\nexport interface IMarketReceipt{\r\n    bought: number, \r\n    price: number, \r\n    tax: number\r\n}\r\nexport function MarketTransact(\r\n    market: IMarket, \r\n    listing: IListing, \r\n    good: TraitGood, \r\n    demand: number, \r\n    buyer: IEconomicAgent, \r\n    seller: ISeller, \r\n    salesTaxPercentage: number){    \r\n    MarketListingSubtract(market, listing, good, demand);\r\n    const listPrice = listing.price * demand;\r\n    const tax = listPrice * salesTaxPercentage;\r\n    const grossPrice = listPrice + tax;\r\n    buyer.cash -= grossPrice;\r\n    seller.cash += listPrice;\r\n    seller.ticksSinceLastSale = 0;\r\n    return {\r\n        bought: demand,\r\n        price: listPrice,\r\n        tax: tax\r\n    }\r\n}\r\nexport function MarketGovernmentTransact(market: IMarket, gov: IGovernment, listing: IListing, good: TraitGood, demand: number, seller: ISeller){\r\n    MarketListingSubtract(market, listing, good, demand);\r\n    const listPrice = listing.price * demand;\r\n    const grossPrice = listPrice;\r\n    gov.cash -= grossPrice;\r\n    seller.cash += listPrice;\r\n    seller.ticksSinceLastSale = 0;\r\n    return {\r\n        bought: demand,\r\n        price: listPrice,\r\n        tax: 0\r\n    }\r\n}\r\nexport function MarketListingSubtract(market: IMarket, listing: IListing, good: TraitGood, demand: number){     \r\n    listing.quantity -= demand;\r\n    if (listing.quantity <= 0){\r\n        market.listings[good].splice(0, 1);\r\n    }\r\n}\r\n\r\n// export class Economy {\r\n//     market = new OrderBook();\r\n//     charity = new OrderBook();\r\n//     unfulfilledMonthlyDemand: {[key in TraitGood]: number} = { food: 0, shelter: 0, medicine: 0, fun: 0, }\r\n//     monthlyDemand: {[key in TraitGood]: number} = { food: 0, shelter: 0, medicine: 0, fun: 0, }\r\n//     monthlySupply: {[key in TraitGood]: number} = { food: 0, shelter: 0, medicine: 0, fun: 0, }\r\n//     law?: Government;\r\n//     constructor(){\r\n//     }\r\n//     public resetMonthlyDemand(){\r\n//         this.unfulfilledMonthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n//         this.monthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n//         this.monthlySupply = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n//     }\r\n//     tryTransact(\r\n//         buyer: IEconomicAgent, \r\n//         good: TraitGood,\r\n//         minDemand: number = 1,\r\n//         maxDemand: number = 1\r\n//         ): {bought: number, price: number, tax: number}|null {\r\n//         this.monthlyDemand[good] += maxDemand;\r\n//         const listing = this.market.getLowestPriceListing(good, minDemand);\r\n//         if (listing == null){\r\n//             //console.log('agent could not find '+good);\r\n//             this.unfulfilledMonthlyDemand[good] += maxDemand;\r\n//             return null;\r\n//         }\r\n//         const actualDemand = Math.min(listing.quantity, maxDemand);\r\n//         if ((listing.price * (1 + this.salesTaxPercentage)) <= buyer.cash * actualDemand){ \r\n//             const receipt = this.market.transact(listing, good, actualDemand, buyer, this.salesTaxPercentage);\r\n//             if (receipt.tax && this.law){\r\n//                 this.law.treasury.set(this.law.treasury.get+receipt.tax);\r\n//                 if (buyer instanceof Bean){\r\n//                     buyer.ifBelievesInMaybeEmote('Libertarianism', 'unhappiness', LibertarianTaxUnhappyChance);\r\n//                     buyer.ifBelievesInMaybeEmote('Progressivism', 'happiness', ProgressivismTaxHappyChance);\r\n//                 }\r\n//             }\r\n//             return receipt;\r\n//         } else if (buyer instanceof Bean) {\r\n//             if (this.law?.PurchaseQualifiesForWelfare(buyer, good) && this.law?.CanPayWelfare(listing.price)){\r\n//                 return this.market.governmentTransact(listing, good, actualDemand, this.law.treasury);\r\n//             }\r\n//             // console.log('bean couldnot afford '+good+\" @ $\"+listing?.price);\r\n//             // const charityTicket = this.charity.getLowestPriceListing(good, minDemand);\r\n//             // if (charityTicket && charityTicket.seller instanceof Charity) {\r\n//             //     // console.log('bean got '+good+\" from charity\");\r\n//             //     const actualDemand = Math.min(charityTicket.quantity, maxDemand);\r\n//             //     buyer.partyLoyalty += PartyLoyaltyPerCharityUse;\r\n//             //     charityTicket.seller.beansHelped++;\r\n//             //     charityTicket.seller.inventory -= actualDemand;\r\n//             //     return this.charity.transact(charityTicket, good, actualDemand, buyer);\r\n//             // }\r\n//         }\r\n//         this.unfulfilledMonthlyDemand[good] += actualDemand;\r\n//         return null;\r\n//     }\r\n//     canBuy(buyer: IEconomicAgent, good: TraitGood,\r\n//         minDemand: number = 1,\r\n//         maxDemand: number = 1): 'yes'|'nosupply'|'pricedout'{\r\n//         const listing = this.market.getLowestPriceListing(good, minDemand);\r\n//         if (listing == null){\r\n//             return 'nosupply';\r\n//         }\r\n//         const actualDemand = Math.min(listing.quantity, maxDemand);\r\n//         if (listing.price <= buyer.cash * actualDemand)\r\n//             return 'yes';\r\n//         if (buyer instanceof Bean && this.law?.PurchaseQualifiesForWelfare(buyer, good) && this.law?.CanPayWelfare(listing.price)){\r\n//             return 'yes';\r\n//         }\r\n//         return 'pricedout';\r\n//     }\r\n//     steal(\r\n//         good: TraitGood,\r\n//         maxDemand: number = 1\r\n//         ): number|null {\r\n//         const listing = GetRandom(this.market.listings[good]);\r\n//         if (listing == null){\r\n//             return null;\r\n//         }\r\n//         const actualDemand = Math.min(listing.quantity, maxDemand);\r\n//         this.market.subtractFromListing(listing, good, actualDemand);\r\n        \r\n//         return actualDemand;\r\n//     }\r\n//     produceAndPrice(seller: Bean, good: TraitGood, quantity: number, price: number) {\r\n//         this.monthlySupply[good] += quantity;\r\n//         const existing = this.market.getBeansListings(seller.cityKey, seller.key, good);\r\n//         if (existing){\r\n//             existing.quantity += quantity;\r\n//             existing.price = price;\r\n//             existing.quantity = Math.min(existing.quantity, 6);\r\n//         } else {\r\n//             this.market.addNewPersonalListing(good, quantity, price, seller);\r\n//         }\r\n//         this.market.sort(good);\r\n//     }\r\n//     employAndPrice(seller: IEnterprise, good: TraitGood, quantity: number, price: number) {\r\n//         this.monthlySupply[good] += quantity;\r\n//         const existing = this.market.getEnterpriseListings(seller, good);\r\n//         if (existing){\r\n//             existing.quantity += quantity;\r\n//             existing.price = price;\r\n//             existing.quantity = Math.min(existing.quantity, 6);\r\n//         } else {\r\n//             this.market.addNewEnterpriseListing(good, quantity, price, seller);\r\n//         }\r\n//         this.market.sort(good);\r\n//     }\r\n//     public mostInDemandJob(): TraitJob|null{\r\n//         const goods: TraitGood[] = AllGoods;\r\n//         const max = goods.reduce((last, good) => {\r\n//             if (this.unfulfilledMonthlyDemand[good] > last.max){\r\n//                 last.max = this.unfulfilledMonthlyDemand[good];\r\n//                 last.job = GoodToJob(good);\r\n//             }\r\n//             return last;\r\n//         }, {max: 0, job: null as TraitJob|null})\r\n\r\n//         return max.job;\r\n//     }\r\n//     public onBeanDie(bean: Bean){\r\n//         AllGoods.forEach((g) => {\r\n//             const existing = this.market.getBeansListings(bean.cityKey, bean.key, g);\r\n//             if (existing){\r\n//                 const lucky = bean.city?.getRandomCitizen();\r\n//                 if (lucky) {\r\n//                     existing.sellerCityKey = lucky.cityKey;\r\n//                     existing.sellerBeanKey = lucky.key;\r\n//                     existing.seller = lucky;\r\n//                 }\r\n//             }\r\n//         });\r\n//     }\r\n//     public getFairGoodPrice(good: TraitGood){\r\n//         return GetFairGoodPrice(this, good);\r\n//     }\r\n//     public getCostOfLiving(){\r\n//         return GetCostOfLiving(this);\r\n//     }\r\n//     get salesTaxPercentage(): number{\r\n//         return this.law?.salesTaxPercentage || 0;\r\n//     }\r\n// }\r\n\r\n// export class OrderBook{\r\n//     public readonly listings: {[key in TraitGood]: IListing[]} = {\r\n//         food: [] as IListing[],\r\n//         shelter: [] as IListing[],\r\n//         medicine: [] as IListing[],\r\n//         fun: [] as IListing[],\r\n//     };\r\n//     public getLowestPriceListing(good: TraitGood, demand: number): IListing|null{\r\n//         const fullListings =  this.listings[good].filter((l) => {\r\n//             return l.quantity >= demand;\r\n//         });\r\n//         if (fullListings.length > 0){\r\n//             let numberOfSamePriceListings = 1;\r\n//             const lowPrice = fullListings[0].price;\r\n//             for (let i = 1; i < fullListings.length; i++) {\r\n//                 const list = fullListings[i];\r\n//                 if (list.price > lowPrice)\r\n//                     break;\r\n//                 numberOfSamePriceListings++;\r\n//             }\r\n//             const i = Math.floor(Math.random() * numberOfSamePriceListings);\r\n//             if (i >= fullListings.length)\r\n//                 throw \"invalid index\";\r\n//             return fullListings[i];\r\n//         }\r\n//         return null;\r\n//     }\r\n//     public getStakeListings(bKey: number, enterpriseKey: number|undefined, g: TraitGood): IListing|undefined{\r\n//         return this.listings[g].find((x) => x.sellerBeanKey == bKey || x.sellerEnterpriseKey == enterpriseKey);\r\n//     }\r\n//     public getBeansListings(cKey: number, bKey: number, g: TraitGood): IListing|undefined{\r\n//         return this.listings[g].find((x) => x.sellerBeanKey == bKey && x.sellerCityKey == cKey);\r\n//     }\r\n//     public getEnterpriseListings(b: IEnterprise, g: TraitGood): IListing|undefined{\r\n//         return this.listings[g].find((x) => x.sellerEnterpriseKey == b.key);\r\n//     }\r\n//     public transact(listing: IListing, good: TraitGood, demand: number, buyer: IEconomicAgent, salesTaxPercentage: number){    \r\n//         this.subtractFromListing(listing, good, demand);\r\n//         const listPrice = listing.price * demand;\r\n//         const tax = listPrice * salesTaxPercentage;\r\n//         const grossPrice = listPrice + tax;\r\n//         buyer.cash -= grossPrice;\r\n//         if (listing.seller){\r\n//             listing.seller.cash += listPrice;\r\n//             listing.seller.ticksSinceLastSale = 0;\r\n//         }\r\n//         return {\r\n//             bought: demand,\r\n//             price: listPrice,\r\n//             tax: tax\r\n//         }\r\n//     }\r\n//     public governmentTransact(listing: IListing, good: TraitGood, demand: number, treasury: Live<number>){    \r\n//         this.subtractFromListing(listing, good, demand);\r\n//         const listPrice = listing.price * demand;\r\n//         const grossPrice = listPrice;\r\n//         treasury.set(treasury.get - grossPrice);\r\n//         if (listing.seller){\r\n//             listing.seller.cash += listPrice;\r\n//             listing.seller.ticksSinceLastSale = 0;\r\n//         }\r\n//         return {\r\n//             bought: demand,\r\n//             price: listPrice,\r\n//             tax: 0\r\n//         }\r\n//     }\r\n//     public subtractFromListing(listing: IListing, good: TraitGood, demand: number){     \r\n//         listing.quantity -= demand;\r\n//         if (listing.quantity <= 0){\r\n//             this.listings[good].splice(0, 1);\r\n//         }\r\n//     }\r\n//     public addNewPersonalListing(good: TraitGood, quantity: number, price: number, bean: Bean){\r\n//         this.listings[good].push({\r\n//             sellerCityKey: bean.cityKey,\r\n//             sellerBeanKey: bean.key,\r\n//             price: price,\r\n//             seller: bean,\r\n//             quantity: quantity\r\n//         });\r\n//     }\r\n//     public addNewEnterpriseListing(good: TraitGood, quantity: number, price: number, enterprise: IEnterprise){\r\n//         this.listings[good].push({\r\n//             sellerEnterpriseKey: enterprise.key,\r\n//             price: price,\r\n//             seller: enterprise,\r\n//             quantity: quantity\r\n//         });\r\n//     }\r\n//     public sort(good: TraitGood){        \r\n//         this.listings[good].sort((a, b) => a.price - b.price);\r\n//     }\r\n// }\r\n\r\nexport function EconomyTryTransact(\r\n    economy: IEconomy,\r\n    gov: IGovernment,\r\n    buyer: IEconomicAgent, \r\n    good: TraitGood,\r\n    getSeller: (l: IListing) => ISeller,\r\n    minDemand: number = 1,\r\n    maxDemand: number = 1\r\n    ): IMarketReceipt|undefined {\r\n    economy.monthlyDemand[good] += maxDemand;\r\n    const listing = MarketLowestPriceListing(economy.market, good, minDemand);\r\n    if (listing == null){\r\n        //console.log('agent could not find '+good);\r\n        economy.unfulfilledMonthlyDemand[good] += maxDemand;\r\n        return undefined;\r\n    }\r\n    const actualDemand = Math.min(listing.quantity, maxDemand);\r\n    const salesTaxPercent = IsLaw(gov, 'sales_tax') ? SalesTaxPercentage : 0;\r\n    if ((listing.price * (1 + salesTaxPercent)) <= buyer.cash * actualDemand){ \r\n        const receipt = MarketTransact(economy.market, listing, good, actualDemand, buyer, getSeller(listing), salesTaxPercent);\r\n        if (receipt.tax){\r\n            gov.cash += receipt.tax;\r\n        }\r\n        return receipt;\r\n    } else {\r\n        if (GovPurchaseQualifiesForWelfare(gov, buyer, good) && GovCanPayWelfare(gov, listing.price)){\r\n            return MarketGovernmentTransact(economy.market, gov, listing, good, actualDemand, getSeller(listing));\r\n        }\r\n    }\r\n    economy.unfulfilledMonthlyDemand[good] += actualDemand;\r\n    return undefined;\r\n}\r\nexport function EconomyMostInDemandJob(economy: IEconomy){\r\n    const goods: TraitGood[] = AllGoods;\r\n    const max = goods.reduce((last, good) => {\r\n        if (economy.unfulfilledMonthlyDemand[good] > last.max){\r\n            last.max = economy.unfulfilledMonthlyDemand[good];\r\n            last.job = GoodToJob(good);\r\n        }\r\n        return last;\r\n    }, {max: 0, job: null as TraitJob|null})\r\n\r\n    return max.job;\r\n}\r\nconst MaximumListingQuantity = 20;\r\nexport function EconomyProduceAndPrice(economy: IEconomy, seller: IBean, good: TraitGood, quantity: number, price: number) {\r\n    economy.monthlySupply[good] += quantity;\r\n    const existing = economy.market.listings[good].find((x) => x.sellerBeanKey == seller.key);\r\n    if (existing){\r\n        existing.quantity += quantity;\r\n        existing.price = price;\r\n        existing.quantity = Math.min(existing.quantity, MaximumListingQuantity);\r\n    } else {\r\n        economy.market.listings[good].push({\r\n            sellerBeanKey: seller.key,\r\n            sellerCityKey: seller.cityKey,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    economy.market.listings[good].sort((a, b) => a.price - b.price);\r\n}\r\nexport function EconomyEmployAndPrice(econ: IEconomy, seller: IEnterprise, good: TraitGood, quantity: number, price: number) {\r\n    econ.monthlySupply[good] += quantity;\r\n    const existing = econ.market.listings[good].find((x) => x.sellerEnterpriseKey == seller.key);\r\n    if (existing){\r\n        existing.quantity += quantity;\r\n        existing.price = price;\r\n        existing.quantity = Math.min(existing.quantity, MaximumListingQuantity);\r\n    } else {\r\n        econ.market.listings[good].push({\r\n            sellerEnterpriseKey: seller.key,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    econ.market.listings[good].sort((a, b) => a.price - b.price);\r\n}\r\nexport function GetFairGoodPrice(econ: IEconomy, good: TraitGood){\r\n    const supply = econ.monthlySupply[good] || 1;\r\n    const demand = econ.monthlyDemand[good];\r\n    return 0.25 + (0.75 * Math.min(demand/supply, 1));\r\n}\r\nexport function GetCostOfLiving(econ: IEconomy){\r\n    return GetFairGoodPrice(econ, 'food')+GetFairGoodPrice(econ, 'shelter')+GetFairGoodPrice(econ,'medicine');\r\n}\r\nexport function EconomyCanBuy(econ: IEconomy, gov: IGovernment, buyer: IEconomicAgent, good: TraitGood,\r\n    minDemand: number = 1,\r\n    maxDemand: number = 1): 'yes'|'nosupply'|'pricedout'{\r\n    const listing = MarketLowestPriceListing(econ.market, good, minDemand);\r\n    if (listing == null){\r\n        return 'nosupply';\r\n    }\r\n    const actualDemand = Math.min(listing.quantity, maxDemand);\r\n    if (listing.price <= buyer.cash * actualDemand)\r\n        return 'yes';\r\n    if (GovPurchaseQualifiesForWelfare(gov, buyer, good) && GovCanPayWelfare(gov, listing.price)){\r\n        return 'yes';\r\n    }\r\n    return 'pricedout';\r\n\r\n}\r\n\r\nfunction MarketLowestPriceListing(market: IMarket, good: TraitGood, demand: number): IListing|null{\r\n    const fullListings =  market.listings[good].filter((l) => {\r\n        return l.quantity >= demand;\r\n    });\r\n    if (fullListings.length > 0){\r\n        let numberOfSamePriceListings = 1;\r\n        const lowPrice = fullListings[0].price;\r\n        for (let i = 1; i < fullListings.length; i++) {\r\n            const list = fullListings[i];\r\n            if (list.price > lowPrice)\r\n                break;\r\n            numberOfSamePriceListings++;\r\n        }\r\n        const i = Math.floor(Math.random() * numberOfSamePriceListings);\r\n        if (i >= fullListings.length)\r\n            throw \"invalid index\";\r\n        return fullListings[i];\r\n    }\r\n    return null;\r\n}","import { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { TraitEmote } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { OriginAccelerator, Point, Vector } from \"./Geography\";\r\n\r\nexport interface IPickup{\r\n    key: number, \r\n    point: Point, \r\n    type: TraitEmote,\r\n    velocity: Vector\r\n}\r\n\r\nexport function GenerateEmoteFromBean(bean: IBean, emote: TraitEmote): IPickup {\r\n    return {\r\n        key: 0,\r\n        point: {\r\n            ...(MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator).point\r\n        },\r\n        type: emote,\r\n        velocity: { x: 0, y: 0 }\r\n    };\r\n}","import { IEvent } from \"../events/Events\";\r\nimport { BeanResources, IDifficulty } from \"../Game\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { EmotionSanity, EmotionWorth, GoodToThreshold, JobToGood, TraitEmote, TraitFood, TraitGood, TraitHealth, TraitSanity, TraitStamina } from \"../World\";\r\nimport { GetRandom, GetRandomNumber, GetRandomRoll } from \"../WorldGen\";\r\nimport { IBean, IChatData } from \"./Agent\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { GetFairGoodPrice, IEconomy } from \"./Economy\";\r\nimport { OriginAccelerator } from \"./Geography\";\r\nimport { IGovernment } from \"./Government\";\r\nimport { GenerateEmoteFromBean, IPickup } from \"./Pickup\";\r\nimport { MathClamp } from \"./Utils\";\r\n\r\nconst BabyChance = 0.008;\r\nexport const DaysUntilSleepy = 7;\r\nconst ChatCooldownMS = 4000;\r\n/**\r\n * beans with belief # < this are more likely to be persuaded\r\n * with belief # > this are less likely to be persuaded\r\n */\r\nconst PersuasionBeliefTarget = 2; \r\n\r\nexport const HedonismExtraChance = 0.1;\r\nexport const ParanoidUnhappyChance = 0.05;\r\nexport const HedonismHateWorkChance = 0.15;\r\nexport const DiligenceHappyChance = 0.25;\r\nexport const ParochialHappyChance = 0.25;\r\nexport const CosmopolitanHappyChance = 0.25;\r\nconst ExtrovertChatExtraChance = 0.25;\r\nconst IntrovertChatExtraChance = -.15;\r\nconst AntagonismBullyChance = 0.45;\r\nconst GossipBullyChance = 0.35;\r\nconst EnthusiasmPraiseChance = 0.45;\r\nexport const GermophobiaHospitalWorkChance = 0.25;\r\nconst NatalismExtraBabyChance = 0.04;\r\nconst AntinatalismExtraBabyChance = -0.002;\r\nconst CharismaExtraPersuasionStrength = 2; //d20 based, so 10% extra strength\r\nexport const LibertarianTaxUnhappyChance = 0.1;\r\nexport const ProgressivismTaxHappyChance = 0.1;\r\n\r\nconst MaxGraceTicks = 6;\r\n\r\nexport function BeanMaybePersuaded(bean: IBean, seed: string, belief: TraitBelief, strength: number): boolean{\r\n    if (BeanBelievesIn(bean, 'Dogmatism'))\r\n        return false;\r\n\r\n    if (!bean.beliefs.includes(belief)){\r\n        let defense = 10 + GetRandomNumber(seed, 1, 6);\r\n        defense += bean.beliefs.length - PersuasionBeliefTarget;\r\n        let offense = GetRandomNumber(seed, 1, 20) + strength;\r\n\r\n        return (offense > defense);\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function BeanCalculateHealth(bean: IBean, difficulty: IDifficulty): TraitHealth{\r\n    if (bean.discrete_health >= GoodToThreshold['medicine'].abundant)\r\n        bean.health = 'fresh';\r\n    else if (bean.discrete_health >= GoodToThreshold['medicine'].sufficient)\r\n        bean.health =  'bruised'\r\n    else if (bean.discrete_health >= GoodToThreshold['medicine'].warning)\r\n        bean.health =  'sickly'\r\n    else\r\n        bean.health =  'sick';\r\n\r\n    return bean.health;\r\n}\r\n\r\nexport function BeanCalculateShelter(bean: IBean, difficulty: IDifficulty): TraitStamina{\r\n    if (bean.discrete_stamina < 0)\r\n        bean.stamina = 'homeless';\r\n    else\r\n        bean.stamina = 'rested';\r\n    \r\n    return bean.stamina;\r\n}\r\n\r\nexport function BeanCalculateSanity(bean: IBean, difficulty: IDifficulty): TraitSanity{\r\n    if (bean.discrete_sanity >= 8)\r\n        bean.sanity = 'sane';\r\n    else if (bean.discrete_sanity >= 5)\r\n        bean.sanity =  'stressed'\r\n    else if (bean.discrete_sanity >= 3)\r\n        bean.sanity =  'disturbed'\r\n    else\r\n        bean.sanity =  'psychotic';\r\n    return bean.sanity;\r\n}\r\nexport function BeanCalculateFood(bean: IBean, difficulty: IDifficulty): TraitFood{\r\n    if (bean.discrete_food >= GoodToThreshold['food'].abundant)\r\n    bean.food = 'stuffed';\r\n    else if (bean.discrete_food >= GoodToThreshold['food'].sufficient)\r\n    bean.food = 'sated'\r\n    else if (bean.discrete_food >= GoodToThreshold['food'].warning)\r\n    bean.food = 'hungry'\r\n    else\r\n    bean.food = 'starving';\r\n\r\n    return bean.food;\r\n}\r\n\r\nexport function BeanCalculateBeliefs(bean: IBean, econ: IEconomy, difficulty: IDifficulty, law: IGovernment){\r\n    bean.hedonFiveDayRecord = {\r\n        min: Math.min(bean.hedonFiveDayRecord.min, bean.happiness.flatAverage),\r\n        max: Math.max(bean.hedonFiveDayRecord.max, bean.happiness.flatAverage)  \r\n    };\r\n    if (bean.happiness.flatAverage === 0){\r\n        bean.lastHappiness = 0;\r\n    } else {\r\n        bean.lastHappiness = bean.happiness.flatAverage >= 0 ? (\r\n            bean.happiness.flatAverage / Math.abs(bean.hedonFiveDayRecord.max)) * 100 : (\r\n            bean.happiness.flatAverage / Math.abs(bean.hedonFiveDayRecord.min)) * 100;\r\n    }\r\n    \r\n    BeanCalculateFood(bean, difficulty);\r\n    BeanCalculateHealth(bean, difficulty);\r\n    BeanCalculateSanity(bean, difficulty);\r\n    BeanCalculateShelter(bean, difficulty);\r\n\r\n    if (bean.job === 'jobless'){\r\n        bean.fairGoodPrice = 1;\r\n    } else {\r\n        bean.fairGoodPrice = GetFairGoodPrice(econ, JobToGood(bean.job))\r\n    }\r\n}\r\nexport function BeanMaybeChat(bean: IBean): boolean {\r\n        if (bean.lastChatMS + ChatCooldownMS > Date.now()) \r\n            return false;\r\n        if (bean.action === 'chat')\r\n            return false;\r\n        const roll = Math.random();\r\n        let chance = (bean.community === 'state') ? 0.2 : 0.1;\r\n        if (BeanBelievesIn(bean, 'Extroversion')) \r\n            chance += ExtrovertChatExtraChance;\r\n        if (BeanBelievesIn(bean, 'Introversion')) \r\n            chance += IntrovertChatExtraChance;\r\n        return roll < chance;\r\n}\r\nexport function BeanGetRandomChat(bean: IBean, seed: string, findNeedy: () => IBean|undefined): IChatData{\r\n    const canPreach = bean.beliefs.length;\r\n    if (canPreach){\r\n        if (BeanBelievesIn(bean, 'Charity') && bean.cash >= 2){\r\n            //find a bean with less money than self, poorest in sight\r\n            const needy = findNeedy();\r\n            if (needy) {\r\n                return {\r\n                    participation: 'speaker',\r\n                    type: 'gift',\r\n                    targetBeanKey: needy.key\r\n                }\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Enthusiasm') && Math.random() < EnthusiasmPraiseChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'praise',\r\n                preachBelief: 'Enthusiasm'\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Antagonism') && Math.random() < AntagonismBullyChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'bully',\r\n                preachBelief: 'Antagonism'\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Gossip') && Math.random() < GossipBullyChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'bully',\r\n                preachBelief: 'Gossip'\r\n            }\r\n        }\r\n        return {\r\n            participation: 'speaker',\r\n            type: 'preach',\r\n            preachBelief: GetRandom(seed, bean.beliefs),\r\n            persuasionStrength: 1 + (BeanBelievesIn(bean, 'Charisma') ? CharismaExtraPersuasionStrength : 0)\r\n        }\r\n    } else {\r\n        return {\r\n            participation: 'speaker',\r\n            type: 'praise'\r\n        }\r\n    }\r\n}\r\n\r\nexport function BeanAge(bean: IBean, seed: string, diff: IDifficulty): {death?: IEvent, emotes?: IPickup[]}|undefined {\r\n    if (bean.lifecycle != 'alive') return undefined;\r\n    const emotes: IPickup[] = [];\r\n\r\n    const wasNotHungry = bean.food !== 'starving';\r\n    const wasNotSick = bean.health !== 'sick';\r\n\r\n    bean.discrete_food -= diff.bean_life.degrade_per_tick.food;\r\n    if (bean.discrete_food < 0)\r\n        bean.discrete_health -= diff.bean_life.penalty.starving_health;\r\n\r\n    BeanCalculateFood(bean, diff);\r\n    const starve = BeanMaybeDie(bean, seed, 'starvation', bean.food === 'starving', 0.6);\r\n    if (starve)\r\n        return starve;\r\n    else if (bean.food === 'starving' && wasNotHungry){\r\n        emotes.push(...BeanEmote(bean, 'unhappiness', 'Starving'));\r\n        if (BeanBelievesIn(bean, 'Gluttony')){\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Gluttony'));\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Gluttony'));\r\n        }\r\n    }\r\n        \r\n    bean.discrete_stamina -= diff.bean_life.degrade_per_tick.stamina;\r\n\r\n    BeanCalculateShelter(bean, diff);\r\n    const exposure = BeanMaybeDie(bean, seed, 'exposure', bean.stamina === 'homeless', 0.2);\r\n    if (exposure)\r\n        return exposure;\r\n\r\n    bean.discrete_health -= diff.bean_life.degrade_per_tick.health;\r\n    bean.discrete_health = Math.min(bean.discrete_health, 3);\r\n\r\n    BeanCalculateHealth(bean, diff);\r\n    const sick = BeanMaybeDie(bean, seed, 'sickness', bean.health === 'sick', 0.4);\r\n    if (sick)\r\n        return sick;\r\n    else if (bean.health === 'sick' && wasNotSick){\r\n        emotes.push(...BeanEmote(bean, 'unhappiness', 'Sick'));\r\n        if (BeanBelievesIn(bean, 'Germophobia')){\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Germophobia'));\r\n        }\r\n    }\r\n\r\n    bean.discrete_fun -= diff.bean_life.degrade_per_tick.fun;\r\n    bean.discrete_fun = Math.max(0, bean.discrete_fun);\r\n\r\n    if (!BeanIsInCrisis(bean))\r\n        bean.graceTicks = MathClamp(bean.graceTicks+1, 0, MaxGraceTicks);\r\n    \r\n    if (emotes.length)\r\n        return {\r\n            emotes: emotes\r\n        };\r\n    else \r\n        return undefined;\r\n}\r\n\r\nexport function BeanEmote(bean: IBean, emote: TraitEmote, source: string): IPickup[]{\r\n    bean.discrete_sanity = MathClamp(bean.discrete_sanity + EmotionSanity[emote], 0, 10);\r\n    bean.hedonHistory[0][source] = (bean.hedonHistory[0][source] || 0) + EmotionWorth[emote];\r\n    const out = [\r\n        GenerateEmoteFromBean(bean, emote)\r\n    ];\r\n    if (BeanBelievesIn(bean, 'Hedonism') && (emote === 'happiness' || emote === 'love') && Math.random() < HedonismExtraChance){\r\n        out.push(...BeanEmote(bean, 'happiness', 'Hedonism'));\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function BeanBelievesIn(bean: IBean, trait: TraitBelief): boolean{\r\n    return bean.beliefs.indexOf(trait) !== -1;\r\n}\r\nexport function BeanMaybeBaby(bean: IBean, seed: string, costOfLiving: number): IEvent|undefined{\r\n    if (BeanCanBaby(bean, costOfLiving) &&\r\n        GetRandomRoll(seed, BeanBabyChance(bean))) {\r\n        if (BeanBelievesIn(bean, 'Natalism')){\r\n            BeanEmote(bean, 'love', 'Natalist Parent');\r\n        } else if (BeanBelievesIn(bean, 'Antinatalism')) {\r\n            BeanEmote(bean, 'hate', 'Antinatalism');\r\n        } else {\r\n            BeanEmote(bean, 'happiness', 'Proud Parent');\r\n        }\r\n        return {\r\n            icon: '🎉', trigger: 'birth', message: `${bean.name} has a baby!`,\r\n            key: 0,\r\n        }\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\nexport function BeanMaybeCrime(bean: IBean, good: TraitGood): boolean {\r\n    if (good === 'shelter') return false;\r\n    if (good === 'fun') return false;\r\n    const roll = Math.random();\r\n    let chance = 0.05;\r\n    if (bean.community === 'ego'){\r\n        chance += .1;\r\n    }\r\n    if (BeanIsInCrisis(bean)){\r\n        chance += .1;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Greed')){\r\n        chance += .25;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Anarchism')){\r\n        chance += .33;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Authority')){\r\n        chance += -.25;\r\n    }\r\n    if (good === 'food' && bean.food === 'starving'){\r\n        chance += .25;\r\n    }\r\n    else if (good === 'medicine' && bean.health === 'sick'){\r\n        chance += .25;\r\n    }\r\n    return chance <= roll;\r\n}\r\nexport function BeanMaybeParanoid(bean: IBean) {\r\n    if (BeanBelievesIn(bean, 'Paranoia') && Math.random() < ParanoidUnhappyChance){\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function BeanMaybeScarcity(bean: IBean, good: TraitGood){\r\n    let scarce = false;\r\n    if (good === 'food' && (bean.food === 'starving' || bean.food === 'hungry'))\r\n        scarce = true;\r\n    else if (good === 'shelter' && (bean.stamina === 'homeless' || bean.stamina === 'sleepy'))\r\n        scarce = true;\r\n    else if (good === 'medicine' && (bean.health === 'sick' || bean.health === 'sickly'))\r\n        scarce = true;\r\n    return scarce;\r\n}\r\nexport function BeanCanBaby(bean: IBean, costOfLiving: number): boolean{\r\n    return bean.lifecycle === 'alive' && \r\n        bean.cash > costOfLiving * 3 &&\r\n        !BeanIsInCrisis(bean);\r\n}\r\nexport function BeanBabyChance(bean: IBean): number{\r\n    let base = BabyChance;\r\n    if (BeanBelievesIn(bean, 'Natalism'))\r\n        base += NatalismExtraBabyChance;\r\n    if (BeanBelievesIn(bean, 'Antinatalism'))\r\n        base += AntinatalismExtraBabyChance;\r\n    return base;\r\n}\r\nexport function BeanMaybeDie(bean: IBean, seed: string, cause: string, isDire: boolean, chance: number): {death: IEvent, emotes: IPickup[]}|undefined{\r\n    if (isDire && Math.random() <= chance) {\r\n        if (bean.graceTicks <= 0){\r\n            return BeanDie(bean, seed, cause);\r\n        }\r\n        bean.graceTicks--;\r\n    }\r\n    return undefined;\r\n}\r\nexport function BeanDie(bean: IBean, seed: string, cause: string): {death: IEvent, emotes: IPickup[]}{\r\n    bean.lifecycle = 'dead';\r\n    const pains = GetRandomNumber(seed, 2, 3);\r\n    const emotes = (new Array(pains)).map(\r\n        x => GenerateEmoteFromBean(bean, 'hate')\r\n    );\r\n    return {\r\n        death: {\r\n            icon: '☠️', trigger: 'death', message: `${bean.name} died of ${cause}!`, \r\n            beanKey: bean.key, cityKey: bean.cityKey,\r\n            point: (MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator).point,\r\n            key: 0,\r\n        },\r\n        emotes: emotes\r\n    }\r\n}\r\n\r\nexport function BeanLoseSanity(bean: IBean, amount: number){\r\n    const multiplier = BeanBelievesIn(bean, 'Neuroticism') ? 2 : 1;\r\n    bean.discrete_sanity -= multiplier * amount;\r\n}\r\n\r\nexport function BeanGetSpeech(bean: IBean): string|undefined { \r\n    if (bean.action === 'chat'){\r\n        if (bean.actionData.chat?.participation === 'speaker' && bean.actionData.chat.preachBelief){\r\n            return '💬'+SecondaryBeliefData[bean.actionData.chat.preachBelief].icon;\r\n        }\r\n    }\r\n}\r\n\r\nexport function BeanIsInCrisis(bean: IBean): boolean{\r\n    return bean.food === 'starving' ||\r\n    bean.stamina === 'homeless' ||\r\n    bean.health === 'sick';\r\n}\r\n\r\nexport function BeanCanPurchase(bean: IBean, cost: BeanResources, sanityBonus: number){\r\n    return (cost.sanity === undefined || bean.discrete_sanity >= cost.sanity + sanityBonus);\r\n}\r\n\r\nexport function BeanGetFace(bean: IBean): string{\r\n    if (bean.lifecycle === 'dead')\r\n        return '💀';\r\n    if (bean.actionData.act === 'sleep'){\r\n        return '😴';\r\n    }\r\n    if (bean.actionData.act === 'crime'){\r\n        return '😈';\r\n    }\r\n    if (bean.actionData.act === 'relax'){\r\n        return '😎';\r\n    }\r\n    if (bean.actionData.act === 'chat'){\r\n        if (bean.actionData.chat?.participation === 'speaker'){\r\n            switch(bean.actionData?.chat?.type){\r\n                default: return '😃';\r\n                case 'gift': return '😇';\r\n                case 'praise': return '🥳';\r\n                case 'bully': return '😈';\r\n            }\r\n        }\r\n        return '🤨';\r\n    }\r\n    if (bean.food === 'starving')\r\n        return '😫';\r\n    if (bean.health === 'sick')\r\n        return '🤢';\r\n    if (bean.stamina === 'homeless')\r\n        return '🥶';\r\n    if (bean.job === 'jobless')\r\n        return '😧';\r\n    if (bean.lastHappiness < 0)\r\n        return '☹️';\r\n    if (bean.lastHappiness >= 50)\r\n        return '🙂';\r\n    return '😐';\r\n}\r\n","import { ChangePubSub, IEvent, PubSub } from \"./events/Events\";\r\n\r\nexport class SignalStore {\r\n    alienEnergy = new ChangePubSub();\r\n    alienBots = new ChangePubSub();\r\n    alienHedons = new ChangePubSub();\r\n    newTraitSeen = new PubSub<{k: string, v: boolean}>();\r\n    events = new PubSub<IEvent>();\r\n    autosave = new PubSub<boolean>();\r\n}\r\n\r\nexport const SignalStoreInstance = new SignalStore();","import { LiveList, LiveMap } from \"../events/Events\";\r\nimport { DefaultDifficulty, IDifficulty, PlayerResources } from \"../Game\";\r\nimport { SignalStoreInstance } from \"../SignalStore\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { Number_Starting_City_Pop } from \"../WorldGen\";\r\nimport { IBean } from \"./Agent\";\r\nimport { TraitBelief } from \"./Beliefs\";\r\nimport { IDate } from \"./Time\";\r\n\r\n\r\nexport interface IPlayerData{\r\n    scanned_bean: {[beanKey: number]: boolean};\r\n    abductedBeanKeys: number[];\r\n    seenBeliefs: {[key: string]: boolean};\r\n    speechcrimes: {[year: number]: number};\r\n    next_grade: IDate;\r\n    pastReportCards: IReportCard[];\r\n    energy: IResource;\r\n    bots: IResource;\r\n    hedons: IResource;\r\n    workingReportCard: IReportCard;\r\n    techProgress: TechProgress;\r\n    currentlyResearchingTech: Tech|undefined;\r\n    difficulty: IDifficulty;\r\n    beliefInventory: BeliefInventory[];\r\n    goalProgress: {[key: string]: IGoalProgress};\r\n    goals: GoalKey[]\r\n}\r\n\r\nexport interface IResource{\r\n    amount: number;\r\n    income: number;\r\n}\r\n\r\nexport type GoalKey = 'found_utopia'|'build_house_n_farm'|'beam_3'|'scan'|'set_policy'|'brainwash'|'c+_grade';\r\nexport interface IGoal{\r\n    key: GoalKey;\r\n    text: string;\r\n    tooltip?: string;\r\n    reward?: PlayerResources,\r\n    check: (world: IWorldState) => boolean\r\n}\r\nexport interface IGoalProgress {\r\n    done: boolean,\r\n    step: number\r\n}\r\nexport interface IProgressable{\r\n    goalProgress: {[key: string]: IGoalProgress},\r\n    goals: Array<GoalKey>\r\n}\r\nexport const Goals: {[key in GoalKey]: IGoal} = {\r\n    found_utopia: {\r\n        key: 'found_utopia', text: 'Found your Utopia',\r\n       check: (world) => world.buildings.allIDs.length > 0\r\n    },\r\n    build_house_n_farm: {\r\n        key: 'build_house_n_farm', text: 'Build a house and farm',\r\n        check: (world) => {\r\n            return world.buildings.allIDs.find(k => world.buildings.byID[k].type == 'farm') != null &&\r\n            world.buildings.allIDs.find(k => world.buildings.byID[k].type == 'house') != null;\r\n        },\r\n        reward: {\r\n            energy: 3, bots: 3\r\n        }\r\n    }, \r\n    beam_3: {\r\n        key: 'beam_3', text: 'Beam in 3 new beings', \r\n        check: (world) => {\r\n            return world.beans.allIDs.filter(k => !world.beans.byID[k].bornInPetri).length >= (3 + Number_Starting_City_Pop)\r\n        }\r\n    }, \r\n    scan: {\r\n        key: 'scan', text: 'Scan a Subject',\r\n        check: (world) => Object.keys(world.alien.scanned_bean).length > 0\r\n    }, \r\n    set_policy: {\r\n        key: 'set_policy', text: 'Set a Gov Policy',\r\n        check: (world) => false\r\n    }, \r\n    brainwash: {\r\n        key: 'brainwash', text: 'Brainwash a Subject',\r\n        check: (world) => false\r\n    }, \r\n    'c+_grade': {\r\n        key: 'c+_grade', text: 'Receive a C+ Grade',\r\n        check: (world) => false\r\n    } \r\n};\r\n\r\nexport type Grade = 'F'|'D'|'C'|'B'|'A';\r\nexport type RubricKeys = 'Happiness'|'Prosperity'|'Stability'|'Dogma';\r\nexport type IReportCard = {[key in RubricKeys]: Grade}\r\nexport type GradingFunc = (world: IWorldState) => IReportCard;\r\nexport interface ICurriculum {\r\n    GradeWorld: GradingFunc,\r\n    RubricDescription: {[key in RubricKeys]: string} \r\n}\r\nexport const Curriculums: {[difficulty: string]: ICurriculum} = {\r\n    Default: {\r\n        GradeWorld: (world: IWorldState) => {return{\r\n            Happiness: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.lastHappiness >- .2),\r\n            Prosperity: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.food !== 'hungry'),\r\n            Stability: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.sanity === 'sane'),\r\n            Dogma: GradeUpToNumber((world.alien.speechcrimes[world.date.year] || 0), 10, 10),\r\n        }},\r\n        RubricDescription: {\r\n            Happiness: 'Subjects are at least 20% happy',\r\n            Prosperity: 'Subjects are not hungry',\r\n            Stability: 'Subjects are all sane',\r\n            Dogma: 'Up to 10 Speechcrimes'\r\n        }\r\n    }\r\n}\r\n/**\r\n * \r\n * @param number number of bad events\r\n * @param allowance number of allowed events\r\n * @param maximum range of \"overflow\" events\r\n */\r\nfunction GradeUpToNumber(number: number, allowance: number, maximum: number): Grade{\r\n    const normalized = 1 - Math.min(1, Math.max(0, number - allowance) / maximum);\r\n    return NormalizedScoreToGrade(normalized);\r\n}\r\nfunction BooleanAverageGrader<T>(array: T[], grade: (o: T) => boolean): Grade{\r\n    if (array.length < 1) return 'F';\r\n    return NormalizedScoreToGrade(array.filter(grade).length / array.length);\r\n}\r\nfunction NormalizedScoreToGrade(normNumber: number): Grade{\r\n    if (normNumber < .58) return 'F';\r\n    if (normNumber < .68) return 'D';\r\n    if (normNumber < .78) return 'C';\r\n    if (normNumber < .88) return 'B';\r\n    return 'A';\r\n}\r\nconst GradeWeights: {[key in Grade]: number} ={\r\n    A: 5,\r\n    B: 4,\r\n    C: 3,\r\n    D: 2,\r\n    F: 1\r\n}\r\nexport function GetAverage(reportCard: IReportCard): Grade{\r\n    return NormalizedScoreToGrade((GradeWeights[reportCard.Happiness] + \r\n        GradeWeights[reportCard.Prosperity] + \r\n        GradeWeights[reportCard.Stability] +\r\n        GradeWeights[reportCard.Dogma] \r\n    ) / 20);\r\n}\r\n\r\nexport type Tech = 'sanity_bonus'|'fast_resources'|'trauma_nanobots'|'neural_duplicator';\r\nexport interface ITechInfo{\r\n    tech: Tech,\r\n    /**\r\n     * number of tech points required to complete research\r\n     */\r\n    techPoints: number,\r\n    name: string,\r\n    description: string\r\n}\r\nexport const TechData: {[key in Tech]: ITechInfo} = {\r\n    'sanity_bonus': {\r\n        tech: 'sanity_bonus',\r\n        name: 'Surgical Psychops',\r\n        techPoints: 30,\r\n        description: 'Brainwashing causes -1 🧠 Sanity damage'\r\n    },\r\n    'fast_resources': {\r\n        tech: 'fast_resources',\r\n        name: '0 Dimensional Supersiphons',\r\n        techPoints: 30,\r\n        description: 'Faster ⚡️ and 🤖 accumulation'\r\n    },\r\n    'trauma_nanobots': {\r\n        tech: 'trauma_nanobots',\r\n        name: 'Trauma Nanobots',\r\n        techPoints: 30,\r\n        description: 'Spend 🤖 to stop Subject from dying'\r\n    },\r\n    'neural_duplicator': {\r\n        tech: 'neural_duplicator',\r\n        name: 'Level 2 Neural Duplication',\r\n        techPoints: 30,\r\n        description: 'Copy 🧠 Traits 1 additional time'\r\n    }\r\n}\r\nexport interface IPlayerTechProgress{\r\n    /**\r\n     * number of research points\r\n     */\r\n    researchPoints: number\r\n}\r\nexport type TechProgress = {[key: string]: IPlayerTechProgress};\r\nexport interface BeliefInventory{\r\n    trait: TraitBelief,\r\n    charges: number\r\n}\r\n\r\nexport function PlayerReward(player: IPlayerData, reward: PlayerResources){\r\n    if (reward.bots){\r\n        player.bots.amount += reward.bots;\r\n        SignalStoreInstance.alienBots.publish({change: reward.bots});\r\n    }\r\n    if (reward.energy){\r\n        player.energy.amount += reward.energy;\r\n        SignalStoreInstance.alienEnergy.publish({change: reward.energy});\r\n    }\r\n    if (reward.hedons){\r\n        player.hedons.amount += reward.hedons;\r\n        SignalStoreInstance.alienHedons.publish({change: reward.hedons});\r\n    }\r\n}\r\n\r\nexport function CheckGoals(world: IWorldState, player: IPlayerData){\r\n    for (let i = 0; i < player.goals.length; i++) {\r\n        const goal = player.goals[i];\r\n        if (player.goalProgress[goal] == null){\r\n            player.goalProgress[goal] = {done: false, step: 0};\r\n        }\r\n        if (!player.goalProgress[goal].done) {\r\n            const done = Goals[goal].check(world);\r\n            const reward = Goals[goal].reward;\r\n            player.goalProgress[goal].done = done;\r\n            if (done && reward != null){\r\n                PlayerReward(player, reward);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function CheckReportCard(world: IWorldState, player: IPlayerData) {\r\n    player.workingReportCard = Curriculums.Default.GradeWorld(world);\r\n}\r\nexport function HasResearched(techProgress: TechProgress, tech: Tech){\r\n    return techProgress[tech] != null && techProgress[tech].researchPoints >= TechData[tech].techPoints\r\n}\r\nexport function PlayerCanAfford(player: IPlayerData, cost: PlayerResources, qty: number = 1): boolean{\r\n    return (cost.bots === undefined || player.bots.amount >= cost.bots * qty) &&\r\n    (cost.energy === undefined || player.energy.amount >= cost.energy * qty) && \r\n    (cost.hedons === undefined || player.hedons.amount >= cost.hedons * qty);\r\n}\r\nexport function PlayerUseCharge(alien: IPlayerData, t: TraitBelief){\r\n    const all = alien.beliefInventory;\r\n    const existing = all.find(x => x.trait === t);\r\n    if (existing){\r\n        existing.charges -= 1;\r\n        alien.beliefInventory = [...all.filter(x => x.charges > 0)];\r\n    }\r\n}\r\nexport function PlayerTryPurchase(player: IPlayerData, cost: PlayerResources, qty: number = 1): boolean{\r\n    if (PlayerCanAfford(player, cost, qty)){\r\n        PlayerPurchase(player, cost, qty);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function PlayerPurchase(player: IPlayerData, cost: PlayerResources, qty: number = 1): void{\r\n    if (cost.bots){\r\n        player.bots.amount -= cost.bots * qty;\r\n        SignalStoreInstance.alienBots.publish({change: -cost.bots * qty});\r\n    }\r\n    if (cost.energy){\r\n        player.energy.amount -= cost.energy * qty;\r\n        SignalStoreInstance.alienEnergy.publish({change: -cost.energy * qty});\r\n    }\r\n    if (cost.hedons){\r\n        player.hedons.amount -= cost.hedons * qty;\r\n        SignalStoreInstance.alienHedons.publish({change: -cost.hedons * qty});\r\n    }\r\n}","import { AgentDurationStore } from \"./AgentDuration\";\r\n\r\nexport const AgentDurationStoreInstance = new AgentDurationStore();","\r\nexport type AgentDurationType = 'bean'|'ufo';\r\nexport interface IAgentDuration {elapsed: number, duration: number};\r\ntype AgentDurationCache = {\r\n    [key in AgentDurationType]: {\r\n        [k2: number]: {elapsed: number, duration: number};\r\n    };\r\n};\r\n\r\nexport class AgentDurationStore{\r\n    private cache: AgentDurationCache = {\r\n        'bean': {},\r\n        'ufo': {}\r\n    }\r\n    public Get(type: AgentDurationType, key: number): IAgentDuration{\r\n        if (!this.cache[type][key])\r\n            this.cache[type][key] = {elapsed: 0, duration: 0};\r\n        return this.cache[type][key];\r\n    }\r\n}","import { IWorldState } from \"../state/features/world\";\r\nimport { ICity } from \"./City\";\r\nimport { IEconomy } from \"./Economy\";\r\nimport { BuildingToGood, BuildingTypes, HexPoint, IBuilding, Point } from \"./Geography\";\r\nimport { EnterpriseType, IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\n\r\nconst EnterpriseBuildings: BuildingTypes[] = ['farm', 'hospital', 'house', 'theater'];\r\n\r\nexport function BuildingOpenSlots(b: IBuilding): number[]{\r\n    return [0,1,2,3,4,5].filter((s, i) => {\r\n        return b.jobs[+s] == null && (i < 3 || b.upgraded);\r\n    }).map((x) => +x);\r\n}\r\n\r\nexport function BuildingUsedSlots(b: IBuilding): number[]{\r\n    return [0,1,2,3,4,5].filter((s) => {\r\n        return b.jobs[+s] != null;\r\n    }).map((x) => +x);\r\n}\r\n\r\nexport function BuildingTryFreeBean(b: IBuilding, beanKey: number): boolean{\r\n    const oldLen = b.jobs.length;\r\n    b.jobs = b.jobs.filter(x => x != beanKey);\r\n    return oldLen === b.jobs.length+1;\r\n}\r\nexport function GenerateIBuilding(world: IWorldState, city: ICity, type: BuildingTypes, hex: HexPoint, econ: IEconomy): IBuilding{\r\n    const newBuilding: IBuilding = {\r\n        type: type,\r\n        key: world.buildings.nextID++,\r\n        address: hex,\r\n        jobs: [],\r\n        upgraded: false\r\n    }\r\n    world.buildings.allIDs.push(newBuilding.key);\r\n    world.buildings.byID[newBuilding.key] = newBuilding;\r\n    city.buildingKeys.push(newBuilding.key);\r\n    city.buildingMap[`${hex.q},${hex.r}`] = newBuilding.key;\r\n\r\n    if (EnterpriseBuildings.some(x => type)){\r\n        newBuilding.enterpriseKey = newBuilding.key;\r\n        world.enterprises.allIDs.push(newBuilding.key);\r\n        world.enterprises.byID[newBuilding.key] = {\r\n            cash: 0,\r\n            cityKey: city.key,\r\n            enterpriseType: \"company\",\r\n            key: newBuilding.key,\r\n            ticksSinceLastSale: 0\r\n        }\r\n    }\r\n\r\n    const good = BuildingToGood[type];\r\n    \r\n    if (good != 'fun')\r\n    {\r\n        world.economy.market.listings[good].push({\r\n            price: 1,\r\n            quantity: 3,\r\n            sellerCityKey: city.key,\r\n            sellerEnterpriseKey: newBuilding.key\r\n        });\r\n    }\r\n    return newBuilding;\r\n}","import { IWorldState } from \"../state/features/world\";\r\nimport { TraitJob } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { BuildingToJob, IBuilding, JobToBuilding } from \"./Geography\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\nimport { BuildingOpenSlots } from \"./RealEstate\";\r\nimport { shuffle } from \"./Utils\";\r\n\r\nexport function BeanTryFindJob(world: IWorldState, bean: IBean): boolean{\r\n    const city = world.cities.byID[bean.cityKey];\r\n\r\n    const openSlotBuildings = shuffle(city.buildingKeys.map(\r\n        x => world.buildings.byID[x]\r\n        ).filter(\r\n        x => {\r\n            const canHire = ['farm', 'house', 'theater', 'hospital'].includes(x.type);\r\n            const isHiring = BuildingOpenSlots(x).length > 0;\r\n            return canHire && isHiring;\r\n        }));\r\n    \r\n    \r\n    for (let i = 0; i < openSlotBuildings.length; i++) {\r\n        const building = openSlotBuildings[i];\r\n        const slots = BuildingOpenSlots(building);\r\n        if (slots.length > 0){\r\n            BeanSetJob(bean, building, world.enterprises.byID[building.key]);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function BeanTrySetJob(world: IWorldState, bean: IBean, job: TraitJob): boolean{\r\n    if (job === 'jobless') \r\n        return false;\r\n    const city = world.cities.byID[bean.cityKey];\r\n\r\n    const allOfType = city.buildingKeys.map(x => world.buildings.byID[x]).filter((x) => x.type === JobToBuilding[job]);\r\n    \r\n    for (let i = 0; i < allOfType.length; i++) {\r\n        const building = allOfType[i];\r\n        const slots = BuildingOpenSlots(building);\r\n        if (slots.length > 0){\r\n            BeanSetJob(bean, building, world.enterprises.byID[building.key]);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function BeanSetJob(bean: IBean, building: IBuilding, enterprise: IEnterprise){\r\n    building.jobs.push(bean.key);\r\n    bean.employerEnterpriseKey = building.key;\r\n    if (enterprise && enterprise.ownerBeanKey == null){\r\n        enterprise.ownerBeanKey = bean.key;\r\n    }\r\n    bean.job = BuildingToJob[building.type];\r\n}","import { PubSub } from \"../events/Events\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { Trait, TraitEmote } from \"../World\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IBean } from \"./Agent\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { GetCostOfLiving, IEconomy } from \"./Economy\";\r\nimport { BuildingTypes, HexPoint, IBuilding, Point, Vector } from \"./Geography\";\r\nimport { IPickup } from \"./Pickup\";\r\nimport { BuildingTryFreeBean } from \"./RealEstate\";\r\n\r\n\r\nexport function reportIdeals(beans: IBean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'ego' as Trait, (b) => b.ideals);\r\n}\r\nexport function reportCommunity(beans: IBean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'state' as Trait, (b) => b.community);\r\n}\r\nexport function reportEthno(beans: IBean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'circle' as Trait, (b) => b.ethnicity);\r\n}\r\nexport function _report(beans: IBean[], defWin: Trait, beanPropGet: (bean: IBean) => Trait): {avg: number, winner: Trait}{\r\n    const result = { avg: 0, winner: defWin };\r\n    const all = beans.reduce((stash: any, bean) => {\r\n        const value = beanPropGet(bean);\r\n        if (stash[value] == null) { stash[value] = 1;}\r\n        else { stash[value]++}\r\n        return stash;\r\n    }, {});\r\n    Object.keys(all).forEach((trait) => {\r\n        if (all[trait] > result.avg) {\r\n            result.avg = all[trait];\r\n            result.winner = trait as Trait;\r\n        }\r\n    });\r\n    result.avg /= beans.length;\r\n    return result;\r\n}\r\n\r\nexport class UFO{\r\n    constructor(public key: number, public point: HexPoint, public action: string){}\r\n}\r\nexport class Pickup implements IPickup{\r\n    constructor(public key: number, public point: Point, public type: TraitEmote){}\r\n    public velocity: Vector = {x: 0, y: 0};\r\n    public onMove = new PubSub<Point>();\r\n}\r\n\r\nexport interface ICity{\r\n    key: number,\r\n    name: string,\r\n    petriRadius: number,\r\n    petriOrigin: Point,\r\n    hex_size: Point,\r\n    deadBeanKeys: number[],\r\n    beanKeys: number[],\r\n    ufoKeys: number[],\r\n    buildingKeys: number[],\r\n    pickupMagnetPoint: Point|undefined,\r\n    hexes: HexPoint[],\r\n    buildingMap: {[hexKey: string]: number},\r\n    pickupKeys: number[],\r\n    costOfLiving: number\r\n}\r\n\r\nexport function CalculateCityComputed(city: ICity, economy: IEconomy){\r\n    city.costOfLiving = GetCostOfLiving(economy);\r\n}\r\nexport function BuildingUnsetJob(building: IBuilding, bean: IBean){\r\n    if (bean.job === 'jobless') return;\r\n    if (BuildingTryFreeBean(building, bean.key)){\r\n        bean.employerEnterpriseKey = undefined;\r\n        bean.job = 'jobless';\r\n    }\r\n}\r\nexport function CityGetPopulationTraitsList(scannedBeans: {[beanKey: number]: boolean}, beans: IBean[]): {icon: string, noun: string, count: number}[]{\r\n    return Array.from(\r\n        beans.reduce((m, b) => {\r\n            if (scannedBeans[b.key]){\r\n                b.beliefs.forEach((t) => {\r\n                    const prev = m.get(t) || 0;\r\n                    m.set(t, prev+1);\r\n                });\r\n            } else {\r\n                m.set('Unknown', (m.get('Unknown') || 0) + 1);\r\n            }\r\n            return m;\r\n        }, new Map<TraitBelief|'Unknown', number>()).entries()\r\n    ).sort(([aT, aC], [bT, bC]) => bC - aC).map(([t, c]) => {\r\n        return t === 'Unknown' ? {\r\n            icon: '❔',\r\n            noun: 'Unknown',\r\n            count: c\r\n        } : {\r\n            icon: SecondaryBeliefData[t].icon,\r\n            noun: SecondaryBeliefData[t].noun,\r\n            count: c\r\n        }\r\n    });\r\n}\r\nexport function CityGetRandomBuildingOfType(city: ICity, world: IWorldState, buildingType: BuildingTypes): IBuilding|undefined{\r\n    const keysOfType: number[] = city.buildingKeys.filter(x => world.buildings.byID[x].type === buildingType);\r\n    if (keysOfType.length < 1)\r\n        return undefined;\r\n    const r = GetRandom(world.seed, keysOfType);\r\n    return world.buildings.byID[r]\r\n}\r\nexport function CityGetRandomEntertainmentBuilding(city: ICity, world: IWorldState): IBuilding|undefined{\r\n    const keysOfType: number[] = city.buildingKeys.filter(x => world.buildings.byID[x].type === 'nature' || world.buildings.byID[x].type === 'park' || world.buildings.byID[x].type === 'theater');\r\n    if (keysOfType.length < 1)\r\n        return undefined;\r\n    const r = GetRandom(world.seed, keysOfType);\r\n    return world.buildings.byID[r]\r\n}\r\nexport function CityGetNearestNeighbors(city: ICity, source: IBean): number[]{\r\n    const q = MoverStoreInstance.Get('bean', source.key).current;\r\n    if (!q)\r\n        return [];\r\n    return city.beanKeys.filter((bKey) => {\r\n        if (bKey == source.key) return false;\r\n\r\n        const p = MoverStoreInstance.Get('bean', bKey).current;\r\n        if (!p)\r\n            return false;\r\n        const squared = Math.pow(p.point.x - q.point.x, 2)+Math.pow(p.point.y - q.point.y, 2);\r\n\r\n        return squared < 1600 && squared > 600;\r\n    });\r\n}","import { HexPoint, Point } from \"../simulation/Geography\";\r\n\r\nexport interface IEntitySlice<T extends {key: number}> {\r\n    byID: { [key: number]: T },\r\n    allIDs: number[],\r\n    hxPosition: { [key: number]: HexPoint },\r\n    nextID: number\r\n}\r\n\r\nexport function CreateEmptyEntitySlice<T extends {key: number}>(): IEntitySlice<T>{\r\n    return {\r\n        byID: {},\r\n        allIDs: [],\r\n        hxPosition: {},\r\n        nextID: 0\r\n    }\r\n}\r\nexport function CreateEntitySlice<T extends {key: number}>(all: T[]): IEntitySlice<T>{\r\n    return {\r\n        byID: all.reduce((map, entity) => { map[entity.key] = entity; return map; }, {} as {[key: number]: T}),\r\n        allIDs: all.map(x => x.key),\r\n        hxPosition: {},\r\n        nextID: all.reduce((max, entity) => Math.max(entity.key+1, max), 0)\r\n    }\r\n}\r\nexport function EntityAddToSlice<T extends {key: number}>(slice: IEntitySlice<T>, newEntity: T){\r\n    const k = slice.nextID++;\r\n    newEntity.key = k;\r\n    slice.allIDs.push(k);\r\n    slice.byID[k] = newEntity;\r\n}","export type SFXFile = 'drop.mp3'|'ding_soft.mp3'|'ding_bad.wav'|'death_bell.wav'|'scan.mp3'|'squish_pop.mp3'|'squish_suck.mp3'|'baby_squeak.wav'|'mhmm.mp3'|'cow-moo.wav'|'pill-shake.wav'|'door-open.wav'|'teleport.wav';\r\nexport type SFX = 'drop'|'happiness'|'unhappiness'|'love'|'hate'|'death'|'scan'|'wash_in'|'wash_out'|'squeak'|'mhmm'|'moo'|'door'|'pills'|'teleport';\r\n\r\nconst SFXToFile: {[sfx in SFX]: SFXFile} = {\r\n    drop: \"drop.mp3\",\r\n    love: \"ding_soft.mp3\",\r\n    happiness: \"ding_soft.mp3\",\r\n    unhappiness: \"ding_bad.wav\",\r\n    hate: \"ding_bad.wav\",\r\n    death: \"death_bell.wav\",\r\n    scan: 'scan.mp3',\r\n    wash_in: 'squish_pop.mp3',\r\n    wash_out: 'squish_suck.mp3',\r\n    squeak: 'baby_squeak.wav',\r\n    mhmm: 'mhmm.mp3',\r\n    pills: 'pill-shake.wav',\r\n    moo: 'cow-moo.wav',\r\n    door: 'door-open.wav',\r\n    teleport: 'teleport.wav'\r\n};\r\n\r\ntype SFXMap = {[sfx in SFX]: SoundBuffer};\r\n\r\nclass SoundBuffer{\r\n    constructor(private file: SFXFile, private volume: number = 1){}\r\n\r\n    private buffer: HTMLAudioElement[] = [];\r\n    play(){\r\n        if (this.buffer.length > 0 && this.buffer[0].ended){\r\n            const audio = this.buffer.shift();\r\n            audio?.play();\r\n            if (audio)\r\n                this.buffer.push(audio);\r\n        } else {\r\n            const aud = new Audio(process.env.PUBLIC_URL+'/'+this.file);\r\n            aud.volume = this.volume;\r\n            aud.play();\r\n            this.buffer.push(aud);\r\n        }\r\n    }\r\n}\r\nexport class WorldSound{\r\n    private lib: SFXMap = {\r\n        'drop': new SoundBuffer(SFXToFile['drop'], 0.2),\r\n        'love': new SoundBuffer(SFXToFile['happiness']),\r\n        'happiness': new SoundBuffer(SFXToFile['happiness']),\r\n        'unhappiness': new SoundBuffer(SFXToFile['unhappiness']),\r\n        'hate': new SoundBuffer(SFXToFile['unhappiness']),\r\n        'death': new SoundBuffer(SFXToFile['death']),\r\n        'scan': new SoundBuffer(SFXToFile['scan'], 0.3),\r\n        'wash_in': new SoundBuffer(SFXToFile['wash_in']),\r\n        'wash_out': new SoundBuffer(SFXToFile['wash_out']),\r\n        'squeak': new SoundBuffer(SFXToFile['squeak'], 0.3),\r\n        'mhmm': new SoundBuffer(SFXToFile['mhmm'], 0.5),\r\n        'moo': new SoundBuffer(SFXToFile['moo'], 1),\r\n        'pills': new SoundBuffer(SFXToFile['pills'], 1),\r\n        'door': new SoundBuffer(SFXToFile['door'], 1),\r\n        'teleport': new SoundBuffer(SFXToFile['teleport'], 0.6),\r\n    }\r\n\r\n    public play(sfx: SFX){\r\n        this.lib[sfx].play();\r\n    }\r\n}\r\n\r\nexport const WorldSfxInstance = new WorldSound();","\r\nimport React from \"react\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { IBuilding, BuildingIcon, hex_directions, transformPoint, hex_to_pixel, origin_point, HexPoint, BuildingJobIcon, UpgradedBuildingIcon } from \"../simulation/Geography\";\r\nimport { BuildingJobSlot } from \"../simulation/Occupation\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport './Building.css';\r\n\r\nconst slot_size = {\r\n    x: 25,\r\n    y: 25\r\n}\r\nexport function getSlotOffset(direction: HexPoint){\r\n    return hex_to_pixel(slot_size, origin_point, direction);\r\n}\r\nexport function getRandomSlotOffset(seed: string){\r\n    return getSlotOffset(GetRandom(seed, hex_directions));\r\n}\r\nfunction hexToTransform(direction: HexPoint){\r\n    return transformPoint(getSlotOffset(direction))\r\n}\r\nconst hexDirectionToJobSlot: {[key: number]: number} = {\r\n    2: 0,\r\n    0: 1,\r\n    4: 2,\r\n    1: 3,\r\n    5: 4,\r\n    3: 5,\r\n}\r\n\r\nexport const PetriBuilding: React.FC<{\r\n    city: ICity,\r\n    building: IBuilding\r\n}> = (props) => {\r\n    // const buildingHex = props.building.address;\r\n    // const p = hex_to_pixel(props.city.hex_size, props.city.petriOrigin, buildingHex);\r\n    const sty = {}; //transformPoint(p);\r\n    return <UIBuilding building={props.building} style={sty} cityName={props.city.name} getStyle={hexToTransform}></UIBuilding>;\r\n}\r\n\r\nexport const UIBuilding: React.FC<{\r\n    building: IBuilding,\r\n    cityName: string,\r\n    style: React.CSSProperties,\r\n    getStyle: (h: HexPoint) => React.CSSProperties\r\n}> = (props) => {\r\n    \r\n    return <div key={props.building.type+props.building.key} style={props.style} \r\n    className={\"building \"+props.building.type}>\r\n    {props.building.upgraded ? UpgradedBuildingIcon[props.building.type] : BuildingIcon[props.building.type]}\r\n    <UIBuildingSlots building={props.building} getStyle={props.getStyle}></UIBuildingSlots>\r\n    {props.building.type === 'courthouse' ? <span className=\"tile-label\">{props.cityName}</span> : null}\r\n    </div>\r\n}\r\nexport const UIBuildingSlots: React.FC<{\r\n    building: IBuilding,\r\n    getStyle: (h: HexPoint) => React.CSSProperties\r\n}> = (props) => {\r\n    return <>{hex_directions.map((d, i: number) => {\r\n        const jobSlot: BuildingJobSlot = hexDirectionToJobSlot[i];\r\n        const hasJob = props.building.jobs[jobSlot] != null;\r\n        return <span key={i} className=\"slot\" style={props.getStyle(d)}>\r\n            {hasJob ? BuildingJobIcon[props.building.type] : null}\r\n        </span>\r\n    })}</>\r\n}","export class PriorityNode<T>{\r\n    constructor(public value: T, public priority: number){\r\n        // console.log(priority);\r\n    }\r\n}\r\nexport interface IPriorityQueue<T>{\r\n    enqueue(value: PriorityNode<T>): void;\r\n    values: PriorityNode<T>[];\r\n    dequeue(): PriorityNode<T>|undefined;\r\n}\r\nexport class DumbPriorityQueue<T> implements IPriorityQueue<T>{\r\n    \r\n    public values: PriorityNode<T>[] = [];\r\n\r\n    constructor(_values: PriorityNode<T>[]){\r\n        this.values = _values;\r\n        this.sort();\r\n    }\r\n    \r\n    enqueue(value: PriorityNode<T>): void{\r\n        this.values.push(value);\r\n        this.sort();\r\n    }\r\n\r\n    enqueueMany(values: PriorityNode<T>[]){\r\n        this.values = values;\r\n        this.sort();\r\n    }\r\n    \r\n    private sort(){\r\n        this.values.sort((a, b) => b.priority - a.priority);\r\n    }\r\n    \r\n    dequeue(): PriorityNode<T>|undefined{\r\n        return this.values.shift();\r\n    }\r\n}\r\n\r\nexport class PriorityQueue<T> implements IPriorityQueue<T>{\r\n    public values: PriorityNode<T>[] = [];\r\n\r\n    constructor(_values: PriorityNode<T>[]){this.values = _values;}\r\n\r\n    //helper method that swaps the values and two indexes of an array\r\n    swap(index1: number, index2: number){\r\n        let temp = this.values[index1];\r\n        this.values[index1] = this.values[index2];\r\n        this.values[index2] = temp;\r\n        return this.values;\r\n    }\r\n    //helper methods that bubbles up values from end\r\n    bubbleUp(){\r\n        //get index of inserted element\r\n        let index = this.values.length - 1\r\n        //loop while index is not 0 or element no loger needs to bubble\r\n        while(index > 0){\r\n            //get parent index via formula\r\n            let parentIndex = Math.floor((index - 1)/2);\r\n            //if values is greater than parent, swap the two\r\n            if(this.values[parentIndex].priority > this.values[index].priority){\r\n                //swap with helper method\r\n                this.swap(index, parentIndex);\r\n                //change current index to parent index\r\n                index = parentIndex;\r\n            } else{\r\n                break;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    // method that pushes new value onto the end and calls the bubble helper\r\n    enqueue(value: PriorityNode<T>){\r\n        this.values.push(value)\r\n        //calculate parent, if parent is greater swap\r\n        //while loop or recurse\r\n        this.bubbleUp();\r\n        return this.values\r\n    }\r\n\r\n    bubbleDown(){\r\n        let parentIndex = 0;\r\n        const length = this.values.length;\r\n        const elementPriority = this.values[0].priority;\r\n        //loop breaks if no swaps are needed\r\n        while (true){\r\n            //get indexes of child elements by following formula\r\n            const leftChildIndex = (2 * parentIndex) + 1;\r\n            const rightChildIndex = (2 * parentIndex) + 2;\r\n            let leftChildPriority = 999;\r\n            let rightChildPriority;\r\n            let indexToSwap = null;\r\n            // if left child exists, and is greater than the element, plan to swap with the left child index\r\n            if(leftChildIndex < length){\r\n                leftChildPriority = this.values[leftChildIndex].priority\r\n                if(leftChildPriority < elementPriority){\r\n                    indexToSwap = leftChildIndex;\r\n                }\r\n            }\r\n            //if right child exists\r\n            if(rightChildIndex < length){\r\n                rightChildPriority = this.values[rightChildIndex].priority;\r\n\r\n                if(\r\n                    //if right child is greater than element and there are no plans to swap\r\n                    (rightChildPriority < elementPriority && indexToSwap === null) ||\r\n                    //OR if right child is greater than left child and there ARE plans to swap\r\n                    (rightChildPriority < leftChildPriority && indexToSwap !== null))\r\n                {\r\n                    //plan to swap with the right child\r\n                    indexToSwap = rightChildIndex\r\n                }\r\n            }\r\n            //if there are no plans to swap, break out of the loop\r\n            if(indexToSwap === null){\r\n                break;\r\n            } \r\n            //swap with planned element\r\n            this.swap(parentIndex, indexToSwap);\r\n            //starting index is now index that we swapped with\r\n            parentIndex = indexToSwap;\r\n        }  \r\n    }\r\n\r\n    dequeue(): PriorityNode<T>|undefined{\r\n        //swap first and last element\r\n        this.swap(0, this.values.length - 1);\r\n        //pop max value off of values\r\n        let poppedNode = this.values.pop();\r\n        //re-adjust heap if length is greater than 1\r\n        if(this.values.length > 1){\r\n            this.bubbleDown();\r\n        }\r\n        \r\n        return poppedNode;\r\n    }\r\n}","import { AnyAction } from \"@reduxjs/toolkit\";\r\nimport { IDifficulty } from \"../Game\";\r\nimport { MoverStoreInstance as MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { getRandomSlotOffset } from \"../petri-ui/Building\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { beanBePersuaded, beanBuy, beanCrime, beanEmote, beanHitDestination, beanRelax, beanWork, changeState } from \"../state/features/world.reducer\";\r\nimport { BeanPhysics, GoodIcon, JobToGood, TraitCommunity, TraitEmote, TraitEthno, TraitFaith, TraitFood, TraitGood, TraitHealth, TraitIdeals, TraitJob, TraitSanity, TraitStamina } from \"../World\";\r\nimport { BeanBelievesIn, BeanEmote, BeanGetRandomChat, BeanMaybeChat, BeanMaybeCrime, BeanMaybeParanoid, BeanMaybePersuaded, BeanMaybeScarcity } from \"./Bean\";\r\nimport { HedonExtremes, HedonReport, HedonSourceToVal, TraitBelief } from \"./Beliefs\";\r\nimport { CityGetNearestNeighbors, CityGetRandomBuildingOfType, CityGetRandomEntertainmentBuilding, ICity } from \"./City\";\r\nimport { EconomyCanBuy, IMarketReceipt, ISeller } from \"./Economy\";\r\nimport { accelerate_towards, BuildingTypes, GoodToBuilding, hex_linedraw, hex_to_pixel, IAccelerator, IBuilding, JobToBuilding, OriginAccelerator, pixel_to_hex, Point } from \"./Geography\";\r\nimport { DumbPriorityQueue, IPriorityQueue, PriorityNode } from \"./Priorities\";\r\nimport { IDate } from \"./Time\";\r\nimport { SampleNormalDistribution, StatsNormalDev, StatsNormalMean } from \"./Utils\";\r\n\r\nexport type Act = 'travel'|'work'|'sleep'|'chat'|'soapbox'|'craze'|'idle'|'buy'|'crime'|'relax';\r\n\r\n/**\r\n * cruise == interruptible travel towards destination\r\n * \r\n * approach == uninterruptible travel into destination slot\r\n */\r\nexport type Travel = 'cruise'|'approach';\r\n\r\nexport interface IActivityData {\r\n    act: Act;\r\n    elapsed?: number;\r\n    // location?: Point, //FROM Point\r\n    destinations?: Point[]; //point to travel to??\r\n    destinationIndex?: number; //which point are we heading towards\r\n    intent?: IActivityData; //when travelling, what do you intend to do next\r\n    good?: TraitGood; //good to buy or work\r\n    crimeGood?: 'food'|'medicine';\r\n    // travel?: Travel;\r\n    chat?: IChatData;\r\n    buyAttempts?: number;\r\n    buyReceipt?: IMarketReceipt\r\n}\r\n\r\nexport interface IChatData{\r\n    participation: 'speaker'|'listener';\r\n    type: 'praise'|'bully'|'preach'|'gift';\r\n    preachBelief?: TraitBelief;\r\n    /**\r\n     * strength of the preacher's persuasion\r\n     */\r\n    persuasionStrength?: number;\r\n    /**\r\n     * target key of the bean who is targeted for praise or bully\r\n     */\r\n    targetBeanKey?: number;\r\n}\r\n\r\nexport interface IBeanAgent{\r\n    key: number;\r\n    action: Act;\r\n    actionData: IActivityData;\r\n}\r\nexport interface StateFunctions {\r\n    enter: (agent: IBean) => AnyAction|undefined;\r\n    act: (agent: IBean, world: IWorldState, elapsed: number, deltaMS: number) => {action?: AnyAction|AnyAction[], newActivity?: IActivityData};\r\n    exit: (agent: IBean, seed: string) => AnyAction|undefined;\r\n}\r\nconst RelaxationDurationMS = 1000;\r\nconst CrimeDurationMS = 1500;\r\nconst TransactMaximumDurationMS = 1100;\r\nconst ChatDurationMS = 1000;\r\nconst WorkDurationMS = 3000;\r\nconst SleepDurationMS = 3000;\r\n\r\nexport const BeanActions: {[act in Act]: StateFunctions} = {\r\n    'travel': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number, deltaMS: number) => {\r\n            const city = world.cities.byID[agent.cityKey];\r\n            const destinationTargetIndex = agent.actionData.destinationIndex || 0;\r\n            if (agent.actionData.destinations == null || \r\n                agent.actionData.destinations.length === 0 || \r\n                destinationTargetIndex >= agent.actionData.destinations.length){\r\n                if (agent.actionData.intent)\r\n                    return {\r\n                        newActivity: agent.actionData.intent\r\n                    }\r\n                else\r\n                    return {\r\n                        newActivity: {\r\n                            act: 'idle'\r\n                        }\r\n                    }\r\n            }\r\n            const target = agent.actionData.destinations[destinationTargetIndex];\r\n\r\n            if (isNaN(target.x) || isNaN(target.y)) {\r\n                //sanity check\r\n                console.warn('NaN destination, resetting to idle')\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                };\r\n            }\r\n            const newAccelerator = {\r\n                ...(MoverStoreInstance.Get('bean', agent.key).current || OriginAccelerator)\r\n            };\r\n\r\n            const collide = accelerate_towards(\r\n                newAccelerator,\r\n                target,\r\n                BeanPhysics.AccelerateS * deltaMS/1000, \r\n                BeanPhysics.MaxSpeed, \r\n                BeanPhysics.CollisionDistance,\r\n                BeanPhysics.Brake);\r\n\r\n            MoverStoreInstance.Get('bean', agent.key).publish(newAccelerator);\r\n            \r\n            if (collide){\r\n                return {\r\n                    action: beanHitDestination({beanKey: agent.key})\r\n                };\r\n            }\r\n            \r\n            if (city) {\r\n                const nearbyBeanKeys = CityGetNearestNeighbors(city, agent);\r\n                if (nearbyBeanKeys.length && BeanMaybeChat(agent)){\r\n                    const targets = nearbyBeanKeys.filter((bKey) => BeanMaybeChat(world.beans.byID[bKey]));\r\n                    if (targets.length < 1)\r\n                        return {};\r\n                    const chat: IChatData = BeanGetRandomChat(agent, world.seed, () => {\r\n                        return targets.map(\r\n                                x => world.beans.byID[x]\r\n                            ).filter(\r\n                                x => x.cash <= agent.cash-1\r\n                            ).reduce(\r\n                                (least: IBean|undefined, bean) => {\r\n                                    if (least == null || (bean.cash < least.cash))\r\n                                        return bean;\r\n                                    return least;\r\n                        }, undefined);\r\n                    });\r\n                    return {\r\n                        newActivity: {\r\n                            act: 'chat',\r\n                            chat: chat,\r\n                            intent: agent.actionData \r\n                        },\r\n                        action: targets.map(t => changeState({beanKey: t, newState: {\r\n                            act: 'chat',\r\n                            chat: {\r\n                                ...chat,\r\n                                participation: 'listener'\r\n                            },\r\n                            intent: world.beans.byID[t].actionData\r\n                        }}))\r\n                    };\r\n                } else if (BeanBelievesIn(agent, 'Wanderlust') && Math.random() < WanderlustEmoteChance) {\r\n                    return {\r\n                        action: beanEmote({beanKey: agent.key, emote: 'happiness', source: 'Wanderlust'})\r\n                    };\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n            // if (agent instanceof Bean){\r\n            //     agent.velocity = {x: 0, y: 0};\r\n            // }\r\n        },\r\n    }, \r\n    'work': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (elapsed > WorkDurationMS && agent.actionData.good){\r\n                return {\r\n                    action: beanWork({beanKey: agent.key}),\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'sleep':{\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world, elapsed) => {\r\n            if (elapsed > SleepDurationMS){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'chat': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, state, elapsed: number) => {\r\n            if (elapsed > ChatDurationMS && agent.actionData.intent){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'travel',\r\n                        intent: agent.actionData.intent\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean, seed: string) => {\r\n            if (agent.actionData.chat){\r\n                if (agent.actionData.chat.participation === 'listener'){\r\n                    switch(agent.actionData.chat.type){\r\n                        case 'bully':\r\n                            return beanEmote({beanKey: agent.key, emote: 'unhappiness', source: 'Antagonism'});\r\n                        case 'praise':\r\n                            return beanEmote({beanKey: agent.key, emote: 'happiness', source: 'Enthusiasm'});\r\n                        case 'preach':\r\n                            if (agent.actionData.chat.preachBelief && \r\n                                agent.actionData.chat.persuasionStrength && \r\n                                BeanMaybePersuaded(agent, seed, agent.actionData.chat.preachBelief, agent.actionData.chat.persuasionStrength)){\r\n                                return beanBePersuaded({beanKey: agent.key, belief: agent.actionData.chat.preachBelief})\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        },\r\n    }, \r\n    'soapbox': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean) => {\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'craze': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean) => {\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'idle': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (elapsed < 200)\r\n                return {};\r\n            \r\n            const priorities = GetPriorities(agent, world.seed, world.cities.byID[agent.cityKey], world.alien.difficulty);\r\n            let top = priorities.dequeue();\r\n            let travelState: IActivityData|undefined = undefined;\r\n            let sideEffect: AnyAction|undefined = undefined;\r\n\r\n            //loop through possible destinations\r\n            while (top && travelState == null){\r\n                const substitute = SubstituteIntent(agent, world, top.value);\r\n                if (substitute?.intent){\r\n                    travelState = CreateTravelFromIntent(agent, world.cities.byID[agent.cityKey], substitute.intent, world);\r\n                    if (travelState != null)\r\n                        return {\r\n                            newActivity: travelState,\r\n                            action: sideEffect\r\n                        };\r\n                } else if (substitute?.sideEffect){\r\n                    sideEffect = substitute.sideEffect;\r\n                }\r\n                top = priorities.dequeue();\r\n            }\r\n            return {\r\n                action: sideEffect\r\n            };\r\n        },\r\n        exit: (agent: IBean) => {\r\n            if (BeanMaybeParanoid(agent))\r\n                return beanEmote({beanKey: agent.key, emote: 'unhappiness', source:'Paranoia'});\r\n        },\r\n    }, \r\n    'buy': {\r\n        // static MaximumBuyDuration = 1100;\r\n        // private sinceLastAttemptMS: number = 0;\r\n        // tryBuy(agent: IAgent){\r\n        //     if (agent instanceof Bean && agent.actionData.good && agent.city?.economy)\r\n        //     {\r\n        //         this._bought = agent.buy[agent.actionData.good](agent.city.economy);\r\n        //     }\r\n        //     this.sinceLastAttemptMS = 0;\r\n        // }\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (agent.actionData.buyReceipt){\r\n                return {\r\n                    newActivity: {\r\n                        act: agent.actionData.good === 'shelter' ? 'sleep' : 'idle'\r\n                    }\r\n                }\r\n            }\r\n            if (elapsed > TransactMaximumDurationMS){\r\n                return {\r\n                    newActivity: {act:'idle'}\r\n                }\r\n            }\r\n            if ((agent.actionData.buyAttempts || 0) >= 3){\r\n                return {\r\n                    newActivity: {act:'idle'}\r\n                }\r\n            }\r\n            if (elapsed > 250 && agent.actionData.good){\r\n                return {\r\n                    action: beanBuy({beanKey: agent.key, good: agent.actionData.good})\r\n                };\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'crime': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed) => {\r\n            if (elapsed > CrimeDurationMS){\r\n                return {\r\n                    newActivity: {act: 'idle'},\r\n                    action: beanCrime({beanKey: agent.key, good: agent.actionData.crimeGood || 'food'})\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'relax': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            let durationMS = RelaxationDurationMS;\r\n            if (BeanBelievesIn(agent, 'Naturalism'))\r\n                durationMS *= 3;\r\n            if (elapsed > durationMS){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return beanRelax({beanKey: agent.key});\r\n        },\r\n    }\r\n}\r\n\r\nfunction SubstituteIntent(bean: IBean, world: IWorldState, intent: IActivityData): {\r\n    intent?: IActivityData,\r\n    sideEffect?: AnyAction\r\n}|undefined{\r\n    if (intent.act === 'buy' && intent.good != null){\r\n        const desiredGoodState = EconomyCanBuy(world.economy, world.law, bean, intent.good);\r\n        if (desiredGoodState != 'yes' && intent.good === 'fun') //if you can't buy happiness, go somewhere to relax\r\n            intent.act = 'relax'; //relaxing is free!\r\n        else if (desiredGoodState === 'pricedout') {\r\n            if ((intent.good == 'food' || intent.good == 'medicine') && BeanMaybeCrime(bean, intent.good)){\r\n                intent.act = 'crime';\r\n                intent.crimeGood = intent.good;\r\n            } else {\r\n                const isPhysical = intent.good === 'food' || intent.good === 'medicine' || intent.good === 'shelter';\r\n                if (isPhysical){\r\n                    return {\r\n                        sideEffect: beanEmote({beanKey: bean.key, emote: 'unhappiness', source: 'Poverty'})\r\n                    }\r\n                }\r\n                return undefined; //don't travel to buy something that you can't afford\r\n            }\r\n        } else if (desiredGoodState === 'nosupply'){\r\n            if (intent.good && BeanMaybeScarcity(bean, intent.good)){\r\n                return {\r\n                    sideEffect: beanEmote({beanKey: bean.key, emote: 'unhappiness', source:'Scarcity'}) \r\n                }\r\n            }\r\n            return undefined; //don't travel to buy something that doesn't exist\r\n        }\r\n        intent.buyAttempts = 0;\r\n    }\r\n    return {\r\n        intent: intent\r\n    };\r\n}\r\n\r\nexport function IntentToDestination(agent: IBean, city: ICity, intent: IActivityData, world: IWorldState): Point[]|null{\r\n    switch(intent.act){\r\n        case 'buy':\r\n            if (intent.good)\r\n                return RouteRandom(city, world, agent, GoodToBuilding[intent.good]);\r\n        case 'work':\r\n            return RouteRandom(city, world, agent, JobToBuilding[agent.job]);\r\n        case 'relax': {\r\n            const buildingDest = CityGetRandomEntertainmentBuilding(city, world);\r\n            if (buildingDest){\r\n                return Route(world.seed, city, agent, buildingDest);\r\n            }\r\n        }\r\n    }\r\n    return [];\r\n}\r\n\r\nfunction CreateTravelFromIntent(agent: IBean, city: ICity, intent: IActivityData, world: IWorldState): IActivityData|undefined{\r\n    const destination = IntentToDestination(agent, city, intent, world);\r\n    \r\n    if (destination)\r\n        return {\r\n            act: 'travel',\r\n            destinations: destination,\r\n            destinationIndex: 0,\r\n            intent: intent\r\n        }\r\n    else\r\n        return undefined;\r\n}\r\n\r\nconst WanderlustEmoteChance = 0.002;\r\n\r\n/**\r\n * returns a priority. Higher is more important\r\n */\r\nexport const GetPriority = {\r\n    work: function(bean: IBean, seed: string, city: ICity): number{\r\n        if (bean.job == 'jobless'){\r\n            return 0;\r\n        }\r\n        else if (bean.cash === 0){\r\n            return SampleNormalDistribution(seed, StatsNormalMean + (StatsNormalDev * 2));\r\n        }\r\n        else if (city){\r\n            return SampleNormalDistribution(seed, StatsNormalMean + \r\n                (StatsNormalDev * Math.min(1, city.costOfLiving / bean.cash))\r\n            );\r\n        }\r\n        return SampleNormalDistribution(seed);\r\n    },\r\n    food: function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * 6 * Math.min(1, difficulty.bean_life.vital_thresh.food.warning / bean.discrete_food)\r\n        ));\r\n    },\r\n    medicine:function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * 2 * Math.min(1, difficulty.bean_life.vital_thresh.medicine.warning / bean.discrete_health)\r\n        ));\r\n    },\r\n    stamina: function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * 4 * Math.min(1, difficulty.bean_life.vital_thresh.shelter.warning / bean.discrete_stamina)\r\n        ));\r\n    },\r\n    fun:function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * Math.min(1, -bean.lastHappiness / 100)\r\n        ));\r\n    }\r\n}\r\n\r\nexport function GetPriorities(bean: IBean, seed: string, city: ICity, difficulty: IDifficulty): IPriorityQueue<IActivityData>{\r\n    const queue = new DumbPriorityQueue<IActivityData>([\r\n        new PriorityNode<IActivityData>({act: 'work', good: JobToGood(bean.job)} as IActivityData, GetPriority.work(bean, seed, city)),\r\n        new PriorityNode<IActivityData>({act: 'buy', good: 'shelter'} as IActivityData, GetPriority.stamina(bean, seed, difficulty)),\r\n        new PriorityNode<IActivityData>({act: 'buy', good: 'food'} as IActivityData, GetPriority.food(bean, seed, difficulty)),\r\n        new PriorityNode<IActivityData>({act: 'buy', good: 'medicine'} as IActivityData, GetPriority.medicine(bean, seed, difficulty)),\r\n        new PriorityNode<IActivityData>({act: 'buy', good: 'fun'} as IActivityData, GetPriority.fun(bean, seed, difficulty)),\r\n    ]);\r\n    return queue;\r\n}\r\n\r\nexport function ActivityIcon(data: IActivityData): string{\r\n    switch(data.act){\r\n        case 'sleep':\r\n            return '😴';\r\n        case 'work':\r\n            if (data.good)\r\n                return '💪 '+ GoodIcon[data.good];\r\n            else\r\n                return '💪';\r\n        case 'buy':\r\n            if (data.good)\r\n                return '💸 '+ GoodIcon[data.good];\r\n            else\r\n                return '💸';\r\n    }\r\n    return '';\r\n}\r\nexport function ActivityDisplay(data: IActivityData): string{    \r\n    switch(data.act){\r\n        case 'chat':\r\n            return `chatting`;\r\n        case 'crime':\r\n            return `commiting crime`;\r\n        case 'sleep':\r\n            return `sleeping 😴`;\r\n        case 'relax':\r\n            return `relaxing`;\r\n        case 'travel':\r\n            return `travelling to ` + data.intent?.act || '';\r\n        case 'work':\r\n            if (data.good)\r\n                return 'working to make '+ GoodIcon[data.good];\r\n            else\r\n                return 'working';\r\n        case 'buy':\r\n            if (data.good)\r\n                return 'buying '+ GoodIcon[data.good];\r\n            else\r\n                return 'buying';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * a bean is a citizen with preferences\r\n */\r\nexport interface IBean extends ISeller, IBeanAgent{    \r\n    key: number;\r\n    cityKey: number;\r\n    name: string;\r\n    community: TraitCommunity;\r\n    ideals: TraitIdeals;\r\n    ethnicity: TraitEthno;\r\n    faith: TraitFaith;\r\n    stamina: TraitStamina;\r\n    health: TraitHealth;\r\n    food: TraitFood;\r\n    discrete_food: number;\r\n    discrete_health: number;\r\n    discrete_sanity: number;\r\n    discrete_stamina: number;\r\n    discrete_fun: number;\r\n    graceTicks: number;\r\n    cash: number;\r\n    dob: IDate;\r\n    sanity: TraitSanity;\r\n    beliefs: TraitBelief[];\r\n    lifecycle: 'alive'|'dead'|'abducted',\r\n    hedonHistory: HedonSourceToVal[],\r\n    job: TraitJob,\r\n    happiness: HedonReport,\r\n    lastHappiness: number,\r\n    hedonFiveDayRecord: HedonExtremes,\r\n    fairGoodPrice: number,\r\n    employerEnterpriseKey?: number,\r\n    activity_duration: {[act in Act]: number},\r\n    bornInPetri: boolean,\r\n    ticksSinceLastRelax: number,\r\n    lastChatMS: number,\r\n    lastPoint?: Point\r\n}\r\n\r\n/**\r\n * fills out \"markers\" and \"destinationKey\" with random building of type\r\n * @param city \r\n * @param bean \r\n * @param buildingType \r\n */\r\nexport function RouteRandom(city: ICity, world: IWorldState, bean: IBean, buildingType: BuildingTypes): Point[]|null{\r\n    const destination: IBuilding|undefined = CityGetRandomBuildingOfType(city, world, buildingType);\r\n    if (destination === undefined) \r\n        return null;\r\n    return Route(world.seed, city, bean, destination);\r\n}\r\n\r\n/**\r\n * fills out \"markers\" property with points to walk to destination\r\n * @param city \r\n * @param bean \r\n * @param buildingType \r\n */\r\nexport function Route(seed: string, city: ICity, bean: IBean, destination: IBuilding): Point[]{\r\n    const start = MoverStoreInstance.Get('bean', bean.key).current || {...OriginAccelerator};\r\n    const nearestHex = pixel_to_hex(city.hex_size, city.petriOrigin, start.point);\r\n    return hex_linedraw(nearestHex, destination.address).map(\r\n        (h) => hex_to_pixel(city.hex_size, city.petriOrigin, h)\r\n        ).map((x, i, a) => {\r\n        if (i === a.length-1){\r\n            const offset = getRandomSlotOffset(seed);\r\n            return {\r\n                x: x.x + offset.x,\r\n                y: x.y + offset.y\r\n            }\r\n        } else {\r\n            return x;\r\n        }\r\n    });\r\n}","import { PlayerResources } from \"../Game\";\r\nimport { GetRandom, GetRandomNumber } from \"../WorldGen\";\r\nimport { BeliefCommonality, RandomBeliefBucket, SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\n\r\nexport interface MarketTraitListing {\r\n    cost: PlayerResources;\r\n    trait: TraitBelief;\r\n}\r\nexport const CommonalityBaseCost: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 5,\r\n    'rare': 7\r\n};\r\nexport const CommonalityRandomMaxCost: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 5,\r\n    'rare': 7\r\n};\r\n\r\nexport function GetMarketTraits(seed: string): MarketTraitListing[]{\r\n    const newTraits: MarketTraitListing[] = [];\r\n    for (let i = 0; i < 3; i++) {\r\n        const b = GetRandom(seed, RandomBeliefBucket);\r\n        newTraits.push(getMarketTraitListing(seed, b));\r\n    }\r\n    return newTraits;\r\n}\r\n\r\nfunction getMarketTraitListing(seed: string, b: TraitBelief): MarketTraitListing{\r\n    const rare = SecondaryBeliefData[b].rarity;\r\n    return {\r\n        trait: b,\r\n        cost: {\r\n            hedons: CommonalityBaseCost[rare] + GetRandomNumber(seed, 0, CommonalityRandomMaxCost[rare])\r\n        }\r\n    }\r\n}","import { IWorldState } from \"../state/features/world\";\r\n\r\nexport enum Season {Spring, Summer, Fall, Winter}\r\nexport const TicksPerHour = 2;\r\nexport const TicksPerDay = TicksPerHour * 4;\r\nexport enum PartOfDay {Midnight = 0, Morning = TicksPerHour, Noon = TicksPerHour*2, Evening = TicksPerHour*3}\r\n\r\nexport interface IDate{\r\n    day: number;\r\n    season: Season;\r\n    year: number;\r\n    /**\r\n     * analogous to ticks\r\n     * \r\n     * zero based, ranges from 0 to `HoursPerDay -1`\r\n     */\r\n    hour: number;\r\n}\r\n\r\nexport function Now(world: IWorldState): IDate{\r\n    return {year: world.date.year, season: world.date.season, day: world.date.day, hour: world.date.hour};\r\n}\r\n\r\nexport function withinLastYear(current: IDate, last: IDate): boolean{\r\n    return last.year > -1 && (\r\n        last.year == current.year || (\r\n            last.year == current.year - 1 &&\r\n            last.season > current.season\r\n        )\r\n    )\r\n}","import { AnyAction } from \"redux\";\r\nimport { IEvent } from \"../events/Events\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { SignalStoreInstance } from \"../SignalStore\";\r\nimport { EntityAddToSlice } from \"../state/entity.state\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { changeState, pickUpPickup, remove_ufo, selectBeansByCity } from \"../state/features/world.reducer\";\r\nimport { MaxHedonHistory, PickupPhysics, WorldInflate } from \"../World\";\r\nimport { GenerateBean } from \"../WorldGen\";\r\nimport { WorldSfxInstance } from \"../WorldSound\";\r\nimport { BeanActions, IBean } from \"./Agent\";\r\nimport { AgentDurationStoreInstance } from \"./AgentDurationInstance\";\r\nimport { BeanAge, BeanMaybeBaby, BeanCalculateBeliefs, BeanEmote } from \"./Bean\";\r\nimport { BeanTryFindJob } from \"./BeanAndCity\";\r\nimport { GetHedonReport } from \"./Beliefs\";\r\nimport { CalculateCityComputed } from \"./City\";\r\nimport { GetCostOfLiving } from \"./Economy\";\r\nimport { accelerate_towards, accelerator_coast, OriginAccelerator } from \"./Geography\";\r\nimport { IsLaw, MaybeRebate, PollTaxWeeklyAmount } from \"./Government\";\r\nimport { GetMarketTraits } from \"./MarketTraits\";\r\nimport { GenerateEmoteFromBean } from \"./Pickup\";\r\nimport { CheckGoals, CheckReportCard, HasResearched, TechData } from \"./Player\";\r\nimport { TicksPerDay } from \"./Time\";\r\n\r\nconst OwnerProfitPercentage = 0.25;\r\n\r\nexport function simulate_world(world: IWorldState){\r\n    world.date.hour++\r\n    if (world.date.hour >= TicksPerDay){\r\n        world.date.hour = 0;\r\n        world.date.day++;\r\n        simulate_every_day(world);\r\n        if (world.date.day % 7 === 0){\r\n            simulate_every_week(world);\r\n        }\r\n    }\r\n    if (world.date.day > 30){\r\n        world.date.day = 1;\r\n        simulate_every_month(world)\r\n        world.date.season++;\r\n    }\r\n    if (world.date.season > 3){\r\n        world.date.year++;\r\n        simulate_every_year(world);\r\n        world.date.season = 0;\r\n    }\r\n\r\n    world.alien.bots.amount += world.alien.bots.income;\r\n    world.alien.energy.amount += world.alien.energy.income;\r\n    if (HasResearched(world.alien.techProgress, 'fast_resources')){\r\n        world.alien.bots.amount += world.alien.bots.income*0.5;\r\n        world.alien.energy.amount += world.alien.energy.income*0.5;\r\n    }\r\n    if (world.alien.currentlyResearchingTech){\r\n        const tech = world.alien.currentlyResearchingTech;\r\n        if(world.alien.techProgress[tech] == null){\r\n            world.alien.techProgress[tech] = {\r\n                researchPoints: 0\r\n            }\r\n        }\r\n        const max = TechData[tech].techPoints;\r\n        const current = world.alien.techProgress[tech].researchPoints;\r\n        if (current < max)\r\n            world.alien.techProgress[tech].researchPoints += world.alien.abductedBeanKeys.length;\r\n        if (current >= max){\r\n            if (world.alien.currentlyResearchingTech === 'neural_duplicator')\r\n                world.alien.beliefInventory.forEach((x) => x.charges += 1);\r\n            world.alien.currentlyResearchingTech = undefined;\r\n\r\n        }\r\n    }\r\n\r\n    const CoL = GetCostOfLiving(world.economy);\r\n    world.beans.allIDs.forEach((bKey: number, i: number) => {\r\n        const b = world.beans.byID[bKey];\r\n        if (b.lifecycle != 'alive')\r\n            return;\r\n        \r\n        const ageResult = BeanAge(b, world.seed, world.alien.difficulty);\r\n        if (ageResult?.emotes){\r\n            ageResult.emotes.map(x => EntityAddToSlice(world.pickups, x));\r\n        }\r\n        if (ageResult?.death){\r\n            EntityAddToSlice(world.events, ageResult.death);\r\n        }\r\n        // todo: on bean death\r\n        const e = BeanMaybeBaby(b, world.seed, CoL);\r\n        if (e) {\r\n            const newBean = GenerateBean(world, world.cities.byID[b.cityKey], b);\r\n            if (b.lastPoint){\r\n                newBean.lastPoint = b.lastPoint;\r\n                MoverStoreInstance.Get('bean', newBean.key).publish({point: {x: b.lastPoint.x, y: b.lastPoint.y}, velocity: {x: 0, y: 0}});\r\n            }\r\n            world.beans.byID[newBean.key] = newBean;\r\n            world.beans.allIDs.push(newBean.key);\r\n            world.cities.byID[b.cityKey].beanKeys.push(newBean.key);\r\n            WorldAddEvent(world, e);\r\n            WorldSfxInstance.play('squeak');\r\n        }\r\n        if (b.job === 'jobless'){\r\n            const gotJob = BeanTryFindJob(world, b);\r\n            if (!gotJob){\r\n                WorldAddEvent(world, {icon: '🏚️', trigger: 'nojobslots', message: `A subject cannot find a job; build or upgrade more buildings.`, key: 0});\r\n            }\r\n        }\r\n        \r\n        b.happiness = GetHedonReport(b.hedonHistory);\r\n    });\r\n    world.cities.allIDs.forEach(cityID => {\r\n        const c = world.cities.byID[cityID];\r\n        CalculateCityComputed(c, world.economy);\r\n    });\r\n    world.beans.allIDs.forEach((k: number) => {\r\n        const b = world.beans.byID[k];\r\n        if (!b || b.lifecycle != 'alive')\r\n            return;\r\n        BeanCalculateBeliefs(b, world.economy, world.alien.difficulty, world.law);\r\n    });\r\n    CheckGoals(world, world.alien);\r\n    CheckReportCard(world, world.alien);\r\n    return world;\r\n}\r\nexport function simulate_every_year(world: IWorldState){\r\n    WorldInflate(world);\r\n}\r\nexport function simulate_every_month(world: IWorldState){\r\n    //resetMonthlyDemand\r\n    world.economy.unfulfilledMonthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n    world.economy.monthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n    world.economy.monthlySupply = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n}\r\nexport function simulate_every_week(world: IWorldState){\r\n    world.marketTraitsForSale = GetMarketTraits(world.seed);\r\n    WorldAddEvent(world, {key: 0, message: 'New traits in the Emotion Market!', icon: '🛍️', trigger: 'marketrefresh'});\r\n    if (IsLaw(world.law, 'poll_tax')){\r\n        let collected = 0;\r\n        world.cities.allIDs.forEach((cityID: number) => {\r\n            selectBeansByCity(world, cityID).forEach((y: IBean) => {\r\n                if (y.cash >= PollTaxWeeklyAmount){\r\n                    y.cash -= PollTaxWeeklyAmount;\r\n                    collected += PollTaxWeeklyAmount;\r\n                }\r\n            });\r\n        });\r\n        world.law.cash = (world.law.cash + collected);\r\n    }\r\n    MaybeRebate(world.law, Object.values(world.beans.byID));\r\n}\r\nexport function simulate_every_day(world: IWorldState){\r\n    world.beans.allIDs.forEach((beanKey) => {\r\n        const x = world.beans.byID[beanKey];\r\n        if (x.hedonHistory.length >= MaxHedonHistory) {\r\n            x.hedonHistory.pop();\r\n        }\r\n        x.hedonHistory.unshift({});\r\n    });\r\n    //pay beans\r\n    world.enterprises.allIDs.forEach((eKey) => {\r\n        const enterprise = world.enterprises.byID[eKey];\r\n        const building = world.buildings.byID[eKey];\r\n        const workers = building.jobs.map(x => world.beans.byID[x]);\r\n        //distribute cash\r\n        switch(enterprise.enterpriseType){\r\n            case 'company':\r\n                if (workers.length < 1) {\r\n                    //noop;\r\n                } else if (workers.length === 1){\r\n                    workers[0].cash += enterprise.cash;\r\n                    if (enterprise.cash > 0)\r\n                        workers[0].ticksSinceLastSale = 0;\r\n                    enterprise.cash = 0;\r\n                }\r\n                else {\r\n                    const share = enterprise.cash / (workers.length + OwnerProfitPercentage);\r\n                    enterprise.cash = 0;\r\n                    let owner = workers.find(x => x.key === enterprise.ownerBeanKey);\r\n                    if (owner == null){\r\n                        owner = workers[0];\r\n                        enterprise.ownerBeanKey = owner.key;\r\n                    }\r\n                    workers.forEach(bean => {\r\n                        const pay = (bean === owner) ? share * (1+OwnerProfitPercentage) : share;\r\n                        bean.cash += pay;\r\n                        if (pay > 0)\r\n                            bean.ticksSinceLastSale = 0;\r\n                    });\r\n                }\r\n                break;\r\n            case 'co-op':\r\n                const share = enterprise.cash / workers.length;\r\n                enterprise.cash = 0;\r\n                workers.forEach(bean => {\r\n                    bean.cash += share;\r\n                    if (share > 0)\r\n                        bean.ticksSinceLastSale = 0;\r\n                });\r\n                break;\r\n            case 'commune':\r\n                const commShare = enterprise.cash / workers.length;\r\n                enterprise.cash = 0;\r\n                workers.forEach(bean => {\r\n                    bean.cash += commShare;\r\n                    if (commShare > 0)\r\n                        bean.ticksSinceLastSale = 0;\r\n                });\r\n                break;\r\n        }\r\n    })\r\n}\r\nexport function WorldAddEvent(world: IWorldState, e: IEvent){\r\n    e.key = world.events.nextID++;\r\n    world.events.byID[e.key] = e;\r\n    world.events.allIDs.push(e.key);\r\n    SignalStoreInstance.events.publish(e);\r\n}\r\nexport function animate_ufos(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const actions: AnyAction[] = [];\r\n    world.ufos.allIDs.forEach((ufoKey) => {\r\n        const ufo = world.ufos.byID[ufoKey];\r\n        AgentDurationStoreInstance.Get('ufo', ufoKey).elapsed += deltaMS;\r\n\r\n        if (AgentDurationStoreInstance.Get('ufo', ufoKey).elapsed > 4000)\r\n        {\r\n            actions.push(remove_ufo({ufoKey}))\r\n        }\r\n    });\r\n    return actions;\r\n}\r\nexport function animate_beans(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const actions: AnyAction[] = [];\r\n    world.beans.allIDs.forEach((beanKey) => {\r\n        const bean = world.beans.byID[beanKey];\r\n\r\n        if (bean.lifecycle != 'alive')\r\n            return;\r\n        \r\n        const ADS = AgentDurationStoreInstance.Get('bean', bean.key); \r\n        ADS.elapsed += deltaMS;\r\n        const actResult = BeanActions[bean.action].act(bean, world, ADS.elapsed, deltaMS);\r\n        if (Array.isArray(actResult.action)){\r\n            actions.push(...actResult.action);\r\n        } else if (actResult.action){\r\n            actions.push(actResult.action);\r\n        }\r\n        if (actResult.newActivity){\r\n            const exitAction = BeanActions[bean.action].exit(bean, world.seed);\r\n            if (exitAction)\r\n                actions.push(exitAction);\r\n            actions.push(changeState({beanKey: beanKey, newState: actResult.newActivity}));\r\n            const enterAction = BeanActions[actResult.newActivity.act].enter(bean);\r\n            if (enterAction)\r\n                actions.push(enterAction);\r\n        }\r\n        //TODO: fix on chat\r\n        // if (result.data.act === 'chat' && result.data.chat?.participation === 'speaker'){\r\n        //     listener.onChat(agent as Bean, result.data.chat);\r\n        // }\r\n    });\r\n    return actions;\r\n}\r\nexport function animate_pickups(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const pickupIDs = world.pickups.allIDs;\r\n    const city = world.cities.byID[0];\r\n    const actions: AnyAction[] = [];\r\n    //go backwards because we'll modify the array as we go\r\n    for(let i = pickupIDs.length - 1; i >= 0; i--) {\r\n        const pickupID = pickupIDs[i];\r\n        let collide = false;\r\n        const magnet = city.pickupMagnetPoint;\r\n        const newAccelerator = {\r\n            ...(MoverStoreInstance.Get('pickup', pickupID).current || OriginAccelerator)\r\n        };\r\n        if (magnet){\r\n            const collide = accelerate_towards(\r\n                newAccelerator,\r\n                magnet,\r\n                PickupPhysics.AccelerateS * deltaMS/1000, \r\n                PickupPhysics.MaxSpeed, \r\n                PickupPhysics.CollisionDistance,\r\n                PickupPhysics.Brake);\r\n            if (collide){\r\n                actions.push(pickUpPickup({cityKey: city.key, pickupKey: pickupID}));\r\n            }\r\n        } else {\r\n            accelerator_coast(newAccelerator, PickupPhysics.Brake);\r\n        }\r\n        if (!collide)\r\n            MoverStoreInstance.Get('pickup', pickupID).publish(newAccelerator);\r\n    }\r\n    return actions;\r\n}","import { BeliefCommonality } from \"./simulation/Beliefs\";\r\nimport { BuildingTypes } from \"./simulation/Geography\";\r\nimport { RubricKeys } from \"./simulation/Player\";\r\nimport { TicksPerDay } from \"./simulation/Time\";\r\nimport { IThreshold, TraitGood } from \"./World\";\r\n\r\nexport type PlayerEmptyHexAction = 'build';\r\nexport type PlayerHexAction = 'beam'|'upgrade';\r\nexport type PlayerBeanAction = 'scan'|'abduct'|'vaporize'|'siphon'|'empower'|'gift';\r\nexport type PlayerBeanBrainAction = 'brainwash_ideal'|'brainimplant_secondary'|'brainwash_secondary';\r\nexport type PlayerMarketAction = 'energy'|'bots';\r\nexport type PlayerGovernmentAction = '';\r\nexport type PlayerAction = PlayerHexAction|PlayerBeanAction;\r\n\r\nexport interface PlayerResources{\r\n    energy?: number;\r\n    bots?: number;\r\n    hedons?: number;\r\n    tortrons?: number;\r\n}\r\nexport interface BeanResources{\r\n    sanity?: number;\r\n}\r\nexport type BeanDeathCause = 'vaporization'|'exposure'|'starvation'|'sickness';\r\nexport function triadToString(cost: PlayerResources, sign: '+'|''|'-', qty: number = 1){\r\n    const costs = [];\r\n    if (cost.energy){\r\n        costs.push(sign+(cost.energy*qty)+' Energy');\r\n    }\r\n    if (cost.bots){\r\n        costs.push(sign+(cost.bots*qty)+' Bots');\r\n    }\r\n    if (cost.hedons){\r\n        costs.push(sign+(cost.hedons*qty)+' Hedons');\r\n    }\r\n    if (cost.tortrons){\r\n        costs.push(sign+(cost.tortrons*qty)+' Antihedons');\r\n    }\r\n    return costs.join(' ');\r\n}\r\nexport interface SecondaryResources{\r\n    research?: number;\r\n    leadership?: number;\r\n}\r\nexport interface IDifficulty{\r\n    cost: {\r\n        emptyHex: {[key in PlayerEmptyHexAction]: {\r\n            [key in BuildingTypes]: PlayerResources}\r\n        },\r\n        hex: {[key in PlayerHexAction]: PlayerResources} \r\n        bean: {[key in PlayerBeanAction]: PlayerResources},\r\n        bean_brain: {[key in PlayerBeanBrainAction]: BeanResources}\r\n        market: {\r\n            scrubHedons: PlayerResources,\r\n            resource: {[key in PlayerMarketAction]: PlayerResources},\r\n            beliefs: {[key in BeliefCommonality]: PlayerResources}\r\n        }\r\n    },\r\n    bean_life: {\r\n        vital_thresh: {[key in TraitGood]: IThreshold},\r\n        degrade_per_tick: {\r\n            food: number,\r\n            health: number,\r\n            stamina: number,\r\n            fun: number\r\n        },\r\n        penalty: {\r\n            homeless_health: number,\r\n            starving_health: number\r\n        },\r\n        death_chance: {\r\n            [cause in BeanDeathCause]: number\r\n        }\r\n    },\r\n    report_card_progression: RubricKeys[]\r\n}\r\nexport const DefaultDifficulty: IDifficulty = {\r\n    cost: {\r\n        emptyHex: {\r\n            build: {\r\n                house: {\r\n                    energy: 1,\r\n                    bots: 3\r\n                },\r\n                farm: {\r\n                    energy: 1,\r\n                    bots: 3\r\n                },\r\n                theater: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                hospital: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                church: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                courthouse: {\r\n                    energy: 999,\r\n                    bots: 999\r\n                },\r\n                park: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                nature: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                }\r\n            }\r\n        },\r\n        hex: {\r\n            beam: {\r\n                energy: 3\r\n            },\r\n            upgrade: {\r\n                energy: 1,\r\n                bots: 4,\r\n            }\r\n        },\r\n        bean_brain: {\r\n            brainwash_ideal: { sanity: 4},\r\n            brainimplant_secondary: { sanity: 1},\r\n            brainwash_secondary: {sanity: 2},\r\n        },\r\n        bean: {\r\n            scan: {\r\n                energy: 1\r\n            },\r\n            abduct: {\r\n                bots: 3\r\n            },\r\n            gift: {},\r\n            empower: {},\r\n            vaporize: {\r\n                energy: 2,\r\n                bots: 4\r\n            },\r\n            siphon: {},\r\n        },\r\n        market: {\r\n            scrubHedons: {\r\n                energy: 5\r\n            },\r\n            resource: {\r\n                bots: {\r\n                    hedons: 6\r\n                },\r\n                energy: {\r\n                    hedons: 5\r\n                }\r\n            },\r\n            beliefs: {\r\n                common: {},\r\n                uncommon: {},\r\n                rare: {}\r\n            },\r\n        }\r\n    },\r\n    bean_life: {\r\n        vital_thresh: {\r\n            'food': {warning: 0.6, sufficient: 1, abundant: 3},\r\n            'shelter': {warning: 0.6, sufficient: 1, abundant: 7},\r\n            'medicine': {warning: 0.6, sufficient: 1, abundant: 3},\r\n            'fun': {warning: 0.1, sufficient: 1, abundant: 3},\r\n        },\r\n        degrade_per_tick: {\r\n            food: 1/(TicksPerDay*3),\r\n            health: 1/(TicksPerDay*5),\r\n            stamina: 1,\r\n            fun: 1/(TicksPerDay*5)\r\n        },\r\n        penalty: {\r\n            homeless_health: 1/(TicksPerDay*7),\r\n            starving_health: 1/(TicksPerDay*7)\r\n        },\r\n        death_chance: {\r\n            starvation: 1/8,\r\n            sickness: 1/8,\r\n            exposure: 1/8,\r\n            vaporization: 1\r\n        }\r\n    },\r\n    report_card_progression: []\r\n};","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { PlayerResources } from '../../Game'\r\nimport { MoverStoreInstance } from '../../MoverStoreSingleton'\r\nimport { SignalStoreInstance } from '../../SignalStore'\r\nimport { Act, IActivityData, IBean } from '../../simulation/Agent'\r\nimport { AgentDurationStoreInstance } from '../../simulation/AgentDurationInstance'\r\nimport { BeanBelievesIn, BeanCanPurchase, BeanDie, BeanLoseSanity, CosmopolitanHappyChance, DiligenceHappyChance, GermophobiaHospitalWorkChance, HedonismExtraChance, HedonismHateWorkChance, LibertarianTaxUnhappyChance, ParochialHappyChance, ProgressivismTaxHappyChance } from '../../simulation/Bean'\r\nimport { BeanTrySetJob } from '../../simulation/BeanAndCity'\r\nimport { BeliefsAll, SecondaryBeliefData, TraitBelief } from '../../simulation/Beliefs'\r\nimport { BuildingUnsetJob } from '../../simulation/City'\r\nimport { EconomyEmployAndPrice, EconomyMostInDemandJob, EconomyProduceAndPrice, EconomyTryTransact, IListing, IMarketReceipt, MarketListingSubtract } from '../../simulation/Economy'\r\nimport { BuildingTypes, HexPoint, hex_to_pixel, IBuilding, OriginAccelerator, Point } from '../../simulation/Geography'\r\nimport { LawData, LawKey } from '../../simulation/Government'\r\nimport { EnterpriseType } from '../../simulation/Institutions'\r\nimport { MarketTraitListing } from '../../simulation/MarketTraits'\r\nimport { IPickup } from '../../simulation/Pickup'\r\nimport { HasResearched, PlayerCanAfford, PlayerPurchase, PlayerTryPurchase, PlayerUseCharge, Tech } from '../../simulation/Player'\r\nimport { BuildingTryFreeBean, GenerateIBuilding } from '../../simulation/RealEstate'\r\nimport { GetSeedName } from '../../simulation/SeedGen'\r\nimport { IUFO } from '../../simulation/Ufo'\r\nimport { MathClamp } from '../../simulation/Utils'\r\nimport { simulate_world, WorldAddEvent } from '../../simulation/WorldSim'\r\nimport { EmotionSanity, EmotionWorth, GoodToThreshold, JobToGood, TraitEmote, TraitFaith, TraitGood } from '../../World'\r\nimport { GenerateBean, GetRandom, GetRandomCityName, GetRandomFloat, GetRandomNumber } from '../../WorldGen'\r\nimport { WorldSfxInstance } from '../../WorldSound'\r\nimport { EntityAddToSlice } from '../entity.state'\r\nimport { GetBlankWorldState, IWorldState } from './world'\r\n\r\nconst ChargePerMarket = 3;\r\nconst ChargePerWash = 2;\r\n\r\nconst UnderemploymentThresholdTicks = 8\r\nexport const worldSlice = createSlice({\r\n    name: 'world',\r\n    initialState: GetBlankWorldState(),\r\n    reducers: {\r\n      refreshMarket: state => {\r\n          \r\n      },\r\n      magnetChange: (state, action: PayloadAction<{cityKey: number, px?: Point}>) => {\r\n        state.cities.byID[action.payload.cityKey].pickupMagnetPoint = action.payload.px;\r\n      },\r\n      worldTick: state => {\r\n        simulate_world(state);\r\n      },\r\n      newGame: (state, action: PayloadAction<{seed: string}>) => {\r\n        const city = state.cities.byID[0];\r\n        state.seed = action.payload.seed;\r\n        city.name = GetRandomCityName(state.seed);\r\n        GenerateIBuilding(state, city, 'courthouse', {q: 0, r: 0}, state.economy);\r\n        GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(state.seed, 15, 20)], state.economy);\r\n        GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(state.seed, 21, 25)], state.economy);\r\n        GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(state.seed, 26, 60)], state.economy);\r\n      },\r\n      loadGame: (state, action:PayloadAction<{newState: IWorldState}>) => {\r\n        action.payload.newState.beans.allIDs.map(k => {\r\n          const bean = action.payload.newState.beans.byID[k];\r\n          if (bean){\r\n            MoverStoreInstance.Get('bean', k).publish({\r\n              point: {\r\n                x: bean.lastPoint?.x || 0,\r\n                y: bean.lastPoint?.y || 0\r\n              }, velocity: {x: 0, y: 0}\r\n            })\r\n          }\r\n        })\r\n        return action.payload.newState\r\n      },\r\n      build: (state, action: PayloadAction<{city: number, where: HexPoint, what: BuildingTypes}>) => {\r\n        const cost: PlayerResources = state.alien.difficulty.cost.emptyHex.build[action.payload.what];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          GenerateIBuilding(state, state.cities.byID[action.payload.city], action.payload.what, action.payload.where, state.economy);\r\n          switch(action.payload.what){\r\n            case 'farm':\r\n              WorldSfxInstance.play('moo');\r\n              break;\r\n            case 'hospital':\r\n              WorldSfxInstance.play('pills');\r\n              break;\r\n            case 'house':\r\n              WorldSfxInstance.play('door');\r\n              break;\r\n          }\r\n        }\r\n      },\r\n      changeEnterprise: (state, action: PayloadAction<{enterpriseKey: number, newType: EnterpriseType}>) => {\r\n        state.enterprises.byID[action.payload.enterpriseKey].enterpriseType = action.payload.newType;\r\n      },\r\n      fireBean: (state, action: PayloadAction<{cityKey: number, beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.employerEnterpriseKey){\r\n          const building = state.buildings.byID[bean.employerEnterpriseKey];\r\n          const enterprise = state.enterprises.byID[bean.employerEnterpriseKey];\r\n          if (enterprise.ownerBeanKey == bean.key){\r\n            enterprise.ownerBeanKey = building.jobs.find(x => x != bean.key);\r\n          }\r\n          BuildingUnsetJob(building, bean);\r\n        }\r\n      },\r\n      upgrade: (state, action: PayloadAction<{buildingKey: number}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.upgrade;\r\n        const what = state.buildings.byID[action.payload.buildingKey];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          what.upgraded = true;\r\n        }\r\n      },\r\n      beam: (state, action: PayloadAction<{cityKey: number, where: HexPoint}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.beam;\r\n        if (PlayerCanAfford(state.alien, cost)) {\r\n          PlayerPurchase(state.alien, cost);\r\n          const ufo: IUFO = {\r\n            key: state.ufos.nextID++,\r\n            action: 'beam-in',\r\n            duration: 0,\r\n            point: {...action.payload.where},\r\n            cityKey: action.payload.cityKey\r\n          };\r\n          state.ufos.allIDs.push(ufo.key);\r\n          state.ufos.byID[ufo.key] = ufo;\r\n          state.cities.byID[action.payload.cityKey].ufoKeys.push(ufo.key);\r\n        }\r\n      },\r\n      remove_ufo: (state, action: PayloadAction<{ufoKey: number}>) => {\r\n        const ufo = state.ufos.byID[action.payload.ufoKey];\r\n        const newBean = GenerateBean(state, state.cities.byID[0], undefined, ufo.point);\r\n        delete state.ufos.byID[action.payload.ufoKey];\r\n        state.ufos.allIDs = state.ufos.allIDs.filter(x => x != action.payload.ufoKey);\r\n        state.cities.byID[ufo.cityKey].ufoKeys = state.cities.byID[ufo.cityKey].ufoKeys.filter(x => x != action.payload.ufoKey);\r\n        \r\n        state.beans.byID[newBean.key] = newBean;\r\n        state.beans.allIDs.push(newBean.key);\r\n        state.cities.byID[ufo.cityKey].beanKeys.push(newBean.key);\r\n        MoverStoreInstance.Get('bean', newBean.key).current = {\r\n          point: hex_to_pixel(state.cities.byID[ufo.cityKey].hex_size, state.cities.byID[ufo.cityKey].petriOrigin, ufo.point), \r\n          velocity: {x: 0, y: 0}\r\n        };\r\n      },\r\n      abduct: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.abduct)) {\r\n          const bean = state.beans.byID[action.payload.beanKey];\r\n          if (bean.lifecycle === 'alive'){\r\n            bean.lifecycle = 'abducted';\r\n            if (bean.employerEnterpriseKey){\r\n              const building = state.buildings.byID[bean.employerEnterpriseKey];\r\n              BuildingUnsetJob(building, bean);\r\n            }\r\n            state.cities.byID[bean.cityKey].beanKeys = state.cities.byID[bean.cityKey].beanKeys.filter(x => x != bean.key);\r\n            state.alien.abductedBeanKeys.push(bean.key);\r\n          }\r\n        }\r\n      },\r\n      cheatAdd: (state) => {\r\n        state.alien.energy.amount += 10;\r\n        state.alien.bots.amount += 10;\r\n        state.alien.hedons.amount += 10;\r\n      },\r\n      release: (state) => {\r\n        if (state.alien.abductedBeanKeys.length > 0) {\r\n          const lucky_bean_key = state.alien.abductedBeanKeys.shift();\r\n          if (lucky_bean_key != null){\r\n            const luckyBean = state.beans.byID[lucky_bean_key];\r\n            luckyBean.lifecycle = 'alive';\r\n            state.cities.byID[luckyBean.cityKey].beanKeys.push(lucky_bean_key);\r\n          }\r\n        }\r\n\r\n      },\r\n      washCommunity: (state, action: PayloadAction<{beanKey: number, faith: TraitFaith}>) => {\r\n        // if (bean.canPurchase(state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n        //   bean.loseSanity(state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n        //   if (bean.community === 'ego')\r\n        //     bean.community = 'state';\r\n        //   else bean.community = 'ego';\r\n        //   return true;\r\n        // }\r\n      },\r\n      washMotive: () => {\r\n\r\n        // if (bean.canPurchase(state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n        //   bean.loseSanity(state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n        //   if (bean.ideals === 'prog')\r\n        //     bean.ideals = 'trad';\r\n        //   else bean.ideals = 'prog';\r\n        //   this.setState({ world: state });\r\n        //   return true;\r\n        // }\r\n      },\r\n      washNarrative: (state, action: PayloadAction<{beanKey: number, faith: TraitFaith}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n          const oldFaith = bean.faith;\r\n          while (bean.faith === oldFaith)\r\n            bean.faith = GetRandom(state.seed, ['rocket', 'dragon', 'music', 'noFaith']);\r\n        }\r\n      },\r\n      washBelief: (state, action: PayloadAction<{beanKey: number, trait: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const sanityCostBonus = HasResearched(state.alien.techProgress, 'sanity_bonus') ? -1 : 0;\r\n      if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary, sanityCostBonus)) {\r\n        BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary.sanity || 0);\r\n        bean.beliefs.splice(\r\n          bean.beliefs.indexOf(action.payload.trait), 1\r\n        );\r\n        const existing = state.alien.beliefInventory.find((x) => x.trait === action.payload.trait);\r\n        const chargeBonus = HasResearched(state.alien.techProgress, 'neural_duplicator') ? 1 : 0;\r\n        if (existing) {\r\n          existing.charges += ChargePerWash + chargeBonus;\r\n        } else\r\n          state.alien.beliefInventory.push({trait: action.payload.trait, charges: ChargePerWash + chargeBonus});\r\n        WorldSfxInstance.play('wash_out');\r\n      }\r\n      },\r\n      setResearch: (state, action: PayloadAction<{t: Tech}>) => {\r\n        state.alien.currentlyResearchingTech = action.payload.t;\r\n      },\r\n      implant: (state, action: PayloadAction<{beanKey: number, trait: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const sanityCostBonus = HasResearched(state.alien.techProgress, 'sanity_bonus') ? -1 : 0;\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainimplant_secondary, sanityCostBonus) && \r\n          state.alien.beliefInventory.filter(x => x.trait == action.payload.trait && x.charges > 0)) {\r\n          bean.beliefs.push(action.payload.trait);\r\n          PlayerUseCharge(state.alien, action.payload.trait);\r\n          WorldSfxInstance.play('wash_in');\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainimplant_secondary.sanity || 0); \r\n        }\r\n      },\r\n      scan: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.scan)) {\r\n          state.alien.scanned_bean[bean.key] = true;\r\n          bean.beliefs.forEach((b) => {\r\n            if (!state.alien.seenBeliefs[b]){\r\n              state.alien.seenBeliefs[b] = true;\r\n              SignalStoreInstance.newTraitSeen.publish({k: SecondaryBeliefData[b].noun, v: true});\r\n            }\r\n          });\r\n          WorldSfxInstance.play('scan');\r\n        }\r\n      },\r\n      vaporize: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.vaporize)) {\r\n          const d = BeanDie(state.beans.byID[action.payload.beanKey], state.seed, 'vaporization');\r\n          EntityAddToSlice(state.events, d.death);\r\n          d.emotes.map(e => EntityAddToSlice(state.pickups, e));\r\n        }\r\n      },\r\n      pickUpPickup: (state, action: PayloadAction<{cityKey: number, pickupKey: number}>) => {\r\n        const pickup = state.pickups.byID[action.payload.pickupKey];\r\n\r\n        const amt = EmotionWorth[pickup.type];\r\n        state.alien.hedons.amount += amt;\r\n        state.cities.byID[action.payload.cityKey].pickupKeys = state.cities.byID[action.payload.cityKey].pickupKeys.filter(x => x != action.payload.pickupKey);\r\n        state.pickups.allIDs = state.pickups.allIDs.filter(x => x != action.payload.pickupKey);\r\n        delete state.pickups.byID[action.payload.pickupKey];\r\n        \r\n        SignalStoreInstance.alienHedons.publish({change: amt});\r\n        WorldSfxInstance.play(pickup.type);\r\n      },\r\n      changeState: (state, action: PayloadAction<{beanKey: number, newState: IActivityData}>) => {\r\n        const oldAct = state.beans.byID[action.payload.beanKey].action;\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const ADS = AgentDurationStoreInstance.Get('bean', bean.key);\r\n        if (oldAct === 'chat')\r\n          bean.lastChatMS = Date.now();\r\n        bean.activity_duration[oldAct] += ADS.elapsed;\r\n        bean.action = action.payload.newState.act;\r\n        bean.actionData = action.payload.newState;\r\n        const p = MoverStoreInstance.Get('bean', bean.key).current?.point;\r\n        if (p) {\r\n          bean.lastPoint = {\r\n            ...p\r\n          };\r\n        }\r\n        ADS.elapsed = 0;\r\n      },\r\n      beanHitDestination: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.actionData.destinationIndex != null){\r\n          bean.actionData.destinationIndex++;\r\n        }\r\n      },\r\n      beanBePersuaded: (state, action: PayloadAction<{beanKey: number, belief: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        bean.beliefs.push(action.payload.belief);\r\n        WorldAddEvent(state, {\r\n            key: 0,\r\n            icon: '🗣️', \r\n            trigger: 'persuasion', \r\n            message: `${bean.name} now believes in ${SecondaryBeliefData[action.payload.belief].icon} ${SecondaryBeliefData[action.payload.belief].noun}!`, \r\n            beanKey: bean.key, cityKey: bean.cityKey,\r\n            point: bean.lastPoint\r\n        });\r\n        WorldSfxInstance.play('mhmm')\r\n      },\r\n      beanGiveCharity: (state, action: PayloadAction<{senderBeanKey: number, needyBeanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.senderBeanKey];\r\n        bean.cash -= 0.5;\r\n        _emote(bean, state, {emote: 'happiness', source: 'Charity'});\r\n        const needy = state.beans.byID[action.payload.needyBeanKey];\r\n        needy.cash += 0.5;\r\n        _emote(needy, state, {emote: 'happiness', source: 'Charity'});\r\n      },\r\n      beanWork: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.job === 'jobless'){\r\n        } else {\r\n            switch(bean.job){\r\n                case 'farmer':\r\n                    bean.discrete_food = Math.min(bean.discrete_food+1, GoodToThreshold.food.sufficient*2);\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Parochialism', 'happiness', ParochialHappyChance);\r\n                    break;\r\n                case 'doc':\r\n                    bean.discrete_health = Math.min(bean.discrete_health+1, GoodToThreshold.medicine.sufficient*2);\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Germophobia', 'unhappiness', GermophobiaHospitalWorkChance);\r\n                    break;\r\n                case 'builder': \r\n                    bean.stamina = 'awake';\r\n                    bean.discrete_stamina = 7;\r\n                    break;\r\n                case 'entertainer':\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Cosmopolitanism', 'happiness', CosmopolitanHappyChance);\r\n                break;\r\n            }\r\n            _ifBelievesInMaybeEmote(state, bean, 'Diligence', 'happiness', DiligenceHappyChance);\r\n            _ifBelievesInMaybeEmote(state, bean, 'Hedonism', 'unhappiness', HedonismHateWorkChance);\r\n            bean.ticksSinceLastSale++;\r\n            if (bean.ticksSinceLastSale > UnderemploymentThresholdTicks && bean.employerEnterpriseKey != null){\r\n                // const cityHasOtherWorkers = state.cities.byID[bean.cityKey].beans.get.filter(x => x.job === bean.job).length > 1 : false;\r\n                // cityHasOtherWorkers &&\r\n                const employer = state.enterprises.byID[bean.employerEnterpriseKey];\r\n                // underemployment\r\n                if (employer.ownerBeanKey != bean.key && Math.random() > 0.5) {\r\n                    const newJob = EconomyMostInDemandJob(state.economy);\r\n                    if (newJob){\r\n                      BuildingUnsetJob(state.buildings.byID[bean.employerEnterpriseKey], bean);\r\n                      BeanTrySetJob(state, bean, newJob);\r\n                    }\r\n                }\r\n            }\r\n            let workedForEmployer = false;\r\n            if (bean.employerEnterpriseKey){\r\n                const employer = state.enterprises.byID[bean.employerEnterpriseKey];\r\n                if (employer){\r\n                    EconomyEmployAndPrice(state.economy, employer, JobToGood(bean.job), 4, bean.fairGoodPrice);\r\n                    workedForEmployer = true;\r\n                    switch(employer.enterpriseType){\r\n                        case 'company':\r\n                            _ifBelievesInMaybeEmote(state, bean, 'Communism', 'unhappiness', 0.1);\r\n                            if (employer.ownerBeanKey === bean.key)\r\n                              _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'co-op':                            \r\n                            _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'unhappiness', 0.1);\r\n                                \r\n                            _ifBelievesInMaybeEmote(state, bean, 'Socialism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'commune':                            \r\n                          _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'unhappiness', 0.1);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (!workedForEmployer)\r\n              EconomyProduceAndPrice(state.economy, bean, JobToGood(bean.job), 4, bean.fairGoodPrice);\r\n        }\r\n      },\r\n      beanEmote: (state, action: PayloadAction<{beanKey: number, emote: TraitEmote, source: string}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        _emote(bean, state, action.payload);\r\n        if (BeanBelievesIn(bean, 'Hedonism') && (\r\n          action.payload.emote === 'happiness' || action.payload.emote === 'love'\r\n          ) && Math.random() < HedonismExtraChance){\r\n            _emote(bean, state, {emote: 'happiness', source: 'Hedonism'});\r\n        }\r\n      },\r\n      beanCrime: (state, action: PayloadAction<{beanKey: number, good: 'food'|'medicine'}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        const listing = GetRandom(state.seed, state.economy.market.listings[action.payload.good]);\r\n        if (listing == null){\r\n        } else {\r\n          const stolen = Math.min(listing.quantity, 3);\r\n          MarketListingSubtract(state.economy.market, listing, action.payload.good, stolen);\r\n          if (stolen != null){\r\n              switch(action.payload.good){\r\n                  case 'food':\r\n                      bean.discrete_food += stolen;\r\n                      break;\r\n                  case 'medicine':\r\n                      bean.discrete_health += stolen;\r\n                      break;\r\n              }\r\n          }\r\n        }\r\n      },\r\n      beanRelax: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        bean.discrete_fun += 1;\r\n        _emote(bean, state, {emote: 'happiness', source: 'Relaxation'});\r\n        if (BeanBelievesIn(bean, 'Naturalism'))\r\n          _emote(bean, state, {emote: 'happiness', source: 'Naturalism'});\r\n      },\r\n      enactLaw: (state, action: PayloadAction<{lawKey: LawKey}>) => {\r\n        const data = LawData[action.payload.lawKey];\r\n        state.law.lawTree[data.axis] = data;\r\n      },\r\n      repealLaw: (state, action: PayloadAction<{lawKey: LawKey}>) => {\r\n        const data = LawData[action.payload.lawKey];\r\n        delete state.law.lawTree[data.axis];\r\n      },\r\n      \r\n    buyBots: (state, action: PayloadAction<{amount: number}>) => {\r\n      const cost = state.alien.difficulty.cost.market.resource.bots;\r\n      if (PlayerTryPurchase(state.alien, cost, action.payload.amount)) {\r\n        state.alien.bots.amount += action.payload.amount;\r\n      }\r\n    },\r\n    buyEnergy: (state, action: PayloadAction<{amount: number}>) => {\r\n      const cost = state.alien.difficulty.cost.market.resource.bots;\r\n      if (PlayerTryPurchase(state.alien, cost, action.payload.amount)) {\r\n        state.alien.energy.amount += action.payload.amount;\r\n      }\r\n    },\r\n    scrubHedons: (state) => {\r\n      const cost = state.alien.difficulty.cost.market.scrubHedons;\r\n      if (PlayerTryPurchase(state.alien, cost)) {\r\n        const old = state.alien.hedons.amount;\r\n        state.alien.hedons.amount = 0;\r\n      }\r\n    },\r\n    buyTrait: (state, action: PayloadAction<{l: MarketTraitListing}>) => {\r\n      if (PlayerTryPurchase(state.alien, action.payload.l.cost)) {\r\n        const existing = state.alien.beliefInventory.find((x) => x.trait === action.payload.l.trait);\r\n        if (existing) {\r\n          existing.charges += ChargePerMarket;\r\n        } else\r\n          state.alien.beliefInventory.push({trait: action.payload.l.trait, charges: ChargePerMarket});\r\n      }\r\n    },\r\n      beanBuy: (state, action: PayloadAction<{beanKey: number, good: TraitGood}>) =>{\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const getSeller = (l: IListing) => {\r\n          if (l.sellerEnterpriseKey != null)\r\n            return state.enterprises.byID[l.sellerEnterpriseKey];\r\n          else if (l.sellerBeanKey)\r\n            return state.beans.byID[l.sellerBeanKey];\r\n          else\r\n            return state.law;\r\n        }\r\n        let receipt: IMarketReceipt|undefined;\r\n        switch(action.payload.good){\r\n          case 'food':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'food', getSeller, 0.5, 3);\r\n            if (receipt?.bought) {\r\n                bean.discrete_food += receipt.bought;\r\n                if (bean.food === 'stuffed'){\r\n                    _emote(bean, state, {emote:'happiness', source: 'Stuffed'});\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Gluttony', 'happiness', 1);\r\n                }\r\n            }\r\n            break;\r\n          case 'shelter':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'shelter', getSeller);\r\n            if (receipt?.bought) {\r\n                bean.discrete_stamina = 10;\r\n                bean.stamina = 'awake';\r\n            } else if (bean.discrete_stamina <= 0){\r\n                bean.stamina = 'homeless';\r\n            }\r\n            break;\r\n          case 'medicine':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'medicine', getSeller, 0.5, 3);\r\n            if (receipt?.bought){\r\n                bean.discrete_health += receipt.bought;\r\n                if (bean.health === 'fresh')\r\n                    _emote(bean, state, {emote:'happiness', source: 'Robust'});\r\n            }\r\n            break;\r\n          case 'fun':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'fun', getSeller);\r\n            if (receipt?.bought) {\r\n                bean.discrete_fun = 1;\r\n                _emote(bean, state, {emote:'happiness', source:'Entertainment'});\r\n                _emote(bean, state, {emote:'happiness', source:'Entertainment'});\r\n            }\r\n            break;\r\n        }\r\n        bean.actionData.buyAttempts = (bean.actionData.buyAttempts || 0) + 1;\r\n        if (receipt){\r\n          if (receipt.tax){\r\n            _ifBelievesInMaybeEmote(state, bean, 'Libertarianism', 'unhappiness', LibertarianTaxUnhappyChance);\r\n            _ifBelievesInMaybeEmote(state, bean, 'Progressivism', 'happiness', ProgressivismTaxHappyChance);\r\n          }\r\n          bean.actionData.buyReceipt = receipt;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  function _ifBelievesInMaybeEmote(state: IWorldState, bean: IBean, source: TraitBelief, emote: TraitEmote, chance: number){\r\n    if (BeanBelievesIn(bean, source) && Math.random() < chance){\r\n      _emote(bean, state, {emote: emote, source: source});\r\n    }\r\n  }\r\n  function _emote(bean: IBean, state: IWorldState, payload: {emote: TraitEmote, source: string}){\r\n    bean.discrete_sanity = MathClamp(bean.discrete_sanity + EmotionSanity[payload.emote], 0, 10);\r\n    bean.hedonHistory[0][payload.source] = (bean.hedonHistory[0][payload.source] || 0) + EmotionWorth[payload.emote];\r\n    \r\n    const beanPosition = MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator;\r\n\r\n    const pickup: IPickup = {\r\n        key: state.pickups.nextID++,\r\n        point: {\r\n          x: beanPosition.point.x,\r\n          y: beanPosition.point.y\r\n        },\r\n        type: payload.emote,\r\n        velocity: {x: 0, y: 0}\r\n    };\r\n    state.cities.byID[bean.cityKey].pickupKeys.push(pickup.key);\r\n    state.pickups.byID[pickup.key] = pickup; \r\n    state.pickups.allIDs.push(pickup.key);\r\n    MoverStoreInstance.Get('pickup', pickup.key).publish({\r\n      point: {\r\n        x: beanPosition.point.x,\r\n        y: beanPosition.point.y\r\n      },\r\n      velocity: {x: 0, y: 0}\r\n    });\r\n  }\r\n  \r\n  export const { \r\n    refreshMarket, magnetChange, worldTick, \r\n    remove_ufo,\r\n    newGame, loadGame, build, changeEnterprise, fireBean, upgrade, beam,\r\n    abduct, release, scan, vaporize, pickUpPickup,\r\n    implant, washBelief, washNarrative, washCommunity, washMotive,\r\n    changeState, beanEmote, beanGiveCharity, beanHitDestination, beanWork, beanRelax, beanBuy, beanCrime,\r\n    beanBePersuaded, cheatAdd,\r\n    enactLaw, repealLaw, setResearch, buyBots, buyEnergy, buyTrait, scrubHedons\r\n  } = worldSlice.actions\r\n  \r\n  export const selectCityBeanIDs = (state: IWorldState, cityKey: number) => state.cities.byID[cityKey].beanKeys;\r\n  export const selectBeans = (state: IWorldState) => state.beans.byID;\r\n  export const selectBeansByCity = createSelector(\r\n    selectCityBeanIDs,\r\n    selectBeans,\r\n    (cityBeanIDs, beansByID) => cityBeanIDs.reduce((all, cityBeanKey) => {\r\n      all.push(beansByID[cityBeanKey])\r\n      return all;\r\n    }, [] as IBean[])\r\n  );\r\n  export const selectCity = (state: IWorldState, cityKey: number) => state.cities.byID[cityKey];\r\n  export const selectBuilding = (state: IWorldState, buildingKey: number) => state.buildings.byID[buildingKey];\r\n  export const selectCityBuildingByHex = (state: IWorldState, cityKey: number, hexKey: string) => {\r\n    const buildingKey = state.cities.byID[cityKey].buildingMap[hexKey];\r\n    if (buildingKey != null)\r\n      return selectBuilding(state, buildingKey);\r\n    else\r\n      return undefined;\r\n  }\r\n  export const selectBuildingKeysByCity = (state: IWorldState, cityKey: number) => {\r\n    return state.cities.byID[cityKey].buildingKeys;\r\n  }\r\n  export const selectBuildingsByCity = (state: IWorldState, cityKey: number) => {\r\n    return selectBuildingKeysByCity(state, cityKey).reduce((x: IBuilding[], id) => {\r\n      x.push(state.buildings.byID[id]);\r\n      return x;\r\n    }, [] as IBuilding[]);\r\n  }\r\n  \r\n  export const selectMajorityEthnicity = createSelector(selectBeansByCity, (cityBeans) => {\r\n    const c = cityBeans.reduce((count: {circle: number, square: number, triangle: number}, bean) => {\r\n        switch(bean.ethnicity){\r\n            case 'circle': count.circle++;break;\r\n            case 'square': count.square++;break;\r\n            case 'triangle': count.triangle++;break;\r\n        }\r\n        return count;\r\n    }, {circle: 0, square: 0, triangle: 0});\r\n    if (c.circle > c.square && c.circle > c.triangle){\r\n      return 'circle';\r\n    } else if (c.square > c.circle && c.square > c.triangle){\r\n      return 'square';\r\n    } else {\r\n      return 'triangle';\r\n    }\r\n  });\r\n  \r\n  export default worldSlice.reducer;\r\n  ","import { IEvent } from '../../events/Events'\r\nimport { DefaultDifficulty } from '../../Game'\r\nimport { IBean } from '../../simulation/Agent'\r\nimport { ICity } from '../../simulation/City'\r\nimport { IEconomy } from '../../simulation/Economy'\r\nimport { GenerateGeography, IBuilding } from '../../simulation/Geography'\r\nimport { IGovernment, ILaw, LawAxis } from '../../simulation/Government'\r\nimport { IEnterprise } from '../../simulation/Institutions'\r\nimport { MarketTraitListing } from '../../simulation/MarketTraits'\r\nimport { IPickup } from '../../simulation/Pickup'\r\nimport { IPlayerData } from '../../simulation/Player'\r\nimport { IDate, Season } from '../../simulation/Time'\r\nimport { IUFO } from '../../simulation/Ufo'\r\nimport { GenerateCity } from '../../WorldGen'\r\nimport { CreateEmptyEntitySlice, CreateEntitySlice, IEntitySlice } from '../entity.state'\r\n\r\nexport interface IWorldState {\r\n  buildings: IEntitySlice<IBuilding>,\r\n  enterprises: IEntitySlice<IEnterprise>,\r\n  cities: IEntitySlice<ICity>,\r\n  beans: IEntitySlice<IBean>,\r\n  ufos: IEntitySlice<IUFO>,\r\n  events: IEntitySlice<IEvent>,\r\n  pickups: IEntitySlice<IPickup>,\r\n  economy: IEconomy,\r\n  law: IGovernment,\r\n  marketTraitsForSale: MarketTraitListing[],\r\n  date: IDate,\r\n  alien: IPlayerData,\r\n  spotlightEvent: IEvent | undefined,\r\n  /**\r\n   * 1-based ID of save slot (1-3)\r\n   */\r\n  saveSlot: number,\r\n  seed: string\r\n}\r\n\r\nexport function GetBlankWorldState(seed: string = 'abcdef'): IWorldState{\r\n  return {\r\n    buildings: CreateEmptyEntitySlice<IBuilding>(),\r\n    enterprises: CreateEmptyEntitySlice<IEnterprise>(),\r\n    cities: CreateEntitySlice<ICity>([\r\n      GenerateCity()\r\n    ]),\r\n    beans: CreateEmptyEntitySlice<IBean>(),\r\n    ufos: CreateEmptyEntitySlice<IUFO>(),\r\n    events: CreateEmptyEntitySlice<IEvent>(),\r\n    pickups: CreateEmptyEntitySlice<IPickup>(),\r\n    economy: {\r\n      unfulfilledMonthlyDemand: { food: 0, shelter: 0, medicine: 0, fun: 0, },\r\n      monthlyDemand: { food: 0, shelter: 0, medicine: 0, fun: 0, },\r\n      monthlySupply: { food: 0, shelter: 0, medicine: 0, fun: 0, },\r\n      market: {\r\n        listings: {food: [], fun: [], medicine: [], shelter: []}\r\n      }\r\n    },\r\n    law: {\r\n      cash: 0,\r\n      lawTree: {} as {[key in LawAxis]: ILaw|undefined},\r\n      laws: [] as ILaw[],\r\n      ticksSinceLastSale: 0\r\n    },\r\n    date: {year: 1, season: Season.Spring, day: 1, hour: 1},\r\n    marketTraitsForSale: [],\r\n    alien: {\r\n      scanned_bean: {},\r\n      seenBeliefs: {},\r\n      beliefInventory: [],\r\n      speechcrimes: {},\r\n      abductedBeanKeys: [],\r\n      energy: { amount: 16, income: 2/30},\r\n      bots: { amount: 10, income: 2/30},\r\n      hedons: { amount: 0, income: 0},\r\n      // tortrons: { amount: 0, income: 0},\r\n      next_grade: { year: 1, season: 3, day: 1, hour: 0 },\r\n      difficulty: {...DefaultDifficulty},\r\n      goals: ['found_utopia', 'build_house_n_farm',  'beam_3', 'scan', 'brainwash', 'set_policy', 'c+_grade'],\r\n      goalProgress: {},\r\n      pastReportCards: [],\r\n      workingReportCard: {\r\n          Happiness: 'D',\r\n          Prosperity: 'D',\r\n          Stability: 'D',\r\n          Dogma: 'D',\r\n      },\r\n      techProgress: {},\r\n      currentlyResearchingTech: undefined\r\n    },\r\n    spotlightEvent: undefined,\r\n    saveSlot: 1,\r\n    seed: seed\r\n  }\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './state'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { HexPoint } from \"../../simulation/Geography\"\r\n\r\nexport interface ISelectedSlice{\r\n    selectedCityKey: number|undefined;\r\n    selectedHexKey: string|undefined;\r\n    selectedBeanKey: number|undefined;\r\n    selectedBuildingKey: number|undefined;\r\n}\r\nexport const selectedSlice = createSlice({\r\n    name: 'selected',\r\n    initialState: {\r\n        selectedHexKey: undefined,\r\n        selectedCityKey: undefined,\r\n        selectedBeanKey: undefined\r\n    } as ISelectedSlice,\r\n    reducers: {\r\n      doSelectCity: (state, action: PayloadAction<{cityKey: number}>) => {\r\n        return {\r\n            selectedHexKey: undefined,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n      doSelectHex: (state, action: PayloadAction<{cityKey: number, hex: HexPoint}>) => {\r\n        return {\r\n            selectedHexKey: `${action.payload.hex.q},${action.payload.hex.r}`,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n      doSelectBuilding: (state, action: PayloadAction<{cityKey: number, hex: HexPoint, buildingKey: number}>) => {\r\n        return {\r\n            selectedHexKey: `${action.payload.hex.q},${action.payload.hex.r}`,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: action.payload.buildingKey\r\n        }\r\n      },\r\n      doSelectBean: (state, action: PayloadAction<{cityKey: number, beanKey: number}>) => {\r\n        return {\r\n            selectedHexKey: undefined,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: action.payload.beanKey,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n      doSelectNone: (state) => {\r\n        return {\r\n            selectedBeanKey: undefined, \r\n            selectedCityKey: undefined,\r\n            selectedHexKey: undefined,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n    }\r\n  })\r\n  \r\n  export const { doSelectHex, doSelectNone, doSelectBean, doSelectCity, doSelectBuilding  } = selectedSlice.actions;","import { combineReducers, configureStore, createSelector, getDefaultMiddleware, Middleware } from '@reduxjs/toolkit';\r\nimport { GameStorageInstance } from '../GameStorage';\r\nimport { ISelectedSlice, selectedSlice } from './features/selected.reducer';\r\nimport { IWorldState } from './features/world';\r\nimport { selectBeans, worldSlice } from './features/world.reducer';\r\n\r\n// export type RootState = ReturnType<typeof store.getState>;\r\nexport type RootState = {\r\n  world: IWorldState,\r\n  selected: ISelectedSlice\r\n};\r\nexport const autosaveSignalMiddleware: Middleware<\r\n  {}, // Most middleware do not modify the dispatch return value\r\n  RootState\r\n> = storeApi => next => action => {\r\n  \r\n  switch (action.type){\r\n    case 'world/magnetChange':\r\n      break;\r\n    default:\r\n      if (!action.type.startsWith('selected')){\r\n        GameStorageInstance.Dirty.publish(true);\r\n      }\r\n  }\r\n  \r\n  return next(action)\r\n}\r\nexport const store = configureStore({\r\n  reducer: {\r\n    world: worldSlice.reducer,\r\n    selected: selectedSlice.reducer\r\n  },\r\n  middleware: getDefaultMiddleware().concat([autosaveSignalMiddleware])\r\n})\r\n\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const selectBeanById = (state: RootState, beanKey: number) => state.world.beans.byID[beanKey];\r\nexport const selectCityById = (state: RootState, cityKey: number) => state.world.cities.byID[cityKey];\r\nexport const selectSelectedCity = (state: RootState) => {\r\n  return state.selected.selectedCityKey != null ? state.world.cities.byID[state.selected.selectedCityKey] : undefined;\r\n}\r\nexport const selectSelectedBean = (state: RootState) => {\r\n  return state.selected.selectedBeanKey != null ? state.world.beans.byID[state.selected.selectedBeanKey] : undefined;\r\n}\r\nexport const selectSelectedBuilding = (state: RootState) => {\r\n  const city = state.selected.selectedCityKey != null && state.world.cities.byID[state.selected.selectedCityKey];\r\n  if (city && state.selected.selectedHexKey != null)\r\n  {\r\n    const buildingID = city.buildingMap[state.selected.selectedHexKey];\r\n    return state.world.buildings.byID[buildingID];\r\n\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\nexport const selectEventIDs = (state: RootState) => {\r\n  return state.world.events.allIDs.map(y => state.world.events.byID[y]);\r\n};","import React from \"react\";\r\n\r\nexport class ConfirmButton extends React.Component<{\r\n    confirmText: string,\r\n    onConfirm: () => void,\r\n    disabled?: boolean,\r\n    className?: string\r\n}, {\r\n    confirming: boolean\r\n}> {\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            confirming: false\r\n        }\r\n    }\r\n    click(){\r\n        if (this.state.confirming){\r\n            this.props.onConfirm();\r\n            this.setState({confirming: false});\r\n        } else {\r\n            this.setState({confirming: true});\r\n        }\r\n    }\r\n    render(){\r\n        return <button className={this.props.className} onClick={() => this.click()} disabled={this.props.disabled}>\r\n            { this.state.confirming ? this.props.confirmText : this.props.children}\r\n        </button>\r\n    }\r\n}","import React, { ChangeEvent } from \"react\";\r\n\r\nexport interface StringDropdownPS{\r\n    options: Array<string>,\r\n    onChange: (key: any) => void,\r\n    hint?: string,\r\n    value?: any,\r\n    titleCase?: boolean\r\n}\r\ninterface StringDropdownS{\r\n    key: any;\r\n}\r\n\r\nexport class StringDropdown extends React.Component<StringDropdownPS, StringDropdownS> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            key: props.value || null\r\n        }\r\n    }\r\n    onChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        this.props.onChange(e.target.value);\r\n        this.setState({key: e.target.value})\r\n    }\r\n    hint(){\r\n        if (this.props.hint){\r\n            return <option value=\"\" disabled selected hidden>{this.props.hint}</option>\r\n        } \r\n        return undefined;\r\n    }\r\n    protected getTextForOption(data: string): string{\r\n        if (this.props.titleCase){\r\n            data = data[0].toUpperCase()+data.slice(1);\r\n        }\r\n        return data;\r\n    }\r\n    options(){\r\n        return this.props.options.map((str) => {\r\n            return <option value={str} key={str} title={this.getTitleForOption(str)}>\r\n                {this.getTextForOption(str)}\r\n            </option>\r\n        })\r\n    }\r\n    render(){\r\n        return <select onChange={this.onChange} value={this.state.key} required={this.props.hint != null}>\r\n            {this.hint()}\r\n            {this.options()}\r\n        </select>\r\n    }\r\n    protected getTitleForOption(data: string): string|undefined{\r\n        return undefined;\r\n    }\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport { BeliefsAll, IBeliefData, SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { StringDropdown } from \"../widgets/StringDropdown\";\r\nimport { TraitIcon } from \"../World\";\r\nimport './beliefs.css';\r\n\r\n\r\n\r\nexport const BeliefWidget: React.FC<{\r\n    data: IBeliefData,\r\n    cost?: number,\r\n    leftButton?: ReactElement,\r\n    titleView: ReactElement,\r\n    bottomView: ReactElement\r\n}> = (props) => {\r\n    return <div className=\"belief\">\r\n        <div className=\"horizontal badger\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {props.data.icon}\r\n                </div>\r\n                {\r\n                    props.leftButton\r\n                }\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">\r\n                    {\r\n                        props.titleView\r\n                    }\r\n                    {\r\n                        props.cost ? \r\n                        <span className=\"pull-r\">{props.cost}🧠</span>\r\n                        : null\r\n                    }\r\n                </div>\r\n                {\r\n                props.data.description ? props.data.description.split(';').map((x, i) => \r\n                    <small className=\"marg-b-6\" key={i}> {x}\r\n                    </small>\r\n                    ) : null\r\n                }\r\n                <div className=\"grow-1 text-center\">\r\n                    {\r\n                       props.bottomView\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport class EditBeliefInput extends React.Component<{\r\n    data: IBeliefData,\r\n    frozen?: boolean,\r\n    divergent?: boolean,\r\n    available: number,\r\n    cost: number,\r\n    wash: () => void\r\n}, {\r\n\r\n}>{\r\n\r\n    render(){\r\n        return <div className=\"belief\"><div className=\"horizontal badger\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {this.props.data.icon}\r\n                </div>\r\n                {\r\n                    this.props.frozen ? null : <ConfirmButton className=\"callout pad-4 marg-0\"\r\n                        confirmText={'-'+this.props.cost.toString()+'🧠?'} disabled={this.props.available < this.props.cost} onConfirm={this.props.wash}>\r\n                    🚿 <small>Wash</small>\r\n                    </ConfirmButton>\r\n                }\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">\r\n                    <strong title={this.props.data.description} className={this.props.divergent ? 'divergent marg-r-6': 'marg-r-6'}>\r\n                        {this.props.data.noun}\r\n                    </strong>\r\n                    <span className=\"pull-r\">{this.props.cost}🧠</span>\r\n                </div>\r\n                <small className=\"marg-b-6\">{this.props.data.description}</small>\r\n                <div className=\"grow-1 text-center\">\r\n                    {/* {\r\n                        RenderIdealBadges(this.props.data.idealPro || [], 'pos')\r\n                    }\r\n                    {\r\n                        RenderIdealBadges(this.props.data.idealCon || [], 'neg')\r\n                    }  */}\r\n                </div>\r\n            </div>\r\n        </div></div>\r\n    }\r\n}\r\n\r\nconst SortedBeliefs = BeliefsAll.slice().sort((a, b) => a.localeCompare(b));\r\nexport class AddBeliefInput extends React.Component<{\r\n    available: number,\r\n    cost: number,\r\n    add: (b: TraitBelief) => void\r\n}, {\r\n    belief: TraitBelief,\r\n}>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            belief: 'Neuroticism'\r\n        }\r\n    }\r\n    render(){\r\n        const data = SecondaryBeliefData[this.state.belief]\r\n        return <div className=\"belief\"><div className=\"horizontal badger add\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {data.icon}\r\n                </div>\r\n                <ConfirmButton className=\"callout grow-0 pad-4 marg-0\" disabled={this.props.available < this.props.cost} \r\n                    confirmText={'-'+this.props.cost.toString()+'🧠?'} onConfirm={() => this.props.add(this.state.belief)}>\r\n                    💉 <small>Implant</small>\r\n                </ConfirmButton>\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">                    \r\n                    <StringDropdown titleCase={true}\r\n                    options={SortedBeliefs} \r\n                    value={this.state.belief}\r\n                    onChange={(a: string) => {\r\n                        console.log(a);\r\n                        this.setState({belief: a as TraitBelief})\r\n                    }}\r\n                    ></StringDropdown>\r\n                    <span className=\"pull-r\">{this.props.cost}🧠</span>\r\n                </div>\r\n                <small className=\"marg-b-6\">{data.description}</small>\r\n                <div className=\"grow-1 text-center\">\r\n                    {\r\n                        (data.idealPro || []).map((x) => <span className=\"pos badge align-mid\" key={x}>+{TraitIcon[x]}</span>)\r\n                    }\r\n                    {\r\n                        (data.idealCon || []).map((x) => <span className=\"neg badge align-mid\" key={x}>-{TraitIcon[x]}</span>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div></div>\r\n    }\r\n}","import React from \"react\";\r\nimport { BeanBelievesIn } from \"../simulation/Bean\";\r\nimport { NarrativeBeliefData, SecondaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { HasResearched } from \"../simulation/Player\";\r\nimport { implant, washBelief, washNarrative } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean } from \"../state/state\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { EmoteIcon } from \"../World\";\r\nimport { BeliefWidget, EditBeliefInput } from \"./BeliefRow\";\r\nimport './modals.css';\r\n\r\nexport const TraitInventoryList: React.FC<{\r\n    dogmatic: boolean,\r\n    beanKey: number\r\n}> = (props) => {\r\n    const beliefInventory = useAppSelector(x => x.world.alien.beliefInventory);\r\n    const dispatch = useAppDispatch();\r\n    return <>\r\n        {beliefInventory.map((x) => <BeliefWidget \r\n        key={x.trait} data={SecondaryBeliefData[x.trait]} titleView={<strong>{SecondaryBeliefData[x.trait].noun}</strong>}\r\n        leftButton={\r\n            <ConfirmButton onConfirm={() => dispatch(implant({beanKey: props.beanKey, trait: x.trait}))} className=\"callout marg-0\" confirmText=\"-1 🧠?\" disabled={x.charges < 1 || props.dogmatic}>\r\n                Implant\r\n            </ConfirmButton>\r\n        }\r\n        bottomView={<span>{x.charges} 🧠</span>}>\r\n        </BeliefWidget>)}\r\n    </>\r\n};\r\n\r\nexport const BrainwashingContent: React.FC<{\r\n}> = () => {\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const isScanned = useAppSelector(s => bean?.key != null && s.world.alien.scanned_bean[bean.key]);\r\n    const difficulty = useAppSelector(s => s.world.alien.difficulty);\r\n    const techProgress = useAppSelector(s => s.world.alien.techProgress);\r\n    const dispatch = useAppDispatch();\r\n    const sanityCostBonus = HasResearched(techProgress, 'sanity_bonus') ? -1 : 0;\r\n    if (bean == null) return <div></div>;\r\n    const dogmatic = BeanBelievesIn(bean, 'Dogmatism');\r\n    return <div>\r\n        <div className=\"horizontal fancy-header\">\r\n            <div>\r\n                BRAIN\r\n            </div>\r\n            <div className=\"emoji-3\">\r\n            🧠🚿\r\n            </div>\r\n            <div>\r\n                WASH\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <p className=\"pad-4p\">\r\n                <strong>{bean.name}</strong> has {bean.discrete_sanity.toFixed(0)} sanity 🧠. \r\n                {\r\n                    bean.sanity === 'stressed' || bean.sanity === 'disturbed' ?\r\n                        <small className=\"pull-r\">(Low sanity 🧠 causes {EmoteIcon['unhappiness']}; Negative sanity 🧠 causes extremely negative traits)</small>\r\n                    : null\r\n                }\r\n            </p>\r\n            {\r\n                dogmatic ? <div className=\"text-center\">\r\n                    🐶 Dogmatic subjects cannot change their minds\r\n                </div> : null\r\n            }\r\n            { isScanned ? <div className=\"horizontal scroll\">\r\n                {/* <EditBeliefInput\r\n                    available={bean.discrete_sanity} frozen={dogmatic}\r\n                    wash={() => this.props.washCommunity(bean, bean.community)} \r\n                    cost={this.props.world.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0}\r\n                    data={PrimaryBeliefData[bean.community]}\r\n                ></EditBeliefInput>\r\n                <EditBeliefInput\r\n                    available={bean.discrete_sanity}  frozen={dogmatic}\r\n                    wash={() => this.props.washMotive(bean, bean.ideals)} \r\n                    cost={this.props.world.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0}\r\n                    data={PrimaryBeliefData[bean.ideals]}\r\n                ></EditBeliefInput> */}\r\n                <EditBeliefInput\r\n                    available={bean.discrete_sanity} frozen={dogmatic}\r\n                    wash={() => dispatch(washNarrative({beanKey: bean.key, faith:bean.faith}))} \r\n                    cost={difficulty.cost.bean_brain.brainwash_ideal.sanity || 0}\r\n                    data={NarrativeBeliefData[bean.faith]}\r\n                ></EditBeliefInput>\r\n                {/* IsBeliefDivergent(b, this.props.world.party.ideals, this.props.world.party.community) */}\r\n                {\r\n                    bean.beliefs.map((b) => <EditBeliefInput key={b}\r\n                    available={bean.discrete_sanity} frozen={dogmatic && b != 'Dogmatism'}\r\n                    divergent={false}\r\n                    wash={() => dispatch(washBelief({beanKey: bean.key, trait: b}))} \r\n                        cost={(difficulty.cost.bean_brain.brainwash_secondary.sanity || 0) + sanityCostBonus}\r\n                        data={SecondaryBeliefData[b]}\r\n                    >\r\n                    </EditBeliefInput>)\r\n                }\r\n                {/* {\r\n                    dogmatic ? null : <AddBeliefInput\r\n                        available={bean.discrete_sanity}\r\n                        add={(b) => this.props.implantBelief(bean, b)} \r\n                        cost={this.props.world.alien.difficulty.cost.bean_brain.brainimplant_secondary.sanity || 0}\r\n                    ></AddBeliefInput>\r\n                } */}\r\n            </div> : <div className=\"text-center\">🛰️ Scan this subject to reveal its Traits! </div>}\r\n            <h3 className=\"pad-4p\">\r\n                🧠 Trait Inventory\r\n            </h3>\r\n            <div className=\"horizontal scroll\">\r\n                <TraitInventoryList beanKey={bean.key}\r\n                    dogmatic={dogmatic}></TraitInventoryList>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport class CampaignsPanel extends React.Component<{\r\n\r\n}>{\r\n    render(){\r\n        return <div className=\"pad-4p\">\r\n        <div className=\"subheader\">\r\n            <h3>Propaganda</h3>\r\n            <button type=\"button\" className=\"callout\" onClick={() => void(0)} >🎙️ Buy Propaganda</button>\r\n        </div>\r\n        <span>\r\n          Propaganda changes beans' feelings on a wide variety of topics.\r\n        </span>\r\n        <div className=\"card-parent\">\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              📺 Broadcast Campaign\r\n            </span>\r\n            <small>Approval+ Cash-</small>\r\n            <span className=\"p\">\r\n              Small chance to increase Approval among all beans\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              👋 Canvassing\r\n            </span>\r\n            <small>Approval+ Labor-</small>\r\n            <span className=\"p\">\r\n              Chance to increase Approval on a few random beans\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              🗞️ Print Campaign\r\n            </span>\r\n            <small>Approval+ Cash-</small>\r\n            <span className=\"p\">\r\n              Chance to increase Approval on wealthy beans\r\n            </span>\r\n          </button>\r\n        </div>\r\n        <div className=\"subheader\">\r\n            <h3>Appearances</h3>\r\n            <button type=\"button\" className=\"callout\" onClick={() => void(0)} >💬 Schedule Appearance</button>\r\n        </div>\r\n        <span>\r\n          Appearances have limited reach, but have powerful effects.\r\n        </span>\r\n        <div className=\"card-parent\">\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n            🤔 Debating\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Chance to gain or lose Influence\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n            📸 Photo Op\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Increases Approval within one Social Group\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              🎤 Speechmaking\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Increases chance of Donations in a single City\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n            🙋 Town Hall\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Suppresses negative Approval in a single city                     \r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    }\r\n}","import { BuildingTypes } from \"../simulation/Geography\";\r\nimport { Trait } from \"../World\";\r\n\r\nexport const keyToName: { [key in Trait | BuildingTypes]: string } = {\r\n    state: 'Collectivist', ego: 'Independent',\r\n    trad: 'Elitist', prog: 'Progressive',\r\n    circle: 'Brunette', square: 'Blonde', triangle: 'Redhead',\r\n    rocket: 'Futuristic', dragon: 'Mythical', music: 'Dramatic', noFaith: 'Nihilistic',\r\n    starving: 'Starving', hungry: 'Hungry', sated: 'Sated', stuffed: 'Stuffed',\r\n    homeless: 'Homeless', sleepy: 'Sleepy', awake: 'Awake', rested: 'Rested',\r\n    sick: 'Sick', sickly: 'Sickly', bruised: 'Bruised', fresh: 'Robust',\r\n    sane: 'Sane', stressed: 'Confused', disturbed: 'Disturbed', 'psychotic': 'Psychotic',\r\n    house: 'House', hospital: 'Hospital', farm: 'Farm', theater: 'Theater', church: 'Church', courthouse: 'Courthouse', park: 'Park', nature: 'Elysian Scenery'\r\n  };","import React from \"react\";\r\nimport { Trait } from \"../World\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { IBean } from \"../simulation/Agent\";\r\n\r\nexport class NeedReadout extends React.Component<{\r\n    beans: IBean[], \r\n    need: (b: IBean) => Trait, \r\n    dire: Trait, \r\n    abundant: Trait,\r\n    className?: string}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    header(){\r\n        if (this.props.children){\r\n            return <b>{this.props.children}</b>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    render(){\r\n        const dire = this.props.beans.filter(b => this.props.need(b) == this.props.dire).length;\r\n        const dire_style = {\r\n            width: Math.floor((dire / this.props.beans.length)*100)+'%'\r\n        }\r\n        const full = this.props.beans.filter(b => this.props.need(b) == this.props.abundant).length;\r\n        const full_style = {\r\n            width: Math.floor((full / this.props.beans.length)*100)+'%'\r\n        }\r\n        return (                \r\n        <div className={this.props.className}>\r\n            {this.header()}\r\n            {/* <span>{keyToName[this.props.report.winner]}</span> */}\r\n            <div className=\"bar\">\r\n                <div className=\"bar-inner dire\" style={dire_style}>\r\n                    {(dire > 0 ? `${dire} ${keyToName[this.props.dire]}`: '')}\r\n                </div>\r\n                <div className=\"bar-inner abundant\" style={full_style}>\r\n                    {full > 0 ? full : ''}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","\r\nimport React from \"react\";\r\nimport { TraitJob } from \"../World\";\r\nimport { NeedReadout } from \"../widgets/NeedReadout\";\r\nimport { GetCostOfLiving, IListing } from \"../simulation/Economy\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { selectBeansByCity } from \"../state/features/world.reducer\";\r\n\r\nfunction median(values: Array<number>){\r\n  if(values.length ===0) return 0;\r\n\r\n  values.sort(function(a,b){\r\n    return a-b;\r\n  });\r\n\r\n  var half = Math.floor(values.length / 2);\r\n\r\n  if (values.length % 2)\r\n    return values[half];\r\n\r\n  return (values[half - 1] + values[half]) / 2.0;\r\n}\r\n\r\nexport const EconomyReport: React.FC<{}> = () => {\r\n    const beans = useAppSelector(s => selectBeansByCity(s.world, 0));\r\n    const economy = useAppSelector(s => s.world.economy);\r\n    const food_median = median(beans.map(x => x.discrete_food));\r\n    const health_median = median(beans.map(x => x.discrete_health)).toFixed(1);\r\n    const shelter_median = median(beans.map(x => x.discrete_stamina)).toFixed(1);\r\n    const wealth_total = beans.reduce((sum, y) => sum + y.cash, 0);\r\n    const wealth_avg = wealth_total / (beans.length || 1);\r\n    const wealth_median = median(beans.map(x => x.cash));\r\n    const wealth_dire = beans.filter(x => x.cash < 1).length;\r\n    const wealth_marker = Math.max(wealth_avg, wealth_median);\r\n    const wealthy = beans.filter(x => x.cash > wealth_marker);\r\n    const wealthy_percentage = (wealthy.length / (beans.length || 1)) * 100;\r\n    const wealthy_ownership = (wealthy.reduce((s, x) => s+x.cash, 0) / wealth_total)*100;\r\n    const jobs = beans.reduce((obj, b) => {\r\n      obj[b.job] = (obj[b.job] || 0)+1;\r\n      return obj;\r\n    }, {} as {[key in TraitJob]: number});\r\n    const unemployed = (((jobs.jobless || 0) / beans.length)*100).toFixed(1);\r\n    function reducer(obj:  {supply: number, price: number, avg: number, count: number}, l: IListing){\r\n      obj.supply += l.quantity;\r\n      obj.price += l.price;\r\n      obj.count++;\r\n      obj.avg = obj.price / obj.count;\r\n      return obj;\r\n    }\r\n    const food = economy.market.listings['food'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    const meds = economy.market.listings['medicine'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    const houses = economy.market.listings['shelter'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    return (\r\n      <div>\r\n        <div className=\"pad-4p\">\r\n          <h2>State of the Utopia</h2>\r\n        </div>\r\n        {/* <div className=\"pad-4p\">\r\n          <h3>Subject's Health</h3>\r\n        </div> */}\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>🍞 Food Security</strong>\r\n            <NeedReadout beans={beans} need={(b) => b.food} dire=\"hungry\" abundant=\"stuffed\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {food_median.toFixed(1)} 🍞</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {food.supply} 🍞 @ ${food.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.food} 🍞\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div>\r\n            <strong>🩺 Healthcare</strong>\r\n            <NeedReadout beans={beans} need={(b) => b.health} dire=\"sick\" abundant=\"fresh\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {health_median} 🩺</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {meds.supply} 🩺 @ ${meds.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.medicine} 🩺\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>🏡 Housing</strong> <br/>\r\n            <NeedReadout beans={beans} need={(b) => b.stamina} dire=\"homeless\" abundant=\"rested\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {shelter_median} 🏡</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {houses.supply} 🏡 @ ${houses.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.shelter} 🏡\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"pad-4p\">\r\n          <h3>Economic Health</h3>\r\n        </div> */}\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>💰 Wealth</strong> <br/>\r\n            {wealth_dire} penniless citizens &nbsp; &nbsp; Cost of Living: ${GetCostOfLiving(economy).toFixed(2)} <br/>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Total ${wealth_total.toFixed(2)}</td>\r\n                  <td className=\"text-center\">\r\n                    Median: ${wealth_median.toFixed(2)} \r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Avg: ${wealth_avg.toFixed(2)}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            Top {wealthy_percentage.toFixed(1)}% of subjects own {wealthy_ownership.toFixed(1)}% of the wealth\r\n          </div>\r\n          <span>\r\n            <strong>Unemployment</strong> {unemployed}% ({jobs.jobless})<br/>\r\n            <ul className=\"boxes\">\r\n              <li>{jobs.farmer || 0} farmers</li>\r\n              <li>{jobs.builder || 0} builders</li>\r\n              <li>{jobs.doc || 0} doctors</li>\r\n              <li>{jobs.entertainer || 0} entertainers</li>\r\n            </ul>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }","import React from 'react';\r\n\r\nexport const EscapeMenu: React.FC<{}> = (props) => {\r\n    return <div>\r\n        \r\n    </div>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Live } from \"../events/Events\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nexport const TreasuryReport: React.FC<{\r\n\r\n}> = (props) => {\r\n    const coin = useAppSelector(s => s.world.law.cash);\r\n\r\n    return <div className=\"pad-4p\">\r\n        <div>\r\n            <strong>💰 Treasury: {coin.toFixed(2)}</strong>\r\n        </div>\r\n    </div>\r\n}","import React, { useState } from \"react\";\r\nimport { SecondaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { IsLaw, LawData, LawGroup, LawKey, PlayerCanSeePrereqs, PlayerKnowsPrereq, PlayerMeetsPrereqs, PrereqKey, PrereqString } from \"../simulation/Government\";\r\nimport { BeliefInventory } from \"../simulation/Player\";\r\nimport { enactLaw, repealLaw } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { TreasuryReport } from \"../widgets/TreasuryReport\";\r\n\r\nexport const GovernmentPanel: React.FC<{\r\n}> = (props) => {\r\n    const [view, setView] = useState<LawGroup|'funds'>('Welfare');\r\n    return <div>\r\n        <div className=\"col-2\">\r\n            <h2 className=\"marg-b-0\">Utopia Government</h2>\r\n            <div>\r\n                <div className=\"horizontal blue-orange cylinder f-size-125em marg-t-20\">\r\n                    <button type=\"button\" onClick={() => setView('Welfare')} className={view === 'Welfare' ? 'active' : ''}>\r\n                        🤲 Welfare\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('Crime')} className={view === 'Crime' ? 'active' : ''}>\r\n                        🚨 Crime\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('Taxation')} className={view === 'Taxation' ? 'active' : ''}>\r\n                        💰 Taxes\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('funds')} className={view === 'funds' ? 'active' : ''}>\r\n                        💸 Funds\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {\r\n            view === 'funds' ? <div className=\"col-2\">\r\n                <div>\r\n                    <TreasuryReport></TreasuryReport>\r\n                </div>\r\n                <div>\r\n                </div>\r\n            </div> : <LawDetailList \r\n                group={view}\r\n            ></LawDetailList>\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\nexport const LawDetailList: React.FC<{\r\n    group: LawGroup\r\n}> = (props) => {\r\n    const laws = Object.values(LawData).filter(x => x.group === props.group);\r\n    const seenBeliefs = useAppSelector(s => s.world.alien.seenBeliefs);\r\n    const beliefs = useAppSelector(s => s.world.alien.beliefInventory);\r\n    const law = useAppSelector(s => s.world.law);\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"pad-4p\">\r\n        <strong>{props.group} Laws</strong>\r\n        <div className=\"horizontal scroll\">\r\n        {\r\n            laws.map((x) => <LawFormula seenBeliefs={seenBeliefs} id={x.key} beliefs={beliefs} key={x.key} enacted={IsLaw(law, x.key)}\r\n                enactLaw={(lKey) => dispatch(enactLaw({lawKey: lKey}))} revokeLaw={(l) => dispatch(repealLaw({lawKey: l}))}>\r\n            </LawFormula>)\r\n        }\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport const LawFormula: React.FC<{\r\n    id: LawKey,\r\n    seenBeliefs: {[belief: string]: boolean},\r\n    beliefs: BeliefInventory[],\r\n    enacted: boolean,\r\n    enactLaw: (l: LawKey) => void\r\n    revokeLaw: (l: LawKey) => void\r\n}> = (props) => {\r\n    const law = LawData[props.id];\r\n    const canSeeName = PlayerCanSeePrereqs(law.prereqs, props.seenBeliefs);\r\n    const unlocked = PlayerMeetsPrereqs(law.prereqs, props.seenBeliefs);\r\n    return <div className=\"vertical law-formula\">\r\n        <div className=\"horizontal\">\r\n            <div className=\"circular\">\r\n                {canSeeName ? law.icon : '❔'}\r\n            </div>\r\n            <div>\r\n                <strong>\r\n                    {canSeeName ? law.name : 'Unknown'}\r\n                </strong>\r\n                <div>\r\n                    {\r\n                        canSeeName ? <small> {law.description} </small> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"vertical\">\r\n            {\r\n                law.prereqs.map((x) => {\r\n                    const has = PlayerKnowsPrereq(x, props.seenBeliefs);\r\n                    const key = PrereqKey(x);\r\n                    return !has ? <span className=\"law-formula-ingredient unknown\" key={key}>\r\n                        ❔ Unknown\r\n                    </span> : <span className=\"law-formula-ingredient\" key={key}>\r\n                        {PrereqString(x)}\r\n                    </span>\r\n                })\r\n            }\r\n        </div>\r\n        {\r\n            props.enacted ? <button className=\"callout\"  onClick={() => props.revokeLaw(props.id)}>\r\n                🗑️&nbsp;Revoke Active Law\r\n            </button> : <button className=\"callout\" disabled={!unlocked} onClick={() => props.enactLaw(props.id)}>\r\n                {\r\n                    unlocked ? '✒️' : <span className=\"grey\">🔒</span>\r\n                }\r\n                &nbsp;Enact\r\n            </button>\r\n        }\r\n        {props.children}\r\n    </div>;\r\n}","import React from 'react';\r\nimport { EmoteIcon } from '../World';\r\n\r\nexport const GreetingPanel: React.FC<{\r\n    seed: string,\r\n    changeSeed: (s: string) => void\r\n}> = (props) => {\r\n    return <div>\r\n        <div className=\"col-2\">\r\n            <div>\r\n                <h3>Welcome to the</h3>\r\n                <h2>👽 Alien 🌍 Utopia 🔬 Laboratory</h2>\r\n                <div>\r\n                    Thank you for joining the <select><option>Human</option></select> Cultivation Division of the <strong>🌌&nbsp;Galactic Xenosensation Federation!</strong> Interdimensional petri dish <span style={{whiteSpace:'nowrap'}}>#<input type=\"text\" value={props.seed} onChange={(e) => props.changeSeed(e.currentTarget.value)} maxLength={19} style={{width:'115px', fontFamily:'monospace', fontSize:'11px'}} /></span> is ready for farming.\r\n                </div>\r\n                <p>\r\n                    As a <select><option>Human Emotion Farmer</option></select>, you are required to execute the following duties:\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        Construct <strong>🏠 Buildings</strong> for your <select><option>Human</option></select> subjects.\r\n                    </li>\r\n                    <li>\r\n                        <strong>🛸 Beam In</strong> <select><option>Human</option></select> subjects for cultivation.\r\n                    </li>\r\n                    <li>\r\n                        Harvest your subject's positive <strong>{EmoteIcon['happiness']} Hedons</strong>.\r\n                    </li>\r\n                    <li>\r\n                        Sell the Hedons on the <br/><strong>🌌 Galactic 😨 Emotion 💰 Market</strong>.\r\n                    </li>\r\n                </ul>\r\n                <div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <p>\r\n                    The GXF's records indicate <select><option>Humans</option></select> are a<br/><u>mentally malleable</u> and <u>physically fragile</u> species. Try the following cultivation methods:\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        <strong>🛰️ Scan</strong> your subject's primitive minds for information on what pleases them.\r\n                    </li>\r\n                    <li>\r\n                        <strong>🚿 Brainwash</strong> subjects to change their <strong>🧠&nbsp;Traits</strong>. Try to add Traits that emit more <strong>{EmoteIcon['happiness']}&nbsp;Hedons</strong>.\r\n                    </li>\r\n                    <li>\r\n                        Avoid letting your subjects die or endure pain; this makes <strong>{EmoteIcon['unhappiness']}&nbsp;Antihedons</strong> which are less profitable.\r\n                    </li>\r\n                    <li>\r\n                        Use your knowledge of Traits to modify the farm's <strong>🗳️&nbsp;Government</strong> to maximize Hedon generation.\r\n                    </li>\r\n                    <li>\r\n                        Use the GXF's <strong>🧪 Research Lab</strong> to upgrade your farm, when stocked with <strong>👾 Abducted</strong> subjects.\r\n                    </li>\r\n                </ul>\r\n                <h3>\r\n                    🌌 Galactic Xenosensation Federation <br/>\r\n                    <div className=\"text-right\">\r\n                        <small>\r\n                        {/* <i>THE market leader in corporeal sensations.</i> */}\r\n                        <i>1 trillion sensations. 100% organic. 100% gourmet.</i>\r\n                        </small>\r\n                    </div>\r\n                </h3>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nexport const LoadGameMenu: React.FC<{}> = (props) => {\r\n    return <div>\r\n        \r\n    </div>\r\n}","import React, { useState } from 'react';\r\nimport { GameStorageInstance } from '../GameStorage';\r\n\r\nexport const MainMenu: React.FC<{\r\n    startGame: () => void,\r\n    loadGame: (slot:number) => void\r\n}> = (props) => {\r\n    const [view, setView] = useState<'main'|'showslots'>('main');\r\n    const continueID = GameStorageInstance.HasContinueGame();\r\n    const slots = GameStorageInstance.GetGameSlots();\r\n    return <div>\r\n        <h1 className=\"text-center\">👽 Alien 🌍 Utopia 🔬 Lab</h1>\r\n        {\r\n            (view === 'main') ? <div>\r\n                {\r\n                    continueID != null ? <div className=\"text-center\">\r\n                        <button className=\"callout button f-size-15em\" onClick={() => props.loadGame(continueID)}>\r\n                        🧫 Continue Game\r\n                        </button>\r\n                    </div>: null\r\n                }\r\n                <div className=\"text-center\">\r\n                    <button className=\"callout button f-size-15em\" onClick={() => props.startGame()}>\r\n                    🛸 Start New Game\r\n                    </button>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <button className=\"callout button f-size-15em\" onClick={() => setView('showslots')} disabled={slots.every(x => x.brief == null)}>\r\n                    🗂️ Load Game\r\n                    </button>\r\n                </div>\r\n            </div> : <div className=\"card-parent vertical load-menu pad-4p\">\r\n                {\r\n                    slots.map(x => <div key={x.id} className=\"card marg-b-20\">\r\n                        <button disabled={x.brief == null} className=\"\" onClick={() => {\r\n                            if (x.brief)\r\n                                props.loadGame(x.id);\r\n                        }}>\r\n                        {\r\n                            x.brief ? <span className=\"f-size-125em\">\r\n                                <strong>{x.brief.Name}</strong>\r\n                                &nbsp;<span>Year {x.brief.Age.year}</span>\r\n                                &nbsp;<span>{x.brief.Population} 😐</span>\r\n                            </span> : <span className=\"f-size-125em\">\r\n                                Slot {x.id}\r\n                            </span> \r\n                        }\r\n                        </button>\r\n                    </div>)\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport class RobotArm extends React.Component<{\r\n    tool: string,\r\n    classN: string\r\n}, {\r\n\r\n}> {\r\n    render(){\r\n        const style = {};\r\n        return <svg width=\"100\" height=\"300\" xmlns=\"http://www.w3.org/2000/svg\" style={style} className={this.props.classN+\" robot-arm\"}>\r\n        <g>\r\n         <title>robotarm</title>\r\n         <rect fill=\"transparent\" id=\"canvas_background\" height=\"302\" width=\"102\" y=\"-1\" x=\"-1\"/>\r\n         <g display=\"none\" overflow=\"visible\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" id=\"canvasGrid\">\r\n          <rect fill=\"url(#gridpattern)\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\"/>\r\n         </g>\r\n        </g>\r\n        <g>\r\n         <title>Layer 1</title>\r\n         <rect id=\"svg_2\" height=\"200\" width=\"48\" y=\"91.63545\" x=\"25\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#BBBBBB\"/>\r\n         <ellipse ry=\"48\" rx=\"48\" id=\"svg_1\" cy=\"50\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#999999\"/>\r\n         <ellipse ry=\"20\" rx=\"20\" id=\"svg_3\" cy=\"50\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#444444\"/>\r\n         <ellipse ry=\"48\" rx=\"48\" id=\"svg_4\" cy=\"250\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#999999\"/>\r\n        <ellipse ry=\"20\" rx=\"20\" id=\"svg_5\" cy=\"250\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#444444\">{this.props.tool}</ellipse>\r\n            \r\n        </g><text y=\"250\" x=\"-20\" fontSize=\"4em\">{this.props.tool}</text>\r\n       </svg>\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { IPlayerData, IPlayerTechProgress, ITechInfo, Tech, TechData, TechProgress } from \"../simulation/Player\";\r\nimport { release, setResearch } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { RobotArm } from \"../widgets/RobotArm\";\r\nimport './research.css';\r\n\r\nfunction renderTech(tech: ITechInfo, techProgress: TechProgress, currentlyResearchingTech: Tech|undefined, setResearch: (t: Tech) => void){\r\n  const unstarted = techProgress[tech.tech] == null;\r\n  const progress = unstarted ? 0 : techProgress[tech.tech].researchPoints;\r\n  const total = tech.techPoints;\r\n  const style = {width: (Math.min(progress/total*100, 100))+'%'};\r\n  const complete = progress >= total;\r\n  const isCurrent = currentlyResearchingTech === tech.tech;\r\n  const state: '⭕️'|'✅'|'🔬' = complete ? '✅' : isCurrent ? '🔬' : '⭕️';\r\n  const rootClassName = isCurrent ? 'active': 'inactive';\r\n  return <div className={\"card-parent \"+rootClassName} key={tech.tech}>\r\n    <button className=\"card button\" onClick={() => setResearch(tech.tech)}>\r\n      <strong>{tech.name}</strong>\r\n      <strong className=\"pull-r f-size-125em\">{state}</strong>\r\n      <div>\r\n        {tech.description}\r\n      </div>      \r\n      <div className=\"bar f-size-12 h-12\">\r\n          <div className=\"bar-inner text-center\" style={style}>\r\n          </div>\r\n          {progress}/{total} tech\r\n      </div>\r\n    </button>\r\n  </div>\r\n}\r\n\r\nconst tools = [\r\n'📡',\r\n'🗜️',\r\n'🔬',\r\n'💉',\r\n'🔎',\r\n'🧼',\r\n'🧲',\r\n'🎥',\r\n'🔧',\r\n];\r\nfunction loop(lastI: number){\r\n  let i = lastI + 1;\r\n  if (i === tools.length)\r\n    i = 0;\r\n  return i;\r\n}\r\nexport const ResearchPanel: React.FC<{}> = () => {\r\n  const abductedBeanKeys = useAppSelector(x => x.world.alien.abductedBeanKeys);\r\n  const techProgress = useAppSelector(x => x.world.alien.techProgress);\r\n  const currentTech = useAppSelector(x => x.world.alien.currentlyResearchingTech);\r\n  const dispatch = useAppDispatch();\r\n  const [tool1, setTool1] = useState(0);\r\n  const [tool2, setTool2] = useState(3);\r\n  const [tool3, setTool3] = useState(2);\r\n  const [tool4, setTool4] = useState(1);\r\n  useEffect(() => {\r\n    const interval = window.setInterval(() => {\r\n      if (Math.random() < .51)\r\n        setTool1(loop(tool1));\r\n      if (Math.random() < .51)\r\n        setTool2(loop(tool2));\r\n      if (Math.random() < .51)\r\n        setTool3(loop(tool3));\r\n      if (Math.random() < .51)\r\n        setTool4(loop(tool4));\r\n    }, 1000);\r\n    return () => {\r\n      window.clearInterval(interval);\r\n    }\r\n  });\r\n  const techs = Object.values(TechData);\r\n  return <div>\r\n      <div className=\"col-2\">\r\n        <div>\r\n          <h2>Research 🧪 Lab</h2>\r\n          <div className=\"vertical\">\r\n            {\r\n              techs.map((t) => renderTech(t, techProgress, currentTech, (t) => dispatch(setResearch({t: t}))))\r\n            }\r\n          </div>\r\n        </div>\r\n      <div className=\"vertical\">\r\n        <div>\r\n          <div className=\"robot\">\r\n            🤖\r\n            <RobotArm classN=\"far-left\" tool={tools[tool1]}></RobotArm>\r\n            <RobotArm classN=\"left\" tool={tools[tool2]}></RobotArm>\r\n            <RobotArm classN=\"near-right\" tool={tools[tool3]}></RobotArm>\r\n            <RobotArm classN=\"far-right\" tool={tools[tool4]}></RobotArm>\r\n          </div>\r\n        </div>\r\n        <div className=\"h-42em\">\r\n          {\r\n            abductedBeanKeys.map((b) => {\r\n              return <span key={b} className=\"victim bean triangle shake\">😨</span>\r\n            })\r\n          }\r\n        </div>\r\n\r\n        <div className=\"text-center\">\r\n          Currently probing {abductedBeanKeys.length} beings for {abductedBeanKeys.length} tech a day\r\n          <p>\r\n            <small>1 tech per research subject per day</small>\r\n          </p>\r\n        </div>\r\n        {\r\n          abductedBeanKeys.length > 0 ? <div className=\"text-right\">\r\n            <ConfirmButton className=\"callout\" onConfirm={() => {dispatch(release())}} confirmText=\"-1 Research Subject?\">\r\n            🎈 Release Research Subject\r\n            </ConfirmButton>\r\n          </div> : null\r\n        }\r\n      </div>\r\n    </div>\r\n    <div>\r\n\r\n    </div>\r\n  </div>\r\n}","import React, { ReactElement, useState } from \"react\";\r\nimport { BeliefsAll, IBeliefData, SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { BeliefWidget } from \"./BeliefRow\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\nexport const TraitsReport: React.FC = () => {\r\n  const beliefInventory = useAppSelector(x => x.world.alien.beliefInventory);\r\n  const seenBeliefs = useAppSelector(x => x.world.alien.seenBeliefs);\r\n  const [hoveredBelief, setHoveredBelief] = useState<TraitBelief>();\r\n  const beliefs: IBeliefData[] = [];\r\n  Object.keys(seenBeliefs).forEach((key) => {\r\n    if (SecondaryBeliefData[key as TraitBelief] != null){\r\n      beliefs.push(SecondaryBeliefData[key as TraitBelief]);\r\n    }\r\n  });\r\n  beliefs.sort((a, b) => a.noun.localeCompare(b.noun));\r\n  return (\r\n    <div className=\"vertical\">\r\n      <div className=\"pad-4p\">\r\n        <h2>Subject 🧠 Traits</h2>\r\n      </div>\r\n      <div className=\"col-2-30-60\">\r\n        <div>\r\n          <div className=\"scroll\">\r\n            <div className=\"scoll-sticky-h\">\r\n              <strong>Trait Inventory</strong>\r\n            </div>\r\n            {\r\n              beliefInventory.length < 1 ? <div>\r\n                No Traits! <br/>\r\n                😵 Brainwash your subjects  <br/>\r\n                or buy from the 🛍️ Market\r\n                </div> : beliefInventory.map((x) => <div key={x.trait}>\r\n                      <div>\r\n                        <strong>\r\n                          {SecondaryBeliefData[x.trait].icon} {SecondaryBeliefData[x.trait].noun}\r\n                        </strong>\r\n                      </div>\r\n                      <div>\r\n                        This can be implanted {x.charges} more times\r\n                      </div>\r\n                    </div>)\r\n            }\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"modal-scroll-v\">\r\n            <div className=\"sticky-t-0\">\r\n              <strong>Discovered {beliefs.length} of {BeliefsAll.length} Traits</strong>\r\n            </div>\r\n            {\r\n              beliefs.length < 1 ? <div>\r\n                No Traits! <br/>\r\n                🛰️ Scan some of your subjects.\r\n              </div> : beliefs.map((x) => <BeliefWidget key={x.noun} data={x} cost={0}\r\n              titleView={<strong>{x.noun}</strong>}\r\n              bottomView={<span></span>}\r\n            ></BeliefWidget>)\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { UFO } from \"../simulation/City\";\r\nimport { hex_to_pixel, origin_point, transformPoint } from \"../simulation/Geography\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { WorldSfxInstance } from \"../WorldSound\";\r\n\r\n\r\nexport const AnimatedUFO2:  React.FC<{\r\n    ufoKey: number,\r\n    cityKey: number\r\n}> = (props) => {\r\n    const [showBeam, setShowBeam] = useState(false);\r\n    const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n    const ufo = useAppSelector(state => state.world.ufos.byID[props.ufoKey]);\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShowBeam(true);\r\n            WorldSfxInstance.play('teleport');\r\n            setTimeout(() => {\r\n                setShowBeam(false)\r\n            }, 1800);\r\n        }, 1800);\r\n    }, []);\r\n    let style = {\r\n        ...transformPoint(hex_to_pixel(city.hex_size, city.petriOrigin, ufo.point))\r\n    };\r\n    return <span style={style} className=\"ufo\">\r\n        🛸\r\n        {showBeam ? <span className=\"beam\"></span> : null}\r\n    </span>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { CityBook, HexPoint, hex_to_pixel, IBuilding, Point, transformPoint } from \"../simulation/Geography\";\r\nimport { doSelectBuilding, doSelectHex } from \"../state/features/selected.reducer\";\r\nimport { magnetChange, selectBuildingsByCity, selectCity, selectCityBuildingByHex } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { PetriBuilding, UIBuilding } from \"./Building\";\r\nimport { hex_style } from \"./WorldTile\";\r\n\r\n/**\r\n * redux building selector\r\n * @param props \r\n * @returns \r\n */\r\nexport const HexPetriBuilding2: React.FC<{\r\n    cityKey: number,\r\n    hex: HexPoint\r\n}> = (props) => {\r\n    const building = useAppSelector(state => selectCityBuildingByHex(state.world, props.cityKey, `${props.hex.q},${props.hex.r}`));\r\n    const city = useAppSelector(state => selectCity(state.world, props.cityKey));\r\n    if (building)\r\n        return <PetriBuilding city={city} building={building}></PetriBuilding>\r\n    else return null;\r\n}\r\n\r\nexport const PetriHex: React.FC<{\r\n    cityKey: number,\r\n    buildingKey: number|undefined,\r\n    hex: HexPoint,\r\n    hexString: string,\r\n    xy: Point,\r\n    i: number\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const selected = useAppSelector(state => state.selected.selectedHexKey === props.hexString);\r\n    const extraClasses = selected ? 'hex-selected' : ''; \r\n    return <div className={\"hex \"+extraClasses}\r\n        key={props.i}\r\n        style={{ ...hex_style, ...transformPoint(props.xy) }}\r\n        onMouseEnter={(e) => { dispatch(magnetChange({cityKey: props.cityKey, px: props.xy})) }}\r\n        onClick={(e) => {\r\n            if (props.buildingKey != null)\r\n                dispatch(doSelectBuilding({cityKey: props.cityKey, buildingKey: props.buildingKey, hex: props.hex}));\r\n            else \r\n                dispatch(doSelectHex({cityKey: props.cityKey, hex: props.hex})); \r\n            e.stopPropagation(); \r\n            return false; }}>\r\n            {props.children}\r\n    </div>\r\n\r\n}\r\n\r\nexport const PetriHexes2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n    const hexes = useAppSelector(state => state.world.cities.byID[props.cityKey]?.hexes);\r\n    return <>{hexes.map((hex, i) => {\r\n        const xy = hex_to_pixel(city.hex_size, city.petriOrigin, hex);\r\n        const hexStr = hex.q+','+hex.r;\r\n        const buildingKey: number|undefined = city.buildingMap[hexStr];\r\n        return <PetriHex i={i} hex={hex} xy={xy} hexString={hexStr} cityKey={props.cityKey} buildingKey={buildingKey} key={hexStr}>\r\n            <HexPetriBuilding2 cityKey={props.cityKey} hex={hex}></HexPetriBuilding2>\r\n        </PetriHex>\r\n    })}</>\r\n}\r\nexport const SocialBuildings: React.FC<{\r\n    city: ICity,\r\n    onClickBuilding: (b: IBuilding) => void;\r\n}> = (props) => {\r\n    const buildings = useAppSelector(state => selectBuildingsByCity(state.world, props.city.key));\r\n    return <>\r\n        {\r\n            buildings.map((x) => <div key={x.key} className=\"building-node\" onClick={() => props.onClickBuilding(x)}>\r\n                <UIBuilding cityName={props.city.name} building={x} style={{}} getStyle={() => {return{}}}></UIBuilding>\r\n            </div> )\r\n        }\r\n    </>\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Live } from \"../events/Events\";\r\nimport { HexPoint, Point } from \"../simulation/Geography\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nexport const Magnet: React.FC<{\r\n    pickupMagnetPoint: Live<Point|undefined>\r\n}> = (props) => {\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const [point, setPoint] = useState(props.pickupMagnetPoint.get);\r\n    const updatePoint = (p: Point|undefined) => {\r\n        setPoint(p);\r\n        if (el.current && p)\r\n            el.current.style.transform = `translate(${p.x}px, ${p.y}px)`;\r\n    }\r\n    useEffect(() => {\r\n        props.pickupMagnetPoint.onChange.subscribe(updatePoint);\r\n        updatePoint(props.pickupMagnetPoint.get);\r\n        return () => props.pickupMagnetPoint.onChange.unsubscribe(updatePoint)\r\n    });\r\n\r\n    if (point){\r\n        return <div className=\"magnet\" ref={el}>🧲</div>\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const Magnet2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const magnetPoint = useAppSelector(state => state.world.cities.byID[props.cityKey].pickupMagnetPoint);\r\n\r\n    if (magnetPoint){\r\n        return <div className=\"magnet\" style={{transform: `translate(${magnetPoint.x}px, ${magnetPoint.y}px)`}}>🧲</div>\r\n    } else {\r\n        return null;\r\n    }\r\n}","import React from \"react\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { BeanGetFace, BeanGetSpeech } from \"../simulation/Bean\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { RootState } from \"../state/state\";\r\nimport { GoodIcon } from \"../World\";\r\n\r\ninterface AnimatedBeanP {\r\n  cityKey: number;\r\n  beanKey: number;\r\n  sitStill?: boolean;\r\n  static?: boolean;\r\n}\r\n\r\nfunction BeanIsBuying(bean: IBean){\r\n  return bean.actionData.act == 'buy' && bean.actionData.good != 'shelter';\r\n}\r\n\r\nexport const selectBeanAnimation = (state: RootState, beanKey: number) => {\r\n  const bean = state.world.beans.byID[beanKey];\r\n  const working = bean.actionData.act === 'work';\r\n  return {\r\n    speech: BeanGetSpeech(bean),\r\n    face: BeanGetFace(bean),\r\n    good: BeanIsBuying(bean) ? GoodIcon[bean.actionData.good || 'food'] : undefined,\r\n    classes: [bean.job, bean.ethnicity, bean.actionData.act != 'travel' || bean.lifecycle === 'dead' ? 'paused' : '', ].join(' '),\r\n    animationClasses: ['bean-walker', working ? 'spin' : '', ].join(' ')\r\n  }\r\n}\r\n\r\nexport const AnimatedBean: React.FC<AnimatedBeanP> = (props) => {\r\n  const state = useAppSelector(st => selectBeanAnimation(st, props.beanKey));\r\n  const isSelected = useAppSelector(st => st.selected.selectedBeanKey === props.beanKey);\r\n  const classes = ['bean interactable', state.classes, props.sitStill ? '' : state.animationClasses, isSelected ? 'selected' : ''].join(' ');\r\n\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <span className={classes}\r\n      onClick={(e) => {e.stopPropagation(); dispatch(doSelectBean({cityKey: props.cityKey, beanKey: props.beanKey})) }}\r\n    >\r\n      {state.face} {state.good ? <span className=\"purchase\">\r\n        <span className=\"money\">💸</span>\r\n        <span className=\"purchase-good\">{state.good}</span>\r\n      </span>: null} {state.speech ? <span className=\"speech\">\r\n        <span className=\"\">{state.speech}</span>\r\n      </span>: null}\r\n    </span>\r\n  )\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { SfxContext } from \"../App\";\r\nimport { UFO, Pickup } from \"../simulation/City\";\r\nimport { transformPoint, hex_to_pixel } from \"../simulation/Geography\";\r\nimport { IPickup } from \"../simulation/Pickup\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { EmoteIcon } from \"../World\";\r\n\r\nexport const AnimatedPickup: React.FC<{\r\n    pickupKey: number\r\n}> = (props) => {\r\n    const [played, setPlayed] = useState(false);\r\n    const pickup = useAppSelector(state => state.world.pickups.byID[props.pickupKey]);\r\n    const sfx = React.useContext(SfxContext);\r\n    useEffect(() => {\r\n        if (!played && sfx){\r\n            sfx.play('drop');\r\n            setPlayed(true);\r\n        }\r\n    })\r\n    return <span className=\"pickup bob\">\r\n        {EmoteIcon[pickup.type]}\r\n    </span>\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { MoverContext } from \"../App\";\r\nimport { LiveList } from \"../events/Events\";\r\nimport { Pickup } from \"../simulation/City\";\r\nimport { IAccelerator } from \"../simulation/Geography\";\r\nimport { MoverType } from \"../simulation/MoverBus\";\r\nimport { selectCityBeanIDs } from \"../state/features/world.reducer\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { AnimatedBean } from \"./AnimatedBean\";\r\nimport { AnimatedPickup } from \"./AnimatedPickup\";\r\n\r\nexport const Mover: React.FC<{\r\n    moverType: MoverType,\r\n    moverKey: number,\r\n}> = (props) => {\r\n    const mover = React.useContext(MoverContext);\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const onMove = (p: IAccelerator) => {\r\n        if (el.current && p)\r\n            el.current.style.transform = `translate(${p.point.x}px, ${p.point.y}px)`;\r\n    }\r\n    useEffect(() => {\r\n        const pubsub = mover.Get(props.moverType, props.moverKey);\r\n        pubsub.subscribe(onMove);\r\n        if (pubsub.current)\r\n            onMove(pubsub.current);\r\n        return () => mover.Get(props.moverType, props.moverKey).unsubscribe(onMove)\r\n    }, []);\r\n    return <div ref={el}>\r\n        {props.children}\r\n    </div>\r\n}\r\n\r\nexport const PetriBeanList: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const beanKeys = useAppSelector(state => selectCityBeanIDs(state.world, props.cityKey));\r\n    return <>\r\n        {\r\n            beanKeys.map((beanKey: number) => {\r\n                return <Mover moverKey={beanKey} key={beanKey} moverType='bean'>\r\n                    <AnimatedBean cityKey={props.cityKey} beanKey={beanKey}></AnimatedBean>\r\n                </Mover>\r\n            })\r\n        }\r\n    </>;\r\n}\r\n\r\n\r\nexport const PickupList2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const list = useAppSelector(state => state.world.cities.byID[props.cityKey].pickupKeys);\r\n    return <>\r\n        {\r\n            list.map((pKey: number) => {\r\n                return <Mover moverKey={pKey} key={pKey} moverType='pickup'>\r\n                    <AnimatedPickup pickupKey={pKey}></AnimatedPickup>\r\n                </Mover>\r\n            })\r\n        }\r\n    </>;\r\n}","import React from \"react\";\r\nimport { HexSizeR, polarToPoint, transformPoint } from \"../simulation/Geography\";\r\nimport { magnetChange } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { AnimatedUFO2 } from \"./AnimatedUFO2\";\r\nimport { PetriHexes2 } from \"./Buildings\";\r\nimport { Magnet2 } from \"./Magnet\";\r\nimport { PetriBeanList, PickupList2 } from \"./Mover\";\r\n\r\nexport const hex_style = {\r\n  width: HexSizeR + 'px', \r\n  height: HexSizeR + 'px', \r\n  top: (-HexSizeR/2)+'px',\r\n  left: (-HexSizeR/2)+'px'\r\n}\r\n\r\ninterface WorldTilePs {\r\n  // tileKey: number;\r\n  cityKey: number;\r\n  onClick: () => void;\r\n}\r\nexport const WorldTile2: React.FC<WorldTilePs> = (props) => {\r\n\r\n  // const tile = useAppSelector(state => state.world.tiles.byID[props.tileKey]);\r\n  const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n  const ufos = useAppSelector(state => state.world.cities.byID[props.cityKey].ufoKeys);\r\n  const spotlight = useAppSelector(state => state.world.spotlightEvent);\r\n  const spotlightBean = useAppSelector(state => {\r\n    if (state.world.spotlightEvent && state.world.spotlightEvent.beanKey)\r\n      return state.world.beans.byID[state.world.spotlightEvent.beanKey];\r\n    return undefined;\r\n  });\r\n\r\n  const dispatch = useAppDispatch()\r\n  const mtn_transforms: { transform: string }[] = [];\r\n\r\n  const mtnRadius = city.petriRadius - 20;\r\n  for (let i = 0; i < 360 / 5; i++) {\r\n    const az = i * 5 * Math.PI / 180;\r\n    const pt = polarToPoint({ r: mtnRadius, az: az });\r\n    pt.x += city.petriRadius; pt.y += city.petriRadius;\r\n    mtn_transforms.push(transformPoint(pt));\r\n  }\r\n  const deaths = city.deadBeanKeys.map((bk: number, i) => {\r\n    return (\r\n      <span key={i} className=\"dead\" style={{ left: (i * 10) + 'px' }}>⚰️</span>\r\n    )\r\n  });\r\n  const style = {\r\n    height: (city.petriRadius * 2) + 'px',\r\n    width: (city.petriRadius * 2) + 'px',\r\n  }\r\n  return (\r\n    <div className=\"tile\" onClick={() => props.onClick()} onMouseLeave={() => { dispatch(magnetChange({ cityKey: city.key })) }} style={style}>\r\n      <svg style={{ width: '100%', height: '100%' }} className=\"petri-base\">\r\n        <circle cx=\"50%\" cy=\"50%\" r=\"50%\" stroke=\"grey\" fill=\"rgba(255, 255, 255, 1)\" />\r\n      </svg>\r\n      <PetriHexes2 cityKey={city.key}></PetriHexes2>\r\n      {mtn_transforms.map((x, i) => {\r\n        return <span key={i} style={x} className=\"mtn\">⛰️</span>\r\n      })}\r\n      <PickupList2 cityKey={props.cityKey}></PickupList2>\r\n      <PetriBeanList cityKey={props.cityKey}></PetriBeanList>\r\n      {ufos.map((uK: number, i: number) => {\r\n        return <AnimatedUFO2 ufoKey={uK} key={uK} cityKey={city.key}></AnimatedUFO2>\r\n      })}\r\n      <Magnet2 cityKey={props.cityKey}></Magnet2>\r\n      <svg style={{ width: '100%', height: '100%' }} className=\"petri-lid\">\r\n        <circle cx=\"50%\" cy=\"50%\" r=\"50%\" stroke=\"grey\" fill=\"rgba(255, 255, 255, 0.2)\" />\r\n      </svg>\r\n      {/* {\r\n        (spotlight && spotlightBean && spotlight.point) ? <AnimatedSpotlight event={spotlight} bean={bean}></AnimatedSpotlight>: null\r\n      } */}\r\n    </div>\r\n  )\r\n}","import { ReactComponent } from \"*.svg\";\r\nimport React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { NarrativeBeliefData, PrimaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { Trait, TraitIcon } from \"../World\";\r\n\r\nexport class CardButton extends React.Component<{\r\n    icon: string,\r\n    name: string,\r\n    onClick?: () => void,\r\n    title?: string,\r\n    subtext?: string,\r\n    thin?: boolean,\r\n    singleLine?: boolean,\r\n    disabled?: boolean\r\n}>{\r\n    render(){\r\n        let classes = \"card button\";\r\n        if (this.props.thin) classes += ' thin';\r\n        if (this.props.singleLine) classes += ' single';\r\n        return <button className={classes} title={this.props.title} onClick={() => {\r\n            if (this.props.onClick) this.props.onClick()\r\n        }} type=\"button\" disabled={this.props.disabled}>\r\n            {this.props.icon} {this.props.name}\r\n            {\r\n                (this.props.subtext != null) ? <small>{this.props.subtext}</small> : null\r\n            }\r\n        </button>\r\n    }\r\n}\r\n\r\nexport function TraitToCard(bean: IBean, trait: Trait, onClick?: () => void){\r\n    switch(trait){\r\n        case 'trad':\r\n        case 'prog':\r\n        case 'ego':\r\n        case 'state':\r\n            return <CardButton icon={TraitIcon[trait]} title={PrimaryBeliefData[trait].description} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        case 'fresh':\r\n        case 'sick':\r\n        case 'hungry':\r\n        case 'starving':\r\n        case 'stuffed':\r\n        case 'homeless':\r\n        case 'rested':\r\n        case 'circle':\r\n        case 'square':\r\n        case 'triangle':\r\n        case 'sane':\r\n        case 'disturbed':\r\n        case 'stressed':\r\n            return <CardButton icon={TraitIcon[trait]} title={keyToName[trait]} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        case 'noFaith':\r\n        case 'rocket':\r\n        case 'dragon':\r\n        case 'music':\r\n            return <CardButton icon={TraitIcon[trait]} title={NarrativeBeliefData[trait].description} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        default:\r\n            return null;\r\n    }\r\n} ","import React from \"react\";\r\nimport { PlayerResources, triadToString } from \"../Game\";\r\n\r\nexport class CostSmall extends React.Component<{\r\n    cost: PlayerResources,\r\n    rider?: string,\r\n    qty?: number\r\n}>{\r\n\r\n    render(){\r\n        return <small>\r\n            {triadToString(this.props.cost, '-', this.props.qty)} {this.props.rider}\r\n        </small>\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { Act, ActivityDisplay, ActivityIcon, GetPriorities, IBean } from \"../simulation/Agent\";\r\nimport { BeanGetFace } from \"../simulation/Bean\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { IPlayerData, PlayerCanAfford } from \"../simulation/Player\";\r\nimport { doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { abduct, scan, vaporize } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean, selectSelectedCity } from \"../state/state\";\r\nimport { CardButton, TraitToCard } from \"../widgets/CardButton\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { EmoteIcon, IHappinessModifier, TraitIcon } from \"../World\";\r\nimport './BeanPanel.css';\r\n\r\n\r\ninterface BeanPanelP{\r\n    city: ICity,\r\n    bean: IBean,\r\n    alien: IPlayerData;\r\n    brainwash: () => void;\r\n}\r\nfunction happyTable(mods: IHappinessModifier[]){\r\n    return mods.filter((y) => y.mod != 0).map((x, i) => {\r\n        return <tr key={i}>\r\n            <td className=\"small text-right\">{x.reason}</td>\r\n            <td className=\"small\">{Math.round(x.mod * 100)}%</td>\r\n        </tr>\r\n    });\r\n}\r\nfunction hedonTable(bean: IBean){\r\n    return Object.keys(bean.happiness.all).map((x, i) => {\r\n        return <tr key={i}>\r\n            <td className=\"small text-right\">{bean.happiness.all[x]} {bean.happiness.all[x] >= 0 ? EmoteIcon['happiness'] : EmoteIcon['unhappiness']} from </td>\r\n            <td className=\"small\">{x}</td>\r\n        </tr>\r\n    });\r\n}\r\nfunction actDurations(bean: IBean){\r\n    const acts = Object.keys(bean.activity_duration).map((x) => x as Act);\r\n    acts.sort((a, b) => bean.activity_duration[b] - bean.activity_duration[a]);\r\n    return acts;\r\n}\r\nfunction beliefTable(beliefs: TraitBelief[]): React.ReactNode {\r\n    return beliefs.map((b, i) => {\r\n        const classes = 'belief-name shadow text-left '+SecondaryBeliefData[b].rarity;\r\n        return <table className=\"width-100p\" key={b+i}><tbody><tr>\r\n        <th className={classes}>\r\n            {SecondaryBeliefData[b].icon} {SecondaryBeliefData[b].adj}\r\n        </th>\r\n        <td className=\"text-right\">\r\n            {(SecondaryBeliefData[b].idealPro || []).map(y => <span key={y}>+{TraitIcon[y]}</span>)}\r\n            {(SecondaryBeliefData[b].idealCon || []).map(y => <span key={y}>-{TraitIcon[y]}</span>)}\r\n        </td>\r\n    </tr><tr><td className=\"small text-center\" colSpan={2}>{\r\n        SecondaryBeliefData[b].description ? SecondaryBeliefData[b].description?.split(';').map((x, i) => <div key={i}>{x}</div>) : null\r\n    }</td></tr></tbody></table>});\r\n}\r\nfunction renderInner(scanned: boolean, innerView: string, bean: IBean, city: ICity, alien: IPlayerData){\r\n    if (!scanned){\r\n        return <div className=\"width-100p text-center\">\r\n            <small>\r\n                Subject needs a Scan to reveal their thoughts\r\n            </small>\r\n        </div>\r\n    }\r\n    switch(innerView){\r\n        case 'beliefs':\r\n            return scanned ? beliefTable(bean.beliefs) : null\r\n        case 'feelings':\r\n            return <table className=\"width-100p\"><tbody>\r\n                {scanned ? hedonTable(bean) : null}\r\n                </tbody>\r\n            </table>\r\n        default:\r\n        case 'priorities':\r\n            return <table className=\"width-100p\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            Currently {ActivityDisplay(bean.actionData)}\r\n                        </td>\r\n                    </tr>\r\n                    {\r\n                        GetPriorities(bean, 'abc', city, alien.difficulty).values.map((x) => {\r\n                            return <tr key={`p-${x.value.act}-${x.value.good}`}>\r\n                                <td>\r\n                                {x.priority.toFixed(2)} {ActivityIcon(x.value)}\r\n                                </td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                    {\r\n                        actDurations(bean).filter((x) => bean.activity_duration[x] > 0).map((x) => {\r\n                            const act = x as Act;\r\n                            return <tr key={act}>\r\n                                <td>{x}</td>\r\n                                <td>\r\n                                    {\r\n                                        (bean.activity_duration[act] / 1000).toFixed(1)\r\n                                    }s\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n    }\r\n}\r\nfunction renderTraits(scanned: boolean, bean: IBean, alien: IPlayerData, brainwash: () => void, scan: () => void){\r\n    if (scanned){\r\n        return <div>\r\n            <div className=\"card-parent\">\r\n                {TraitToCard(bean, bean.ethnicity, undefined)}\r\n                {TraitToCard(bean, bean.faith, brainwash)}\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                {\r\n                    bean.beliefs.map((b) => <CardButton key={b} icon={SecondaryBeliefData[b].icon} title={SecondaryBeliefData[b].adj} name='' thin={true} singleLine={true} onClick={() => {}}></CardButton>)\r\n                }\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                {TraitToCard(bean, bean.food, undefined)}\r\n                {TraitToCard(bean, bean.stamina, undefined)}\r\n                {TraitToCard(bean, bean.health, undefined)}\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <div className=\"card-parent\">\r\n            <CardButton icon=\"🛰️\" name=\"Scan\" subtext=\"-Energy +Info\" onClick={scan} disabled={!PlayerCanAfford(alien, alien.difficulty.cost.bean.scan)}></CardButton>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport const BeanPanel: React.FC<BeanPanelP> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const [faceOverride, setFaceOverride] = useState<string|undefined>(undefined);\r\n    const [innerView, setInnerView] = useState<'priorities'|'feelings'|'beliefs'>('beliefs');\r\n    const alien = useAppSelector(state => state.world.alien);\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const city = useAppSelector(selectSelectedCity);\r\n    function _resetFace(){\r\n        setTimeout(() => {\r\n            setFaceOverride(undefined);\r\n        }, 5000);\r\n    }\r\n    if (!bean || !city) \r\n        return null;\r\n    const classes = bean.job + ' ' + bean.ethnicity;\r\n    return (                \r\n    <div className=\"vertical bean-panel\">\r\n        <div className=\"bean-panel-header\">\r\n            <div>\r\n                <b>{bean.name}&nbsp;\r\n                {\r\n                    city ? <small> of {city.name} </small>\r\n                    : null\r\n                }\r\n                </b>\r\n                <button type=\"button\" className=\"pull-r\" onClick={() => {\r\n                    dispatch(doSelectNone())\r\n                }} >❌</button>\r\n            </div>\r\n            <div className=\"bean-view\">                \r\n                <span className={classes+\" bean\"}>\r\n                    {\r\n                        faceOverride === undefined ? BeanGetFace(bean) : faceOverride\r\n                    }\r\n                </span>\r\n            </div>\r\n            <div className=\"horizontal\">\r\n                <span className=\"text-center\">\r\n                    💰 ${bean.cash.toFixed(2)}\r\n                </span>\r\n                <span className=\"text-center\">\r\n                    🙂 {Math.round(bean.lastHappiness)}%\r\n                </span>\r\n                <span className=\"text-center\">\r\n                    {Math.round(bean.happiness.flatAverage)} {EmoteIcon['happiness']} /day\r\n                </span>\r\n            </div>\r\n            {renderTraits(alien.scanned_bean[bean.key], bean, alien, () => {\r\n                dispatch(brainwash())\r\n            }, () => {\r\n                dispatch(scan({beanKey: bean.key}));\r\n                setFaceOverride('😨');\r\n                _resetFace();\r\n            })}\r\n        </div>\r\n        <div className=\"grow-1 pad-4 bean-panel-content\">\r\n            <div className=\"cylinder blue-orange horizontal\">\r\n                <button type=\"button\" className={innerView=='beliefs'?'active':''} onClick={()=>setInnerView('beliefs')}>\r\n                    😇 Traits\r\n                </button>\r\n                <button type=\"button\" className={innerView=='feelings'?'active':''} onClick={()=>setInnerView('feelings')}>\r\n                    😐 Feelings\r\n                </button>\r\n                <button type=\"button\" className={innerView=='priorities'?'active':''} onClick={()=>setInnerView('priorities')}>\r\n                    💪 Priorities\r\n                </button>\r\n            </div>\r\n            {renderInner(alien.scanned_bean[bean.key], innerView, bean, city, alien)}\r\n        </div>\r\n        <div className=\"bean-action-card-parent\">\r\n            <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\" onClick={() => {\r\n                    props.brainwash()\r\n                }}\r\n                    title=\"Rewrite one of this being's traits\"\r\n                >😵 Brainwash\r\n                    <small>-Sanity +-Trait</small>\r\n                </button>\r\n            </div>\r\n            {/* <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\"  onClick={() => brainwash()}  disabled={true}\r\n                    title=\"Give this being food or meds or cash\">\r\n                    🎁 Gift\r\n                    <small>-Energy +Things</small>\r\n                </button>\r\n            </div> */}\r\n            <div className=\"card-parent\">\r\n                {/* <button type=\"button\" className=\"button card\" onClick={scan} disabled={true}\r\n                    title=\"Steal a bit of this being's mind\">\r\n                    🤪 Braindrain\r\n                    <small>-Energy -Sanity</small>\r\n                </button> */}\r\n                <button type=\"button\" className=\"button card\" onClick={() => {\r\n                    dispatch(vaporize({beanKey: bean.key}));\r\n                    setFaceOverride('😨');\r\n                    _resetFace();\r\n                }}\r\n                    disabled={!PlayerCanAfford(alien, alien.difficulty.cost.bean.vaporize)}\r\n                    title=\"Delete this being from the experiment\"\r\n                >\r\n                    ☠️ Vaporize\r\n                    <CostSmall cost={alien.difficulty.cost.bean.vaporize}></CostSmall>\r\n                </button>\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\"\r\n                    disabled={bean.lifecycle != 'alive' || !PlayerCanAfford(alien, alien.difficulty.cost.bean.abduct)}\r\n                    onClick={() => dispatch(abduct({beanKey: bean.key}))}\r\n                    title=\"Remove this being for study\"\r\n                >\r\n                    👾 Abduct for Research\r\n                    <CostSmall cost={alien.difficulty.cost.bean.abduct} rider=\"+Tech\"></CostSmall>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nfunction brainwash(): any {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n","import React from 'react';\r\n\r\nexport const Subtabs: React.FC<{\r\n    additionalClasses?: string,\r\n    active: string,\r\n    options: {icon: string, value: string, text: string, onClick: () => void}[]    \r\n}> = (props) => {\r\n\r\n    return <div className={'horizontal blue-orange cylinder f-size-125em marg-t-20'+(props.additionalClasses||'')}>\r\n        {\r\n            props.options.map((x) => <button type=\"button\" key={x.value} onClick={() => x.onClick()}  className={props.active === x.value ? 'active': ''}>\r\n                {x.icon} {x.text}\r\n            </button>)\r\n        }\r\n    </div>\r\n}","import { ISeller } from \"./Economy\";\r\nimport { TraitGood, GoodToJob } from \"../World\";\r\nimport { Policy } from \"./Politics\";\r\nimport { Government } from \"./Government\";\r\n\r\nexport type EnterpriseType = 'company'|'co-op'|'commune';\r\nexport const EnterpriseTypes: EnterpriseType[] = ['company','co-op','commune'];\r\nexport const EnterpriseTypeIcon: {[e in EnterpriseType]: string} = {\r\n    'company': '🎩', \r\n    'co-op': '🤝', \r\n    'commune': '⚒️'\r\n};\r\n\r\nexport interface IEnterprise extends ISeller{\r\n    key: number;\r\n    cityKey: number;\r\n    enterpriseType: EnterpriseType;\r\n    ownerBeanKey?: number;\r\n}","import React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { Subtabs } from \"../chrome/Subtab\";\r\nimport { IDifficulty } from \"../Game\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { BuildingIcon, BuildingJobIcon, BuildingToGood, BuildingTypes, HexPoint, IBuilding } from \"../simulation/Geography\";\r\nimport { EnterpriseType, EnterpriseTypeIcon, EnterpriseTypes, IEnterprise } from \"../simulation/Institutions\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { BuildingOpenSlots, BuildingUsedSlots } from \"../simulation/RealEstate\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState, selectSelectedBuilding, selectSelectedCity } from \"../state/state\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { beam, build, changeEnterprise, fireBean, selectCity, upgrade } from \"../state/features/world.reducer\";\r\nimport { doSelectCity, doSelectHex, doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { BuildingJobSlot } from \"../simulation/Occupation\";\r\nimport { GoodIcon, TraitGood } from \"../World\";\r\n\r\nexport const BeamButton: React.FC<{\r\n    city: number,\r\n    hex: string,\r\n    difficulty: IDifficulty\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"card-parent\">\r\n    <button className=\"card button\" type=\"button\" onClick={() => dispatch(beam({cityKey: props.city, where: HexStringToHex(props.hex)}))}>\r\n        🛸 Beam In New Subject\r\n        <CostSmall cost={props.difficulty.cost.hex.beam} rider=\"+Subject\"></CostSmall>\r\n    </button>\r\n</div>\r\n}\r\n\r\nexport const HexPanel: React.FC<{\r\n    difficulty: IDifficulty\r\n}> = (props) => {\r\n    const hex = useSelector((state: RootState) => state.selected.selectedHexKey);\r\n    const building = useSelector(selectSelectedBuilding);\r\n    const city = useSelector(selectSelectedCity);\r\n    const dispatch = useAppDispatch();\r\n    if (city && building){\r\n        return <HexBuildingPanel building={building} city={city} difficulty={props.difficulty}></HexBuildingPanel>\r\n    } else if (city && hex){\r\n        const eHex = props.difficulty.cost.emptyHex;\r\n        return <div>\r\n        <div>\r\n            <strong>Empty Lot</strong> in <strong>{city.name}</strong>\r\n            <button type=\"button\" className=\"pull-r\" onClick={() => dispatch(doSelectCity({cityKey: city.key}))} >❌</button>\r\n        </div>\r\n        {/* <div>\r\n            {hex.q}x\r\n            {hex.r}\r\n        </div> */}\r\n        <h3>Build:</h3>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'house'}))}>\r\n                {BuildingIcon['house']} House\r\n                <CostSmall cost={eHex.build.house}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'farm'}))}>\r\n                {BuildingIcon['farm']} Farm\r\n                <CostSmall cost={eHex.build.farm}></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'hospital'}))}>\r\n                {BuildingIcon['hospital']} Hospital\r\n                <CostSmall cost={eHex.build.hospital}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'theater'}))}>\r\n                {BuildingIcon['theater']} Theater\r\n                <CostSmall cost={eHex.build.theater}></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'park'}))}>\r\n                {BuildingIcon['park']} Park\r\n                <CostSmall cost={eHex.build.park}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <h3>Beings:</h3>\r\n        <BeamButton difficulty={props.difficulty} hex={hex} city={city.key}></BeamButton>\r\n    </div>\r\n    } else {\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nexport const HexBuildingPanel: React.FC<{\r\n    building: IBuilding,\r\n    difficulty: IDifficulty,\r\n    city: ICity\r\n}> = (props) => {\r\n    const b = props.building;\r\n    const e = useAppSelector(s => b.enterpriseKey != null ? s.world.enterprises.byID[b.enterpriseKey]: undefined);\r\n    const dispatch = useAppDispatch();\r\n    const free = BuildingOpenSlots(b);\r\n    const hasJobs = b.type != 'park' && b.type != 'nature';\r\n    const hex = `${b.address.q},${b.address.r}`;\r\n    return <div>\r\n        <div>\r\n            <strong>{b.upgraded && hasJobs ? 'Dense ': 'Small '}{keyToName[b.type]}</strong>\r\n            <button type=\"button\" className=\"pull-r\" onClick={() => dispatch(doSelectNone())}>❌</button>\r\n        </div>\r\n        <div className=\"text-right\">\r\n            <small>\r\n            in&nbsp;<strong>{props.city.name}</strong>\r\n            </small>\r\n        </div>\r\n    {\r\n        e != null ? <div>\r\n            <small>\r\n                ${e.cash?.toFixed(2)} from sales today\r\n            </small>\r\n            <EnterpriseListings enterpriseKey={e.key} good={BuildingToGood[b.type]}></EnterpriseListings>\r\n        </div> : null\r\n    }\r\n    {\r\n        b.upgraded && hasJobs ? <div>\r\n            {renderDensityWarning(b.type)}\r\n        </div> : null\r\n    }\r\n    {\r\n        e != null ?  <EnterpriseTypePicker \r\n            enter={e} \r\n            changeEnterprise={(t) => dispatch(changeEnterprise({enterpriseKey: b.key, newType: t}))}>\r\n            </EnterpriseTypePicker> : null\r\n    }\r\n    {\r\n        <WorkerList cityKey={props.city.key} building={b}></WorkerList>\r\n    }\r\n    {\r\n        !hasJobs ? null : <div>\r\n            This {keyToName[b.type]} can support {free.length} more jobs.\r\n            {\r\n                b.upgraded ? null : <span><br/>Upgrade it to add 3 more job slots.</span>\r\n            }\r\n        </div>\r\n    }\r\n    {\r\n        b.upgraded || !hasJobs ? null : <div><div className=\"card-parent\">\r\n                <button className=\"card button\" type=\"button\" onClick={() => dispatch(upgrade({buildingKey: b.key}))}>\r\n                    🛠️ Upgrade\r\n                    <CostSmall cost={props.difficulty.cost.hex.upgrade}></CostSmall>\r\n                </button>\r\n            </div>\r\n            {renderDensityWarning(b.type)}\r\n        </div>\r\n    }\r\n    <BeamButton city={props.city.key} difficulty={props.difficulty} hex={hex}></BeamButton>\r\n    </div>\r\n}\r\n\r\nconst renderDensityWarning = (typ: BuildingTypes) => {\r\n    if (typ === 'house')\r\n    return <>\r\n        <div className=\"text-center\">\r\n        <small>\r\n        🐮 Parochial subjects may emit 👎<br/>when living in dense buildings\r\n        </small>\r\n    </div> \r\n    <div className=\"text-center\">\r\n        <small>\r\n        🍸 Cosmopolitan subjects may emit 👎<br/>when living in small buildings\r\n        </small>\r\n    </div>\r\n    </>;\r\n    else return <div>\r\n\r\n    </div>\r\n}\r\n\r\nexport const WorkerList: React.FC<{\r\n    cityKey: number,\r\n    building: IBuilding\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const beans = useAppSelector(x => props.building.jobs.map((k) => x.world.beans.byID[k]));\r\n    const enterprise = useAppSelector(s => s.world.enterprises.byID[props.building.key]);\r\n    if (beans.length < 0) {\r\n        return <div>No Workers</div>\r\n    }\r\n    return <div>\r\n    <strong>Workers:</strong>\r\n    {\r\n        beans.map((x) => <div key={x.key}>\r\n            {BuildingJobIcon[props.building.type]} {x.name} {enterprise && enterprise.enterpriseType === 'company' && x.key === enterprise.ownerBeanKey ? '🎩' : ''}\r\n            <button title=\"Fire\" className=\"callout marg-0\" onClick={() => x ? dispatch(fireBean({cityKey: props.cityKey, beanKey: x.key})) : null}>\r\n                🔥\r\n            </button>\r\n        </div>)\r\n    }\r\n</div>\r\n}\r\nexport const EnterpriseTypePicker: React.FC<{\r\n    enter: IEnterprise,\r\n    changeEnterprise: (newType: EnterpriseType) => void,\r\n}> = (props) => {\r\n    const options = EnterpriseTypes.map((x) => {\r\n        return {\r\n            icon: EnterpriseTypeIcon[x],\r\n            text: x[0].toUpperCase()+x.substring(1),\r\n            value: x,\r\n            onClick: () => {\r\n                props.changeEnterprise(x);\r\n            }\r\n        }\r\n    }); \r\n    return <Subtabs active={props.enter.enterpriseType} options={options}></Subtabs>\r\n}\r\n\r\nexport const EnterpriseListings: React.FC<{\r\n    enterpriseKey: number,\r\n    good: TraitGood\r\n}> = (props) => {\r\n    const listings = useAppSelector(s => s.world.economy.market.listings[props.good])\r\n    return <div>\r\n        {\r\n            listings.filter(y => y.sellerEnterpriseKey === props.enterpriseKey).map((x,i) => <div key={i}>\r\n                {x.quantity} {GoodIcon[props.good]} @ ${x.price.toFixed(2)}\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nfunction HexStringToHex(hex: string): HexPoint {\r\n    const split = hex.split(',');\r\n    return {\r\n        q: +split[0],\r\n        r: +split[1]\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { CityGetPopulationTraitsList, ICity } from \"../simulation/City\";\r\nimport { IPlayerData } from \"../simulation/Player\";\r\nimport { selectBeansByCity } from \"../state/features/world.reducer\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { CardButton } from \"../widgets/CardButton\";\r\nimport { NeedReadout } from \"../widgets/NeedReadout\";\r\nimport { Trait } from \"../World\";\r\n\r\ninterface OverviewPanelP {\r\n    city: ICity,\r\n    alien: IPlayerData,\r\n    clearCity: () => void;\r\n}\r\n\r\nexport const OverviewPanel: React.FC<OverviewPanelP> = (props) => {\r\n    const beans = useAppSelector(x => selectBeansByCity(x.world, props.city.key));\r\n    let header = <div>\r\n        Human Emotion Farm\r\n        <div>\r\n            <small>Part of the 🌌 Galactic Xenosensation Federation</small>\r\n        </div>\r\n    </div>;\r\n    if (props.city) {\r\n        header = <div>\r\n            <div>\r\n                <b>{props.city.name}</b>\r\n                <button type=\"button\" className=\"pull-r\" onClick={() => props.clearCity()} >❌</button>\r\n            </div>\r\n        </div>;\r\n    }\r\n    const avg_happy = beans.reduce((sum, x) => sum + x.lastHappiness, 0) / (beans.length || 1);\r\n    const avg_cash = beans.reduce((sum, x) => sum + x.cash, 0) / (beans.length || 1);\r\n    return (\r\n        <div>\r\n            {header}\r\n            {/* <div className=\"header\"><b>Demographics</b></div> */}\r\n            <div className=\"header\"><b>👥 Subjects</b></div>\r\n            <div>\r\n                <b>Population</b>&nbsp;\r\n                <span>{beans.length}</span>\r\n            </div>\r\n            {/* <AxisReadout report={reportEthno(beans)}>Ethnicity</AxisReadout> */}\r\n            <NeedReadout beans={beans} need={(b) => b.food} dire=\"starving\" abundant=\"stuffed\">Food Security</NeedReadout>\r\n            <NeedReadout beans={beans} need={(b) => b.stamina} dire=\"homeless\" abundant=\"rested\">Housing</NeedReadout>\r\n            <NeedReadout beans={beans} need={(b) => b.health} dire=\"sick\" abundant=\"fresh\">Healthcare</NeedReadout>\r\n            <b>Avg. Money</b> ${avg_cash.toFixed(2)} &nbsp;\r\n            <b>Avg. Happiness</b> {Math.round(avg_happy)}%\r\n            {\r\n                beans && beans.length ? <>\r\n                    <div className=\"header\"><b>🧠 Traits</b></div>\r\n                    <div className=\"max-w-300\">\r\n                        { \r\n                            CityGetPopulationTraitsList(props.alien.scanned_bean, beans).map((v) => \r\n                                <span key={v.noun} className=\"overview-belief\">\r\n                                    {v.icon}&nbsp;{v.noun}&nbsp;x{v.count}\r\n                                </span>)\r\n                        }\r\n                    </div>\r\n                </> : null\r\n            }\r\n            {\r\n                beans.length || 0 > 7 ? <div className=\"card-parent\">\r\n                    <CardButton icon=\"🛰️\" name=\"Scan All\" disabled={true} subtext=\"-Energy +Info\" onClick={() => {}}></CardButton>\r\n                </div> : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport class AxisReadout extends React.Component<{ report: { avg: number, winner: Trait } }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n        let maj = 'Leaning';\r\n        if (this.props.report.avg >= .51)\r\n            maj = 'Major'\r\n        if (this.props.report.avg >= .8)\r\n            maj = 'Extreme'\r\n        const percent = Math.floor(this.props.report.avg * 100);\r\n        const style = {\r\n            width: percent + '%'\r\n        }\r\n        return (\r\n            <div>\r\n                <b>\r\n                    {this.props.children}\r\n                </b>&nbsp;&nbsp;\r\n                <span>{maj} {keyToName[this.props.report.winner]}</span>\r\n                <div className=\"bar\">\r\n                    <div className=\"bar-inner\" style={style}>\r\n                        {percent}%\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { abduct } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean, selectSelectedCity } from \"../state/state\";\r\nimport { BeanPanel } from \"./BeanPanel\";\r\nimport { HexPanel } from \"./HexPanel\";\r\nimport { OverviewPanel } from \"./OverviewPanel\";\r\n\r\nexport const DetailPanel: React.FC<{\r\n    openBrainwash: () => void\r\n}> = (props) => {\r\n    const city = useAppSelector(selectSelectedCity);\r\n    const hex = useAppSelector((x) => x.selected.selectedHexKey);\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const alien = useAppSelector((x) => x.world.alien);\r\n    const dispatch = useAppDispatch();\r\n    if (bean && city){\r\n        return <BeanPanel bean={bean} city={city} alien={alien}\r\n        brainwash={() => props.openBrainwash()}\r\n        ></BeanPanel>\r\n    }\r\n    if (hex) {\r\n        return <HexPanel difficulty={alien.difficulty}></HexPanel>\r\n    }\r\n    if (city) {\r\n        return <OverviewPanel city={city} clearCity={() => dispatch(doSelectNone())} alien={alien}></OverviewPanel>\r\n    }\r\n    return <div></div>\r\n}","import React from \"react\";\r\nimport { IEvent } from \"../events/Events\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectEventIDs } from \"../state/state\";\r\n\r\nfunction shouldEventJumpToBean(e: IEvent): boolean{\r\n    return e.beanKey != null && (\r\n        e.trigger === 'speechcrime' ||\r\n        e.trigger === 'birth');\r\n}\r\n\r\nexport const EventsPanel: React.FC<{\r\n    \r\n}> = (props) => {\r\n    const events = useAppSelector(selectEventIDs);\r\n    const dispatch = useAppDispatch();\r\n    let elements = events.map((e, i) => {\r\n        const alert = e.icon === '🚨';\r\n        const tallTrigger = e.trigger === 'nojobslots' || e.trigger === 'persuasion';\r\n        return <div key={i} className={alert||tallTrigger ? 'tall': ''}>\r\n            <span className={alert ? 'police-siren': ''}>{e.icon}</span>&nbsp;\r\n            {\r\n                shouldEventJumpToBean(e) ? <a onClick={() => {\r\n                    if (e.beanKey && e.cityKey) {\r\n                        dispatch(doSelectBean({beanKey: e.beanKey, cityKey: e.cityKey}));\r\n                    }\r\n            }} href=\"javascript:void(0)\">{e.message}</a> : <span>{e.message}</span>\r\n            }\r\n        </div>\r\n    });\r\n    if (events.length === 0){\r\n        elements = [<div key={0}>\r\n            <small>No events yet</small>\r\n        </div>]\r\n    }\r\n    return (                \r\n    <div className=\"events-panel\">\r\n        <div>\r\n            <b>Events</b>\r\n        </div>\r\n        {elements}\r\n    </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { DefaultDifficulty, triadToString } from \"../Game\";\r\nimport { Curriculums, GetAverage, Goals, IGoal, IGoalProgress, IPlayerData, IProgressable } from \"../simulation/Player\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nfunction renderReward(g: IGoal){\r\n  return <div>\r\n    <small>\r\n    🎁 {triadToString(g.reward || {}, '+')}\r\n    </small>\r\n  </div>\r\n}\r\nfunction renderGoal(progress: IGoalProgress|undefined, g: IGoal){\r\n  return <li>\r\n    {progress?.done ? '☑️': '⭕️'}\r\n    {g.text}\r\n    {g.tooltip != null ? <small title={g.tooltip}>❔</small> : null}\r\n    {progress?.done || g.reward == null ? null : renderReward(g)}\r\n  </li>\r\n}\r\nexport const GoalsPanel: React.FC = () => {\r\n  const progress = useAppSelector(x => x.world.alien.goalProgress);\r\n  const goals = useAppSelector(x => x.world.alien.goals);\r\n  const workingReportCard = useAppSelector(x => x.world.alien.workingReportCard);\r\n  return (<div className=\"goals\">\r\n    <div><b>Goals</b></div>\r\n    <ul>\r\n      {goals.map((key) => {\r\n        return renderGoal(progress[key], Goals[key]);\r\n      })}\r\n    </ul>\r\n    <div><b>Report Card</b></div>\r\n    <p className=\"horizontal\">\r\n      <span>\r\n        Last Grade: <b>D</b>\r\n      </span>\r\n      <span>\r\n        Next Grade in: <b>2 mo.</b>\r\n      </span>\r\n    </p>\r\n    <p>\r\n    </p>\r\n    <table style={{margin: 'auto'}}>\r\n      <tbody>\r\n        <tr>\r\n          <th>🎯 Happiness\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Happiness}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects happy?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n            <small>\r\n          {Curriculums.Default.RubricDescription.Happiness}\r\n            </small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Prosperity</th>\r\n          <td>\r\n            {workingReportCard.Prosperity}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects fed and healthy?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Prosperity}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Stability\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Stability}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects sane and civil?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Stability}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Dogma\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Dogma}\r\n          </td>\r\n          <td>\r\n            <small title=\"Do your society's rules match your utopian ideals?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Dogma}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td colSpan={3}>\r\n            <hr />\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            Avg. Grade\r\n          </th>\r\n          <td>\r\n            {GetAverage(workingReportCard)}\r\n          </td>\r\n          <td></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { PlayerCanAfford } from \"../simulation/Player\";\r\nimport { buyBots, buyEnergy, buyTrait, scrubHedons } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { EmoteIcon } from \"../World\";\r\n\r\n export const MarketPanel: React.FC<{\r\n }> = () => {\r\n     const player = useAppSelector(s => s.world.alien);\r\n     const dispatch = useAppDispatch();\r\n    return <div>\r\n        <div className=\"text-center\">\r\n            <strong>🌌 Galactic 😨 Emotion 💰 Market</strong>\r\n        </div>\r\n        <p>\r\n            <small>\r\n                The premier exchange for ⚡️, 🤖,  and {EmoteIcon['happiness']}!\r\n            </small>\r\n        </p>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(buyEnergy({amount: 1}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.energy)}>\r\n                +1 ⚡️ Energy\r\n                <CostSmall cost={player.difficulty.cost.market.resource.energy} qty={1} ></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" onClick={() => dispatch(buyEnergy({amount: 5}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.energy, 5)}>\r\n                +5 ⚡️ Energy\r\n                <CostSmall cost={player.difficulty.cost.market.resource.energy} qty={5} ></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(buyBots({amount: 1}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.bots)}>\r\n                +1 🤖 Bot\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={1} ></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" onClick={() => dispatch(buyBots({amount: 5}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.bots, 5)}>\r\n                +5 🤖 Bots\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={5} ></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(scrubHedons())}\r\n                disabled={player.hedons.amount >= 0 || !PlayerCanAfford(player, player.difficulty.cost.market.scrubHedons)}>\r\n                Remove 💢 Negative Hedons\r\n                <CostSmall cost={player.difficulty.cost.market.scrubHedons} qty={1} ></CostSmall>\r\n            </button>\r\n            {/* <button className=\"card button\" onClick={() => buyBots(5)}\r\n                disabled={!PlayerCanAfford(player.difficulty.cost.market.resource.bots, 5)}>\r\n                +5 🤖 Bots\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={5} ></CostSmall>\r\n            </button> */}\r\n        </div>\r\n        <div>\r\n            \r\n            <small>\r\n                <i>Current 🧠 Traits for sale:</i>\r\n            </small>\r\n        </div>\r\n        <div className=\"short-scroll\">\r\n            {\r\n                <MarketTraits hedons={player.hedons.amount}></MarketTraits>\r\n            }\r\n        </div>\r\n    </div>\r\n }\r\n\r\n \r\nexport const MarketTraits: React.FC<{\r\n    hedons: number,\r\n}> = (props) => {\r\n    const list = useAppSelector(s => s.world.marketTraitsForSale);\r\n    const dispatch = useAppDispatch();\r\n    return <>\r\n    {\r\n    list.map((l, i) => {\r\n        const t = SecondaryBeliefData[l.trait];\r\n        const className = 'belief-name '+t.rarity;\r\n        return <div className=\"card-parent\" key={i}>\r\n            <button className=\"card button\" onClick={() => dispatch(buyTrait({l: l}))} disabled={props.hedons < (l.cost.hedons || 0)}>\r\n                <span className={className}>\r\n                    {t.icon} {t.noun}\r\n                </span>\r\n                <CostSmall cost={l.cost}></CostSmall>\r\n            </button>\r\n        </div>\r\n    })\r\n    }\r\n    </>\r\n}","const fourLetterWords = [\r\n'able','acid','aged','also','area','army','away','baby','back','ball','band','bank',\r\n'base','bath','bear','beat','been','beer','bell','belt','best','bill','bird','blow','blue','boat',\r\n'body','bomb','bond','bone','book','boom','born','boss','both','bowl','bulk','burn',\r\n'bush','busy','call','calm','came','camp','card','care','case','cash','cast','cell',\r\n'chat','chip','city','club','coal','coat','code','cold','come','cook','cool','cope',\r\n'copy','CORE','cost','crew','crop','dark','data','date','dawn','days','dead','deal',\r\n'dean','dear','debt','deep','deny','desk','dial','dick','diet','disc','disk','does',\r\n'done','door','dose','down','draw','drew','drop','drug','dual','duke','dust','duty',\r\n'each','earn','ease','east','easy','edge','else','even','ever','evil','exit','face',\r\n'fact','fail','fair','fall','farm','fast','fate','fear','feed','feel','feet','fell',\r\n'felt','file','fill','film','find','fine','fire','firm','fish','five','flat','flow',\r\n'food','foot','ford','form','fort','four','free','from','fuel','full','fund','gain',\r\n'game','gate','gave','gear','gene','gift','girl','give','glad','goal','goes','gold',\r\n'Golf','gone','good','gray','grew','grey','grow','gulf','hair','half','hall','hand',\r\n'hang','hard','harm','hate','have','head','hear','heat','held','hell','help','here',\r\n'hero','high','hill','hire','hold','hole','holy','home','hope','host','hour','huge',\r\n'hung','hunt','hurt','idea','inch','into','iron','item','jack','jane','jean','john',\r\n'join','jump','jury','just','keen','keep','kent','kept','kick','kill','kind','king',\r\n'knee','knew','know','lack','lady','laid','lake','land','lane','last','late','lead',\r\n'left','less','life','lift','like','line','link','list','live','load','loan','lock',\r\n'logo','long','look','lord','lose','loss','lost','love','luck','made','mail','main','make',\r\n'male','many','Mark','mass','matt','meal','mean','meat','meet','menu','mere','mike',\r\n'mile','milk','mill','mind','mine','miss','mode','mood','moon','more','most','move',\r\n'much','must','name','navy','near','neck','need','news','next','nice','nick','nine',\r\n'none','nose','note','okay','once','only','onto','open','oral','over','pace','pack',\r\n'page','paid','pain','pair','palm','park','part','pass','past','path','peak','pick',\r\n'pink','pipe','plan','play','plot','plug','plus','poll','pool','poor','port','post',\r\n'pull','pure','push','race','rail','rain','rank','rare','rate','read','real','rear',\r\n'rely','rent','rest','rice','rich','ride','ring','rise','risk','road','rock','role',\r\n'roll','roof','room','root','rose','rule','rush','ruth','safe','said','sake','sale',\r\n'salt','same','sand','save','seat','seed','seek','seem','seen','self','sell','send',\r\n'sent','sept','ship','shop','shot','show','shut','sick','side','sign','site','size',\r\n'skin','slip','slow','snow','soft','soil','sold','sole','some','song','soon','sort',\r\n'soul','spot','star','stay','step','stop','such','suit','sure','take','tale','talk',\r\n'tall','tank','tape','task','team','tech','tell','tend','term','test','text','than',\r\n'that','them','then','they','thin','this','thus','till','time','tiny','told','toll',\r\n'tone','tony','took','tool','tour','town','tree','trip','true','tune','turn','twin',\r\n'type','unit','upon','used','user','vary','vast','very','vice','view','vote','wage',\r\n'wait','wake','walk','wall','want','ward','warm','wash','wave','ways','weak','wear',\r\n'week','well','went','were','west','what','when','whom','wide','wife','wild','will',\r\n'wind','wine','wing','wire','wise','wish','with','wood','word','wore','work','yard',\r\n'yeah','year','your','zero','zone',\r\n];\r\n\r\nexport function GetSeedName(){\r\n    let seed = '';\r\n    for (let i = 0; i < 4; i++) {\r\n        if (i > 0)\r\n            seed += '-';\r\n        const rand = Math.random();\r\n        seed += fourLetterWords[Math.floor(rand * fourLetterWords.length)];\r\n    }\r\n    return seed;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { GameStorageInstance } from '../GameStorage';\r\nexport const AutosaveWidget: React.FC<{}> = (props) => {\r\n    const [isDirty, setDirty] = useState(false);\r\n    const [isSaving, setSaving] = useState(false);\r\n    const onDirty = (dirty: boolean) => {\r\n        setDirty(dirty);\r\n    }\r\n    const onSaving = () => {\r\n        setSaving(true);\r\n        setTimeout(() => setSaving(false), 500);\r\n    }\r\n    const d = useEffect(() => {\r\n        GameStorageInstance.Dirty.subscribe(onDirty);\r\n        return () => GameStorageInstance.Dirty.unsubscribe(onDirty);\r\n    });\r\n    const s = useEffect(() => {\r\n        GameStorageInstance.Saving.subscribe(onSaving);\r\n        return () => GameStorageInstance.Saving.unsubscribe(onSaving);\r\n    });\r\n    return <button disabled={!isDirty || isSaving}>\r\n            {\r\n                isSaving ? '💿' : isDirty ? '💾' : '✔️'\r\n            }\r\n        </button>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { ChangePubSub, PubSub } from \"../events/Events\";\r\n\r\ninterface Bubble {string: string, id: number, className?: string};\r\n\r\nfunction useBubbles<T>(sub: PubSub<T>, transform: (input: T) => {string: string, className: string}){\r\n    const [bubbles, setBubbles] = useState<Bubble[]>([]);\r\n    let bubbleSeed = 0;\r\n    const onEvent = (event: T) => {\r\n        const id = ++bubbleSeed;\r\n        setBubbles(bubbles.concat([{\r\n            id: id,\r\n            ...transform(event)\r\n        }]));\r\n        setTimeout(() => {\r\n            setBubbles(\r\n                bubbles.filter((b) => b.id != id)\r\n            )\r\n        }, 1500)\r\n    }\r\n    useEffect(() => {\r\n        sub.subscribe(onEvent);\r\n        return () => sub.unsubscribe(onEvent);\r\n    });\r\n    return bubbles;\r\n}\r\n\r\nexport class BubbleNumberText extends React.Component<{\r\n    bubbleClass?: string,\r\n    icon?: string,\r\n    changeEvent?: ChangePubSub\r\n}, {\r\n    bubbles: Array<Bubble>\r\n}> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            bubbles: []\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        if (this.props.changeEvent){\r\n            this.props.changeEvent.subscribe(this.onChange)\r\n        }\r\n    }\r\n    bubbleSeed = 0;\r\n    onChange = (ev: {change: number}) => {\r\n        const id = ++this.bubbleSeed;\r\n        const positive = ev.change > 0;\r\n        this.setState({\r\n            bubbles: this.state.bubbles.concat([{\r\n                string: (positive ? '+': '') + ev.change,\r\n                id: id,\r\n                className: positive ? 'pos' : 'neg'\r\n            }])\r\n        });\r\n        setTimeout(() => {\r\n            this.setState({\r\n                bubbles: this.state.bubbles.filter((b) => b.id != id)\r\n            })\r\n        }, 1500)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if (this.props.changeEvent){\r\n            this.props.changeEvent.unsubscribe(this.onChange);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const bubbles = this.state.bubbles.map((b) => <span key={b.id} className={[b.className, this.props.bubbleClass, \"bubbler\"].join(' ')}>\r\n            {this.props.icon} {b.string}\r\n        </span>)\r\n        return <span className=\"bubble-parent\">\r\n            {this.props.children}\r\n            {bubbles}\r\n        </span>\r\n    }\r\n}\r\n\r\nexport const BubbleSeenTraitsText: React.FC<{\r\n    bubbleClass?: string,\r\n    icon?: string,\r\n    changeEvent: PubSub<{k: string, v: boolean}>\r\n}> = (props) => {\r\n    const bubbles = useBubbles(props.changeEvent, (input: {k: string, v: boolean}) => {\r\n        return {\r\n            string: `Discovered ${input.k}!`,\r\n            className: 'seen-belief'\r\n        }\r\n    })\r\n    return <span className=\"bubble-parent\">\r\n        {props.children}\r\n        {bubbles.map((b) => <span key={b.id} className={[b.className, props.bubbleClass, \"bubbler\"].join(' ')}>\r\n            {props.icon} {b.string}\r\n        </span>)}\r\n    </span>\r\n}","import React from \"react\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\nexport class CapsuleLabel extends React.Component<{\r\n    icon?: string,\r\n    label?: string\r\n}, {\r\n}> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render(){\r\n        const classN = 'capsule-label '+this.props.label||'';\r\n        return <span className={classN}>\r\n            <span className=\"capsule-icon\">\r\n                {this.props.icon}\r\n            </span>\r\n            <span className=\"capsule-text\">\r\n                {this.props.label}:\r\n            </span>\r\n            <span className=\"capsule-value\">\r\n                {this.props.children}\r\n            </span>\r\n        </span>\r\n    }\r\n}\r\n\r\nexport const EnergyAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.energy.amount);\r\n    return <span>{amt.toFixed(1)}</span>\r\n}\r\nexport const BotsAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.bots.amount);\r\n    return <span>{amt.toFixed(1)}</span>\r\n}\r\nexport const HedonAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.hedons.amount);\r\n    return <span>{amt.toFixed(0)}</span>\r\n}","import React from \"react\";\r\n\r\nexport interface modalPs{\r\n    show: boolean;\r\n    onClick?: () => void;\r\n    closeButtonText?: string;\r\n}\r\nexport class Modal extends React.Component<modalPs> {\r\n    constructor(props: modalPs) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        }\r\n    }\r\n    getButton(){\r\n        if (!this.props.onClick)\r\n            return null;\r\n        else\r\n            return <button type=\"button\" className=\"done\" onClick={() => this.props.onClick && this.props.onClick()} >{this.props.closeButtonText || 'Done'}</button>\r\n    }\r\n    render() {\r\n        if (!this.props.show) {\r\n            return null;\r\n        }\r\n        return (\r\n        <div className=\"modal\">\r\n            {this.props.children}\r\n            {this.getButton()}\r\n        </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { PartOfDay, Season } from \"../simulation/Time\"\r\nimport { useAppSelector } from \"../state/hooks\"\r\n\r\nfunction SeasonHour(hour: number){\r\n    if (hour < PartOfDay.Morning)\r\n        return '🌙';\r\n    if (hour < PartOfDay.Noon)\r\n        return '🌄';\r\n    if (hour < PartOfDay.Evening)\r\n        return '☀️';\r\n    return '🌇';\r\n}\r\nexport const SeasonWidget: React.FC = () => {\r\n    const date = useAppSelector(s => s.world.date)\r\n    return <span>\r\n        &nbsp;Year {date.year},&nbsp;{Season[date.season]} {date.day} {SeasonHour(date.hour)}\r\n    </span>\r\n}","import React from \"react\";\r\nimport { AnimatedBean } from \"../petri-ui/AnimatedBean\";\r\nimport { SocialBuildings } from \"../petri-ui/Buildings\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { IBuilding } from \"../simulation/Geography\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { selectCityBeanIDs } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport \"./SocialGraph.css\";\r\n\r\ninterface SocialGraphP{\r\n    city: ICity,\r\n    onClick: (b: IBean) => void;\r\n    onClickBuilding: (b: IBuilding) => void;\r\n}\r\n\r\nexport const SocialGraph: React.FC<SocialGraphP> = (props) => {\r\n    const beanKeys = useAppSelector(state => selectCityBeanIDs(state.world, props.city.key));\r\n    const scannedBeans = useAppSelector(s => s.world.alien.scanned_bean)\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"social-graph\">\r\n        <div className=\"social-graph-row\">\r\n        {\r\n            beanKeys.map((b) => \r\n            <div key={b} className=\"bean-node\" onClick={() => dispatch(doSelectBean({cityKey:props.city.key, beanKey: b}))}>\r\n                <AnimatedBean beanKey={b} static={true} sitStill={true} cityKey={props.city.key}>\r\n                </AnimatedBean>\r\n                {\r\n                    scannedBeans[b] ? null : <span className=\"social-graph-unscanned prohibited-emoji\">🛰️</span>\r\n                }\r\n            </div>)\r\n        }\r\n        </div>\r\n        <div className=\"social-graph-row\">\r\n        {\r\n            <SocialBuildings city={props.city} onClickBuilding={props.onClickBuilding}></SocialBuildings>\r\n        }\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport \"./StopPlayFast.css\"\r\n\r\nexport class StopPlayFastButtons extends React.Component<{\r\n    timeScale: number,\r\n    setTimeScale: (s: number) => void\r\n}>{\r\n    render(){\r\n        return <div className=\"s-p-f button-group cylinder blue-orange\">\r\n            ⌛️\r\n            <button type=\"button\" className={this.props.timeScale == 0 ? 'active': ''} onClick={() => this.props.setTimeScale(0)}>⏹</button>\r\n            <button type=\"button\" className={this.props.timeScale == 1 ? 'active': ''} onClick={() => this.props.setTimeScale(1)}>▶️</button>\r\n            <button type=\"button\" className={this.props.timeScale == 2 ? 'active': ''} onClick={() => this.props.setTimeScale(2)}>⏩</button>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport const GeoNetworkButtons: React.FC<{\r\n    activeMain: 'geo' | 'network';\r\n    setActiveMain: (v: 'geo' | 'network' ) => void\r\n}> = (props) => {\r\n    \r\n    return <div className=\"s-p-f button-group cylinder blue-orange\">\r\n        👁️\r\n        <button type=\"button\" className={props.activeMain == 'geo' ? 'active': ''} onClick={() => props.setActiveMain('geo')}>🌎</button>\r\n        <button type=\"button\" className={props.activeMain == 'network' ? 'active': ''} onClick={() => props.setActiveMain('network')}>🌐</button>\r\n    </div>\r\n    \r\n}","import React from \"react\";\r\nimport { IEvent, PubSub } from \"../events/Events\";\r\n\r\nexport class TimelyEventToggle extends React.Component<{\r\n    event: PubSub<IEvent>,\r\n    eventIcon: string,\r\n    eventClass: string\r\n}, {\r\n eventCount: number,\r\n}>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.props.event.subscribe(this.onEvent);\r\n        this.state = {\r\n            eventCount: 0\r\n        };\r\n    }\r\n    onEvent = (e: IEvent) => {\r\n        this.setState({eventCount: this.state.eventCount+1});\r\n        window.setTimeout(() => {\r\n            this.setState({\r\n                eventCount: this.state.eventCount-1\r\n            });\r\n        }, 3000);\r\n    }\r\n    render(){\r\n        return <span>\r\n            {this.state.eventCount < 1 ? this.props.children : <span className={this.props.eventClass}>{this.props.eventIcon}</span>}\r\n        </span>\r\n    }\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\r\nimport './App.css';\r\nimport './chrome/chrome.css';\r\nimport { IEvent } from './events/Events';\r\nimport { GameStorageInstance, isGame } from './GameStorage';\r\nimport { BrainwashingContent } from './modal-content/Brainwashing';\r\nimport { CampaignsPanel } from './modal-content/Campaigns';\r\nimport { EconomyReport } from './modal-content/EconomyReport';\r\nimport { EscapeMenu } from './modal-content/EscapeMenu';\r\nimport { GovernmentPanel } from './modal-content/Gov';\r\nimport { GreetingPanel } from './modal-content/GreetingPanel';\r\nimport { LoadGameMenu } from './modal-content/LoadGameMenu';\r\nimport { MainMenu } from './modal-content/MainMenu';\r\nimport { ResearchPanel } from './modal-content/Research';\r\nimport { TraitsReport } from './modal-content/TraitsReport';\r\nimport { MoverStoreInstance } from './MoverStoreSingleton';\r\nimport { WorldTile2 } from './petri-ui/WorldTile';\r\nimport { DetailPanel } from './right-panel/DetailPanel';\r\nimport { EventsPanel } from './right-panel/Events';\r\nimport { GoalsPanel } from './right-panel/Goals';\r\nimport { MarketPanel } from './right-panel/MarketPanel';\r\nimport { SignalStoreInstance } from './SignalStore';\r\nimport { Point } from './simulation/Geography';\r\nimport { MoverStore } from './simulation/MoverBus';\r\nimport { GetSeedName } from './simulation/SeedGen';\r\nimport { animate_beans, animate_pickups, animate_ufos } from './simulation/WorldSim';\r\nimport { doSelectBean, doSelectBuilding, doSelectNone } from './state/features/selected.reducer';\r\nimport { cheatAdd, loadGame, newGame, worldTick } from './state/features/world.reducer';\r\nimport { RootState, store as StoreState } from './state/state';\r\nimport { AutosaveWidget } from './widgets/Autosave';\r\nimport { BubbleNumberText, BubbleSeenTraitsText } from './widgets/BubbleText';\r\nimport { BotsAmount, CapsuleLabel, EnergyAmount, HedonAmount } from './widgets/CapsuleLabel';\r\nimport { Modal } from './widgets/Modal';\r\nimport { SeasonWidget } from './widgets/Season';\r\nimport { SocialGraph } from './widgets/SocialGraph';\r\nimport { GeoNetworkButtons, StopPlayFastButtons } from './widgets/StopPlayFast';\r\nimport { TimelyEventToggle } from './widgets/TimelyEventToggle';\r\nimport { WorldSfxInstance, WorldSound } from './WorldSound';\r\n\r\nexport type ModalView = 'mainmenu'|'loadgame'|'escapemenu'|'greeting' | 'economy' | 'campaign' | 'gov' | 'polisci' | 'brainwash' | 'traits';\r\ninterface AppPs {\r\n}\r\ninterface AppState {\r\n  activeModal: ModalView | null;\r\n  activeMain: 'geo' | 'network';\r\n  activeRightPanel: 'events' | 'overview' | 'goals' | 'market';\r\n  timeScale: number;\r\n  spotlightEvent: IEvent | undefined;\r\n  cursor?: Point;\r\n  newGameSeed: string;\r\n}\r\nexport const SfxContext = React.createContext<WorldSound|undefined>(undefined);\r\nexport const MoverContext = React.createContext<MoverStore>(MoverStoreInstance);\r\n\r\nconst LogicTickMS = 2000;\r\nconst SpotlightDurationTimeMS = 5000;\r\nconst store = StoreState;\r\n\r\nconst AutosaveMilliseconds = 15 * 1000;\r\nclass App extends React.Component<AppPs, AppState>{\r\n  constructor(props: AppPs) {\r\n    super(props);\r\n    this.state = {\r\n      activeMain: 'geo',\r\n      activeModal: 'mainmenu',\r\n      activeRightPanel: 'overview',\r\n      timeScale: 0,\r\n      spotlightEvent: undefined,\r\n      newGameSeed: GetSeedName()\r\n    };\r\n  }\r\n  private previousTimeMS: DOMHighResTimeStamp = 0;\r\n  private logicTickAccumulatorMS: number = 0;\r\n  private millisecondsSinceLastSave: DOMHighResTimeStamp = 0;\r\n  private saveAccumulatorMS: number = 0;\r\n  componentDidMount() {\r\n    document.addEventListener(\"keyup\", this.keyupHandler, false);\r\n    window.requestAnimationFrame((time: DOMHighResTimeStamp) => {\r\n      this.previousTimeMS = time;\r\n      window.requestAnimationFrame(this.tick);\r\n    });\r\n    store.subscribe(() => {\r\n      const s = store.getState();\r\n      if ((s.selected.selectedBeanKey != null || s.selected.selectedBuildingKey != null || s.selected.selectedHexKey != null) && this.state.activeRightPanel != 'overview'){\r\n        this.setState({activeRightPanel: 'overview'});\r\n      }\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keyup\", this.keyupHandler);\r\n  }\r\n  tick = (timeMS: DOMHighResTimeStamp) => {\r\n    // Compute the delta-time against the previous time\r\n    const deltaTimeMS = (timeMS - this.previousTimeMS);\r\n    // Update the previous time\r\n    this.previousTimeMS = timeMS;\r\n\r\n    if (deltaTimeMS > 0) {\r\n      const gameDeltaTimeMS = deltaTimeMS * this.state.timeScale;\r\n\r\n      animate_ufos(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n      if (gameDeltaTimeMS > 0){\r\n        this.logicTickAccumulatorMS += deltaTimeMS;\r\n        animate_pickups(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n        animate_beans(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n  \r\n        if (this.logicTickAccumulatorMS > LogicTickMS) {\r\n          store.dispatch(worldTick())\r\n          this.logicTickAccumulatorMS = 0;\r\n        }\r\n      }\r\n      this.millisecondsSinceLastSave += deltaTimeMS;\r\n      //save every 30 seconds\r\n      if(GameStorageInstance.Dirty.current && this.millisecondsSinceLastSave > AutosaveMilliseconds){\r\n        GameStorageInstance.SaveGame(store.getState().world);\r\n        this.millisecondsSinceLastSave = 0;\r\n      }\r\n    }\r\n    window.requestAnimationFrame(this.tick);\r\n  }\r\n  cheatMode: boolean = false;\r\n  keyupHandler = (event: KeyboardEvent) => {\r\n    if (event.key === ' ') {\r\n      if (this.state.timeScale > 0) {\r\n        this.setState({ timeScale: 0 });\r\n      } else {\r\n        this.setState({ timeScale: 1 });\r\n      }\r\n    } else if (event.key === 'Escape') {\r\n      if (this.state.activeModal === 'greeting')\r\n        store.dispatch(newGame({seed: this.state.newGameSeed}))\r\n      this.setState({activeModal: null});\r\n    } else if (this.cheatMode && event.key === 'A') {\r\n      store.dispatch(cheatAdd())\r\n    } else if (this.cheatMode && event.key === 'Q') {\r\n      // if (this.state.world.cities[0].book.getBuildings().filter(x => x.type === 'farm').length < 1){\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.farm.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.farm.bots || 0;\r\n      //   // this.build(this.state.world.cities[0], { q: 1, r: 1 }, 'farm');\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.house.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.house.bots || 0;\r\n      //   // this.build(this.state.world.cities[0], { q: 1, r: 0 }, 'house');\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.hospital.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.hospital.bots || 0;\r\n        // this.build(this.state.world.cities[0], { q: 0, r: 1 }, 'hospital');\r\n      // }\r\n      // this.state.world.alien.energy.amount += (this.state.world.alien.difficulty.cost.hex.beam.energy || 0) * 4;\r\n      // this.beam(this.state.world.cities[0], { q: 0, r: 0 });\r\n      // this.beam(this.state.world.cities[0], { q: 1, r: 0 });\r\n      // this.beam(this.state.world.cities[0], { q: 0, r: 1 });\r\n      // this.beam(this.state.world.cities[0], { q: 1, r: 1 });\r\n    } else if (this.cheatMode && event.key === 'S') {\r\n      // this.state.world.beans.get.forEach((b) => {\r\n      //   if (this.state.world.alien.difficulty.cost.bean.scan.energy){\r\n      //     if (this.state.world.alien.energy.amount < this.state.world.alien.difficulty.cost.bean.scan.energy)\r\n      //       this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.bean.scan.energy;\r\n      //   }\r\n      //   // this.scan(b);\r\n      // });\r\n    }\r\n    this.cheatMode = event.shiftKey && event.key === 'C';\r\n  }\r\n  onDeath = (event: IEvent) => {\r\n    WorldSfxInstance.play('death');\r\n    this.startSpotlight(event);\r\n  }\r\n  private timescaleBeforeSpotlight: number = 1;\r\n  startSpotlight(event: IEvent) {\r\n    this.timescaleBeforeSpotlight = this.state.timeScale;\r\n    this.setState({\r\n      spotlightEvent: event,\r\n      timeScale: 0\r\n    }, () => {\r\n      setTimeout(() => this.endSpotlight(), SpotlightDurationTimeMS);\r\n    });\r\n  }\r\n  endSpotlight() {\r\n    this.setState({\r\n      timeScale: this.timescaleBeforeSpotlight,\r\n      spotlightEvent: undefined\r\n    });\r\n  }\r\n  getPanel() {\r\n    switch (this.state.activeRightPanel) {\r\n      case 'overview':\r\n        return <DetailPanel openBrainwash={() => this.setState({ activeModal: 'brainwash' })}></DetailPanel>\r\n      case 'goals':\r\n        return <GoalsPanel></GoalsPanel>\r\n      case 'events':\r\n        return <EventsPanel></EventsPanel>\r\n      case 'market': \r\n        return <MarketPanel></MarketPanel>\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n      <SfxContext.Provider value={WorldSfxInstance}>\r\n      <MoverContext.Provider value={MoverStoreInstance}>\r\n        <div className=\"canvas\">\r\n          {\r\n            this.state.activeMain === 'network' ? <div className=\"canvas\">\r\n              <SocialGraph\r\n                city={store.getState().world.cities.byID[0]}\r\n                onClickBuilding={(b) => store.dispatch(doSelectBuilding({\r\n                  cityKey: store.getState().world.cities.allIDs[0], \r\n                  buildingKey: b.key,\r\n                  hex: b.address\r\n                 }))}\r\n                onClick={(b) => {\r\n                  store.dispatch(doSelectBean({cityKey: b.cityKey, beanKey: b.key }));\r\n                }} ></SocialGraph>\r\n            </div> : <TransformWrapper\r\n              defaultScale={1}\r\n              wheel={{ step: 48 }}>\r\n              <TransformComponent>\r\n                <div className=\"world\">\r\n                  {\r\n                  store.getState().world.cities.allIDs.map((t) => {\r\n                    return (\r\n                      <WorldTile2 cityKey={t} key={t}\r\n                        onClick={() => {\r\n                          \r\n                        }}\r\n                      ></WorldTile2>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </TransformComponent>\r\n            </TransformWrapper>\r\n          }\r\n          <div className=\"overlay\">\r\n            <Modal show={this.state.activeModal == 'mainmenu'}>\r\n              <MainMenu startGame={() => this.setState({activeModal: 'greeting'})} loadGame={(slot: number) => {\r\n                const game = GameStorageInstance.GetGame(slot);\r\n                if (isGame(game)){\r\n                  store.dispatch(loadGame({newState: game.game}));\r\n                  this.setState({activeModal: null});\r\n                }\r\n              }}></MainMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'loadgame'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame({seed: this.state.newGameSeed}));\r\n              }\r\n            }>\r\n              <LoadGameMenu></LoadGameMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'escapemenu'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame({seed: this.state.newGameSeed}));\r\n              }\r\n            }>\r\n              <EscapeMenu></EscapeMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'greeting'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame({seed: this.state.newGameSeed}));\r\n              }\r\n            }>\r\n              <GreetingPanel seed={this.state.newGameSeed} changeSeed={(s) => this.setState({newGameSeed: s})}></GreetingPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'gov'} onClick={() => this.setState({ activeModal: null })}>\r\n              <GovernmentPanel></GovernmentPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'polisci'} onClick={() => this.setState({ activeModal: null })}>\r\n              <ResearchPanel></ResearchPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'campaign'} onClick={() => this.setState({ activeModal: null })}>\r\n              <CampaignsPanel></CampaignsPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'economy'} onClick={() => this.setState({ activeModal: null })}>\r\n              {(this.state.activeModal == 'economy' ? <EconomyReport></EconomyReport> : '')}\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'traits'} onClick={() => this.setState({ activeModal: null })}>\r\n              <TraitsReport></TraitsReport>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'brainwash'} onClick={() => this.setState({ activeModal: null })}>\r\n              <BrainwashingContent></BrainwashingContent>\r\n            </Modal>\r\n            <div className=\"left\">\r\n              <div className=\"top\">\r\n                <span>👽 Alien 🌍 Utopia 🔬 Lab</span>\r\n                <SeasonWidget></SeasonWidget>\r\n                <StopPlayFastButtons timeScale={this.state.timeScale} setTimeScale={(n: number) => { this.setState({ timeScale: n }) }}></StopPlayFastButtons>\r\n                <GeoNetworkButtons setActiveMain={(v) => this.setState({ activeMain: v })} activeMain={this.state.activeMain} ></GeoNetworkButtons>\r\n                <AutosaveWidget></AutosaveWidget>\r\n              </div>\r\n              <div className=\"bottom\">\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienEnergy} icon=\"⚡️\">\r\n                  <CapsuleLabel icon=\"⚡️\" label=\"Energy\">\r\n                    <EnergyAmount></EnergyAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienBots} icon=\"🤖\">\r\n                  <CapsuleLabel icon=\"🤖\" label=\"Bots\">\r\n                    <BotsAmount></BotsAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienHedons} icon=\"👍\">\r\n                  <CapsuleLabel icon=\"👍\" label=\"Hedons\">\r\n                    <HedonAmount></HedonAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                {/* <BubbleText changeEvent={this.state.world.alien.tortrons.change} icon=\"💔\">\r\n                  <CapsuleLabel icon=\"💔\" label=\"Tortrons\">\r\n                    {this.state.world.alien.tortrons.amount.toFixed(0)}\r\n                  </CapsuleLabel>\r\n                </BubbleText> */}\r\n                <span>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'economy' })}>📊 State of the Utopia</button>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'gov' })}>🗳️ Gov</button>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'polisci' })}>🧪 Research</button>\r\n                  \r\n                  <BubbleSeenTraitsText changeEvent={SignalStoreInstance.newTraitSeen} icon=\"🧠\">\r\n                    <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'traits' })}>🧠 Traits</button>\r\n                  </BubbleSeenTraitsText>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"right\">\r\n              <div className=\"full-width-tabs\">\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'overview' });}}>📈 Info</button>\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'market' }); store.dispatch(doSelectNone())}}>🛍️ Market</button>\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'events' }); store.dispatch(doSelectNone())}}>\r\n                  <TimelyEventToggle event={SignalStoreInstance.events} eventIcon=\"🚨\" eventClass=\"police-siren\">📣</TimelyEventToggle> Events\r\n                </button>\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'goals' }); store.dispatch(doSelectNone())}}>🏆 Goals</button>\r\n              </div>\r\n              <div className=\"right-panel\">\r\n                {this.getPanel()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          </div>\r\n      </MoverContext.Provider>\r\n      </SfxContext.Provider>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}