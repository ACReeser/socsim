{"version":3,"sources":["events/Events.tsx","GameStorage.ts","World.tsx","simulation/Beliefs.tsx","simulation/Government.tsx","simulation/Economy.tsx","simulation/Utils.tsx","simulation/Geography.tsx","simulation/RealEstate.tsx","simulation/MoverBus.tsx","MoverStoreSingleton.tsx","simulation/City.tsx","WorldGen.tsx","simulation/Pickup.tsx","simulation/Bean.tsx","SignalStore.tsx","simulation/Player.tsx","simulation/AgentDurationInstance.tsx","simulation/AgentDuration.tsx","simulation/BeanAndCity.tsx","state/entity.state.ts","WorldSound.tsx","petri-ui/Building.tsx","simulation/Priorities.tsx","simulation/Agent.tsx","simulation/MarketTraits.tsx","simulation/Time.tsx","simulation/WorldSim.tsx","Game.tsx","state/features/world.reducer.ts","state/features/world.ts","state/hooks.ts","state/features/selected.reducer.ts","state/state.ts","widgets/ConfirmButton.tsx","widgets/StringDropdown.tsx","modal-content/BeliefRow.tsx","modal-content/Brainwashing.tsx","modal-content/Campaigns.tsx","i18n/text.ts","widgets/NeedReadout.tsx","modal-content/EconomyReport.tsx","modal-content/EscapeMenu.tsx","widgets/TreasuryReport.tsx","modal-content/Gov.tsx","modal-content/GreetingPanel.tsx","modal-content/LoadGameMenu.tsx","modal-content/MainMenu.tsx","widgets/RobotArm.tsx","modal-content/Research.tsx","modal-content/TraitsReport.tsx","petri-ui/AnimatedBean.tsx","petri-ui/AnimatedPickup.tsx","petri-ui/Mover.tsx","petri-ui/Buildings.tsx","petri-ui/Magnet.tsx","petri-ui/AnimatedUFO2.tsx","petri-ui/WorldTile.tsx","widgets/CardButton.tsx","widgets/CostSmall.tsx","right-panel/BeanPanel.tsx","chrome/Subtab.tsx","simulation/Institutions.tsx","right-panel/HexPanel.tsx","right-panel/OverviewPanel.tsx","right-panel/DetailPanel.tsx","right-panel/Events.tsx","right-panel/Goals.tsx","right-panel/MarketPanel.tsx","widgets/Autosave.tsx","widgets/BubbleText.tsx","widgets/CapsuleLabel.tsx","widgets/Modal.tsx","widgets/Season.tsx","widgets/SocialGraph.tsx","widgets/StopPlayFast.tsx","widgets/TimelyEventToggle.tsx","App.tsx","serviceWorker.js","index.js"],"names":["PubSub","onPublish","callbacks","current","undefined","args","this","forEach","c","callback","push","splice","indexOf","ChangePubSub","MaslowHappinessScore","GameStorageInstance","Dirty","Saving","rawID","localStorage","getItem","id","parseInt","isNaN","slots","i","brief","JSON","parse","rawgame","errors","game","e","world","raw","stringify","Name","cities","byID","name","Population","beans","allIDs","map","x","filter","y","lifecycle","length","Age","day","date","hour","season","year","setItem","saveSlot","toString","publish","PickupPhysics","BeanPhysics","TraitIcon","TraitToModifier","reason","mod","Deficient","Sufficient","Abundant","GoodToThreshold","warning","sufficient","abundant","JobToGood","job","GoodToJob","good","GoodIcon","EmoteIcon","EmotionWorth","EmotionSanity","CommonalityChances","PrimaryBeliefData","prog","noun","adj","icon","description","rarity","trad","state","ego","NarrativeBeliefData","rocket","dragon","music","noFaith","SecondaryBeliefData","Diligence","Natalism","Antinatalism","Charity","Progressivism","Libertarianism","Wanderlust","Germophobia","Parochialism","Cosmopolitanism","Capitalism","Socialism","Communism","Fraud","Naturalism","Hedonism","Gluttony","Paranoia","Depression","Optimism","Authority","Anarchism","Greed","Bloodthirst","Extroversion","Introversion","Charisma","Gossip","Antagonism","Enthusiasm","Sadism","Vandalism","Neuroticism","Dogmatism","BeliefsAll","Object","keys","RandomBeliefBucket","reduce","list","str","t","GetHedonReport","hedonHistory","all","flatAverage","weightedAverage","maxSource","minSource","allSum","daySum","sources","j","source","allSources","max","val","PlayerKnowsPrereq","prereq","seen","Array","isArray","some","PlayerKnowsBelief","BeliefString","LawData","key","group","axis","prereqs","IsLaw","gov","l","lawTree","GovPurchaseQualifiesForWelfare","law","buyer","bean","food","health","GovCanPayWelfare","price","cash","AllGoods","MarketTransact","market","listing","demand","seller","salesTaxPercentage","MarketListingSubtract","listPrice","tax","grossPrice","ticksSinceLastSale","bought","MarketGovernmentTransact","quantity","listings","EconomyTryTransact","economy","getSeller","minDemand","maxDemand","monthlyDemand","MarketLowestPriceListing","actualDemand","Math","min","salesTaxPercent","receipt","unfulfilledMonthlyDemand","GetFairGoodPrice","econ","supply","monthlySupply","GetCostOfLiving","fullListings","numberOfSamePriceListings","lowPrice","floor","random","shuffle","array","counter","index","temp","MathClamp","input","Hex","q","r","hex_directions","hex_direction","direction","hex_neighbor","hex","dir","hex_ring","center","radius","a","k","results","cube","b","hex_add","hex_spiral","concat","OriginAccelerator","point","velocity","accelerate_towards","mover","target","acceleration","maxSpeed","colDistance","brake","delta","magnitude","sqrt","accelerator_coast","lerp","cube_lerp","z","cube_round","rx","round","ry","rz","x_diff","abs","y_diff","z_diff","cube_to_axial","axial_to_cube","cube_linedraw","N","cube_distance","layout_flat","f0","f1","f2","f3","b0","b1","b2","b3","start_angle","origin_point","hex_to_pixel","size","origin","h","M","polarToPoint","p","cos","az","sin","transformPoint","transform","BuildingIcon","UpgradedBuildingIcon","BuildingJobIcon","BuildingToGood","GoodToBuilding","JobToBuilding","BuildingToJob","GenerateGeography","numberOfRings","hexes","hex_size","petriRadius","petriOrigin","EnterpriseBuildings","BuildingOpenSlots","s","jobs","upgraded","BuildingTryFreeBean","beanKey","oldLen","GenerateIBuilding","city","type","newBuilding","buildings","nextID","address","buildingKeys","buildingMap","enterpriseKey","enterprises","cityKey","enterpriseType","sellerCityKey","sellerEnterpriseKey","MoverStoreInstance","cache","BuildingUnsetJob","building","employerEnterpriseKey","GetRandomNumber","randomBuffer","Uint32Array","window","crypto","getRandomValues","randomNumber","ceil","GetRandomRoll","chance","buffer","ArrayBuffer","ints","Int8Array","DataView","getFloat64","GetRandomFloat","GetRandom","choices","RandomEthno","PI","CityPrefixes","CityFirstsnames","CityLastnames","GetRandomCityName","GenerateBean","parent","hexPoint","newBean","ethnicity","community","ideals","faith","stamina","discrete_food","discrete_health","discrete_sanity","discrete_stamina","discrete_fun","graceTicks","dob","sanity","beliefs","happiness","lastHappiness","hedonFiveDayRecord","fairGoodPrice","bornInPetri","ticksSinceLastRelax","lastChatMS","action","actionData","act","activity_duration","beanBeliefCount","newBelief","includes","split","GenerateEmoteFromBean","emote","Get","LibertarianTaxUnhappyChance","ProgressivismTaxHappyChance","Bean","activity_queue","speed","onMove","destinationKey","Date","now","buy","buyFood","medicine","buyMeds","fun","buyFun","shelter","buyHousing","belief","BeanBelievesIn","homeCity","mods","majorityEthnicity","book","db","get","getCostOfLiving","party","result","myGood","getFairGoodPrice","traits","policies","multiplier","policy","fx","mag","costOfLiving","bad","idea","canBaby","chat","participation","preachBelief","crimeReason","roll","cost","sanityBonus","ifBelievesInMaybeEmote","strength","believesIn","defense","eventBus","persuasion","trigger","message","nearby","needy","least","targetBeanKey","persuasionStrength","mostInDemandJob","workedForEmployer","employer","getEnterprise","employAndPrice","ownerBeanKey","produceAndPrice","groceries","tryTransact","stolen","steal","housing","diff","alive","wasNotHungry","wasNotSick","bean_life","degrade_per_tick","maybeDie","isInCrisis","meds","babyChance","breedBean","addEmotePickup","canBuy","cause","isDire","die","pains","remove","historicalBeans","death","scarce","player","BeanIsInCrisis","base","BeanCalculateHealth","difficulty","BeanCalculateShelter","BeanCalculateFood","BeanMaybeChat","BeanEmote","out","trait","BeanMaybeBaby","BeanCanBaby","BeanBabyChance","BeanMaybeDie","BeanDie","emotes","BeanLoseSanity","amount","BeanGetSpeech","BeanCanPurchase","BeanGetFace","SignalStoreInstance","alienEnergy","alienBots","alienHedons","newTraitSeen","events","autosave","Goals","found_utopia","text","check","build_house_n_farm","find","reward","energy","bots","beam_3","scan","alien","scanned_bean","set_policy","brainwash","Curriculums","GradeWorld","Happiness","BooleanAverageGrader","o","Prosperity","Stability","Dogma","GradeUpToNumber","speechcrimes","RubricDescription","number","allowance","maximum","NormalizedScoreToGrade","grade","normNumber","GradeWeights","A","B","C","D","F","TechData","tech","techPoints","PlayerReward","change","hedons","HasResearched","techProgress","researchPoints","PlayerCanAfford","qty","PlayerTryPurchase","PlayerPurchase","AgentDurationStoreInstance","elapsed","duration","BeanSetJob","enterprise","EntityAddToSlice","slice","newEntity","SFXToFile","SoundBuffer","file","volume","ended","audio","shift","play","aud","Audio","process","WorldSfxInstance","lib","sfx","slot_size","getSlotOffset","hexToTransform","hexDirectionToJobSlot","2","0","4","1","5","3","PetriBuilding","props","style","cityName","getStyle","UIBuilding","className","UIBuildingSlots","d","jobSlot","hasJob","PriorityNode","value","priority","DumbPriorityQueue","_values","values","sort","BeanActions","enter","agent","deltaMS","destinationTargetIndex","destinationIndex","destinations","intent","newActivity","console","warn","newAccelerator","collide","beanHitDestination","nearbyBeanKeys","beanKeys","bKey","squared","pow","CityGetNearestNeighbors","targets","findNeedy","BeanGetRandomChat","changeState","newState","WanderlustEmoteChance","beanEmote","exit","beanWork","BeanMaybePersuaded","beanBePersuaded","priorities","GetPriorities","top","dequeue","travelState","sideEffect","substitute","SubstituteIntent","CreateTravelFromIntent","BeanMaybeParanoid","buyReceipt","buyAttempts","beanBuy","beanCrime","crimeGood","durationMS","beanRelax","desiredGoodState","EconomyCanBuy","BeanMaybeCrime","BeanMaybeScarcity","IntentToDestination","RouteRandom","buildingDest","keysOfType","CityGetRandomEntertainmentBuilding","Route","destination","GetPriority","wealth_priority","vital_thresh","queue","node","enqueue","buildingType","CityGetRandomBuildingOfType","start","nearestHex","pt","pixel_to_hex","offset","Season","CommonalityBaseCost","CommonalityRandomMaxCost","getMarketTraitListing","rare","PartOfDay","TicksPerHour","simulate_world","pop","unshift","eKey","workers","share","owner","pay","commShare","simulate_every_day","marketTraitsForSale","newTraits","GetMarketTraits","WorldAddEvent","collected","cityID","selectBeansByCity","allowedTreasury","perBean","MaybeRebate","simulate_every_week","simulate_every_month","arr","percent","sum","yearlyInflationDollars","richest","obj","winner","WorldInflate","simulate_every_year","income","currentlyResearchingTech","abductedBeanKeys","beliefInventory","charges","CoL","ageResult","penalty","starving_health","starve","exposure","sick","BeanAge","pickups","lastPoint","openSlotBuildings","canHire","isHiring","BeanTryFindJob","BeanCalculateSanity","goals","goal","goalProgress","done","step","CheckGoals","workingReportCard","CheckReportCard","triadToString","sign","costs","tortrons","join","DefaultDifficulty","emptyHex","build","house","farm","theater","hospital","church","courthouse","park","nature","beam","upgrade","bean_brain","brainwash_ideal","brainimplant_secondary","brainwash_secondary","abduct","gift","empower","vaporize","siphon","scrubHedons","resource","common","uncommon","homeless_health","death_chance","starvation","sickness","vaporization","report_card_progression","worldSlice","createSlice","initialState","hxPosition","deadBeanKeys","ufoKeys","pickupKeys","pickupMagnetPoint","entity","ufos","laws","Spring","seenBeliefs","next_grade","pastReportCards","spotlightEvent","GetBlankWorldState","reducers","refreshMarket","magnetChange","payload","px","worldTick","newGame","loadGame","what","where","changeEnterprise","newType","fireBean","buildingKey","ufo","remove_ufo","ufoKey","cheatAdd","release","lucky_bean_key","luckyBean","washCommunity","washMotive","washNarrative","oldFaith","washBelief","sanityCostBonus","existing","chargeBonus","setResearch","implant","PlayerUseCharge","v","pickUpPickup","pickup","pickupKey","amt","oldAct","ADS","beanGiveCharity","senderBeanKey","_emote","needyBeanKey","_ifBelievesInMaybeEmote","newJob","last","allOfType","BeanTrySetJob","EconomyEmployAndPrice","sellerBeanKey","EconomyProduceAndPrice","enactLaw","data","lawKey","repealLaw","buyBots","buyEnergy","buyTrait","beanPosition","actions","selectCityBeanIDs","createSelector","cityBeanIDs","beansByID","cityBeanKey","useAppDispatch","cityBeans","count","circle","square","triangle","useDispatch","useAppSelector","useSelector","selectedSlice","selectedHexKey","selectedCityKey","selectedBeanKey","doSelectCity","selectedBuildingKey","doSelectHex","doSelectBuilding","doSelectBean","doSelectNone","store","configureStore","reducer","selected","middleware","getDefaultMiddleware","storeApi","next","startsWith","selectSelectedCity","selectSelectedBean","selectSelectedBuilding","buildingID","selectEventIDs","ConfirmButton","confirming","onConfirm","setState","onClick","click","disabled","confirmText","children","React","Component","StringDropdown","onChange","hint","hidden","titleCase","toUpperCase","options","title","getTitleForOption","getTextForOption","required","BeliefWidget","leftButton","titleView","bottomView","EditBeliefInput","frozen","available","wash","divergent","SortedBeliefs","localeCompare","TraitInventoryList","dispatch","dogmatic","BrainwashingContent","isScanned","toFixed","CampaignsPanel","keyToName","starving","hungry","sated","stuffed","homeless","sleepy","awake","rested","sickly","bruised","fresh","sane","stressed","disturbed","NeedReadout","dire","need","dire_style","width","full","full_style","header","median","half","EconomyReport","food_median","health_median","shelter_median","wealth_total","wealth_avg","wealth_median","wealth_dire","wealth_marker","wealthy","wealthy_percentage","wealthy_ownership","unemployed","jobless","avg","houses","farmer","builder","doc","entertainer","EscapeMenu","TreasuryReport","coin","GovernmentPanel","useState","view","setView","LawDetailList","enacted","lKey","revokeLaw","LawFormula","canSeeName","unlocked","every","PlayerMeetsPrereqs","has","PrereqString","GreetingPanel","LoadGameMenu","MainMenu","continueID","HasContinueGame","GetGameSlots","startGame","RobotArm","height","xmlns","classN","fill","display","overflow","strokeWidth","stroke","cy","cx","tool","fontSize","tools","loop","lastI","ResearchPanel","currentTech","tool1","setTool1","tool2","setTool2","tool3","setTool3","tool4","setTool4","useEffect","interval","setInterval","clearInterval","techs","progress","total","complete","isCurrent","rootClassName","renderTech","TraitsReport","BeanIsBuying","AnimatedBean","st","working","speech","face","classes","animationClasses","selectBeanAnimation","isSelected","sitStill","stopPropagation","AnimatedPickup","played","setPlayed","useContext","SfxContext","Mover","MoverContext","el","useRef","pubsub","moverType","moverKey","subscribe","unsubscribe","ref","PetriBeanList","PickupList2","pKey","HexPetriBuilding2","hexKey","selectBuilding","selectCityBuildingByHex","selectCity","PetriHex","extraClasses","hexString","hex_style","xy","onMouseEnter","PetriHexes2","hexStr","SocialBuildings","selectBuildingKeysByCity","selectBuildingsByCity","onClickBuilding","Magnet2","magnetPoint","AnimatedUFO2","showBeam","setShowBeam","setTimeout","HexSizeR","left","WorldTile2","mtn_transforms","mtnRadius","bk","onMouseLeave","uK","CardButton","thin","singleLine","subtext","TraitToCard","CostSmall","rider","renderInner","scanned","innerView","idealPro","idealCon","colSpan","hedonTable","ActivityDisplay","ActivityIcon","acts","actDurations","BeanPanel","faceOverride","setFaceOverride","setInnerView","_resetFace","renderTraits","Error","Subtabs","additionalClasses","active","EnterpriseTypes","EnterpriseTypeIcon","BeamButton","HexStringToHex","HexPanel","eHex","HexBuildingPanel","free","hasJobs","renderDensityWarning","typ","WorkerList","EnterpriseTypePicker","substring","EnterpriseListings","OverviewPanel","clearCity","avg_happy","avg_cash","scannedBeans","from","m","prev","set","Map","entries","aC","CityGetPopulationTraitsList","DetailPanel","openBrainwash","EventsPanel","elements","alert","tallTrigger","shouldEventJumpToBean","href","renderGoal","g","tooltip","renderReward","GoalsPanel","reportCard","margin","MarketPanel","MarketTraits","AutosaveWidget","isDirty","setDirty","isSaving","setSaving","onDirty","dirty","onSaving","BubbleNumberText","bubbleSeed","ev","positive","bubbles","string","changeEvent","bubbleClass","BubbleSeenTraitsText","sub","setBubbles","onEvent","event","useBubbles","CapsuleLabel","label","EnergyAmount","BotsAmount","HedonAmount","Modal","show","closeButtonText","getButton","SeasonWidget","Morning","Noon","Evening","SocialGraph","static","StopPlayFastButtons","timeScale","setTimeScale","GeoNetworkButtons","activeMain","setActiveMain","TimelyEventToggle","eventCount","eventClass","eventIcon","createContext","StoreState","App","previousTimeMS","logicTickAccumulatorMS","millisecondsSinceLastSave","saveAccumulatorMS","tick","timeMS","deltaTimeMS","gameDeltaTimeMS","animate_ufos","getState","pickupIDs","pickupID","magnet","animate_pickups","actResult","exitAction","enterAction","animate_beans","SaveGame","requestAnimationFrame","cheatMode","keyupHandler","activeModal","shiftKey","onDeath","startSpotlight","timescaleBeforeSpotlight","activeRightPanel","document","addEventListener","time","removeEventListener","endSpotlight","Provider","defaultScale","wheel","slot","GetGame","n","getPanel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7d18b2e6.chunk.js","sourcesContent":["import { Point } from \"../simulation/Geography\";\r\n\r\nexport type EventTrigger = 'speechcrime'|'birth'|'death'|'nojobslots'|'marketrefresh'|'persuasion';\r\n\r\nexport interface IEvent{\r\n    key: number;\r\n    icon: string;\r\n    message: string;\r\n    beanKey?: number;\r\n    cityKey?: number;\r\n    point?: Point;\r\n    trigger: EventTrigger;\r\n}\r\n\r\nexport class PubSub<T>{\r\n    constructor(private onPublish?: (args: T) => void){}\r\n    private callbacks: Array<(args: T) => void> = [];\r\n    public current: T|undefined = undefined;\r\n    public publish(args: T){\r\n        if (this.onPublish)\r\n            this.onPublish(args);\r\n        this.current = args;\r\n        this.callbacks.forEach((c) => c(args));\r\n    }\r\n    public subscribe(callback: (args: T) => void){\r\n        this.callbacks.push(callback);\r\n    }\r\n    public unsubscribe(callback: (ev: T) => void) {\r\n        this.callbacks.splice(this.callbacks.indexOf(callback), 1);\r\n    }\r\n}\r\n\r\nexport class ChangePubSub extends PubSub<{change: number}>{\r\n}\r\n\r\nexport type IEventBus = {[key in EventTrigger]: PubSub<IEvent>};\r\nexport interface IEventBuffer{\r\n    buffer: IEvent[]   \r\n}\r\nexport const EventBusBufferLength = 20; \r\nexport class EventBus implements IEventBus, IEventBuffer{\r\n    buffer: IEvent[] = [];\r\n    private sendToBuffer = (event: IEvent) => {\r\n        if (this.buffer.length > EventBusBufferLength){\r\n            this.buffer.pop();\r\n        }\r\n        this.buffer.unshift(event);\r\n    }\r\n    speechcrime = new PubSub<IEvent>(this.sendToBuffer);\r\n    nojobslots = new PubSub<IEvent>(this.sendToBuffer);\r\n    birth = new PubSub<IEvent>(this.sendToBuffer);\r\n    death = new PubSub<IEvent>(this.sendToBuffer);\r\n    marketrefresh = new PubSub<IEvent>(this.sendToBuffer);\r\n    persuasion = new PubSub<IEvent>(this.sendToBuffer);\r\n}\r\n\r\nexport class Live<T>{\r\n    public readonly onChange = new PubSub<T>();\r\n    constructor(protected current: T){}\r\n    public set(newValue: T){\r\n        this.current = newValue;\r\n        if (this.afterSetBeforePublish)\r\n            this.afterSetBeforePublish(newValue);\r\n        this.onChange.publish(newValue);\r\n    }\r\n    public get get(): T{\r\n        return this.current;\r\n    }\r\n    public afterSetBeforePublish?: (val: T) => void; \r\n}\r\nexport class LiveList<T> extends Live<Array<T>>{\r\n    public readonly onPush = new PubSub<T>();\r\n    public push(child: T): void{\r\n        this.set([...this.get, child]);\r\n        this.onPush.publish(child);\r\n    }\r\n    public remove(child: T): void{\r\n        const all = this.get;\r\n        const i = all.indexOf(child);\r\n        if (i > -1){\r\n            all.splice(i, 1);\r\n            this.set([...all]);\r\n        }\r\n    }\r\n}\r\nexport class LiveMap<K, V> extends Live<Map<K, V>>{\r\n    public readonly onAdd = new PubSub<{k: K, v: V}>();\r\n    public add(newKey: K, newValue: V){\r\n        const copy = new Map<K, V>(this.current);\r\n        copy.set(newKey, newValue);\r\n        this.set(copy);\r\n        this.onAdd.publish({k: newKey, v: newValue});\r\n    }\r\n    public remove(key: K){\r\n        const copy = new Map<K, V>(this.current);\r\n        copy.delete(key);\r\n        this.set(copy);\r\n    }\r\n    public at(key: K): V|undefined{\r\n        return this.current.get(key);\r\n    }\r\n}","import { PubSub } from \"./events/Events\";\r\nimport { IDate } from \"./simulation/Time\";\r\nimport { IWorldState } from \"./state/features/world\";\r\n\r\nconst GameSavePrefix = 'game-';\r\nconst GameBriefPrefix = 'game-brief-';\r\nconst LastGameSaveIDKey = 'last-game-id';\r\nconst MaxNumGameSlots = 3;\r\n\r\ninterface IWorldBrief {\r\n    Name: string,\r\n    Population: number,\r\n    Age: IDate\r\n}\r\nexport function isGame(g: {game: IWorldState}|{errors: string[]}): g is {game:IWorldState}{\r\n    return (<any>g).game != null;\r\n}\r\nexport class GameStorage{\r\n    HasContinueGame(): number|undefined{\r\n        const rawID = localStorage.getItem(LastGameSaveIDKey);\r\n        if (rawID == null)\r\n            return undefined;\r\n\r\n        const id = parseInt(rawID);\r\n        if (isNaN(id))\r\n            return undefined;\r\n\r\n        const rawgame = localStorage.getItem(`${GameSavePrefix}${id}`);\r\n        if (rawgame != null)\r\n            return id;\r\n        else\r\n            return undefined;\r\n    }\r\n    GetGameSlots(): {id: number, brief?: IWorldBrief}[] {\r\n        const slots: {id: number, brief: IWorldBrief}[] = [];\r\n        for (let i = 0; i < MaxNumGameSlots; i++) {\r\n            const brief = localStorage.getItem(`${GameBriefPrefix}${i+1}`);\r\n            slots.push({\r\n                id: i+1,\r\n                brief: brief ? JSON.parse(brief) : undefined\r\n            });\r\n        }\r\n        return slots;\r\n    }\r\n    GetGame(id: number): {game: IWorldState}|{errors: string[]}{\r\n        const rawgame = localStorage.getItem(`${GameSavePrefix}${id}`);\r\n        if (rawgame){\r\n\r\n        } else {\r\n            return {\r\n                errors: ['Cannot find game']\r\n            }\r\n        }\r\n        try {\r\n            const game = JSON.parse(rawgame);\r\n            return {\r\n                game: game as IWorldState\r\n            }\r\n        } catch(e) {\r\n            return {\r\n                errors: [e]\r\n            }\r\n        }\r\n    }\r\n    SaveGame(world: IWorldState){\r\n        const raw = JSON.stringify(world);\r\n        const brief: IWorldBrief = {\r\n            Name: world.cities.byID[0].name,\r\n            Population: world.beans.allIDs.map(x => world.beans.byID[x]).filter(y => y.lifecycle != 'dead').length,\r\n            Age: {\r\n                day: world.date.day,\r\n                hour: world.date.hour,\r\n                season: world.date.season,\r\n                year: world.date.year\r\n            }\r\n        };\r\n        localStorage.setItem(`${GameSavePrefix}${world.saveSlot}`, raw);\r\n        localStorage.setItem(`${GameBriefPrefix}${world.saveSlot}`, JSON.stringify(brief));\r\n        localStorage.setItem(LastGameSaveIDKey, world.saveSlot.toString());\r\n        this.Dirty.publish(false);\r\n        this.Saving.publish();\r\n    }\r\n    Dirty = new PubSub<boolean>();\r\n    Saving = new PubSub<void>();\r\n}\r\nexport const GameStorageInstance = new GameStorage();","import * as React from 'react';\r\nimport { Bean } from './simulation/Bean';\r\nimport { Economy } from './simulation/Economy';\r\nimport { Policy, Party, BaseParty, ICityPartyHQ } from './simulation/Politics';\r\nimport { IInstitution, IOrganization, Charity } from './simulation/Institutions';\r\nimport { IEvent, EventBus, LiveList } from './events/Events';\r\nimport { Season, IDate } from './simulation/Time';\r\nimport { Government, PollTaxWeeklyAmount } from './simulation/Government';\r\nimport { TechData } from './simulation/Player';\r\nimport { accelerate_towards, accelerator_coast, Geography, move_towards } from './simulation/Geography';\r\nimport { City, Pickup } from './simulation/City';\r\nimport { shuffle } from './simulation/Utils';\r\nimport { Act, IActListener, IBean, IChatData } from './simulation/Agent';\r\nimport { IDifficulty, PlayerResources } from './Game';\r\nimport { type } from 'os';\r\nimport { GetHedonReport, IsBeliefDivergent, SecondaryBeliefData, TraitBelief } from './simulation/Beliefs';\r\nimport { WorldSfxInstance, WorldSound } from './WorldSound';\r\nimport { GetMarketTraits, MarketTraitListing } from './simulation/MarketTraits';\r\nimport { IWorldState } from './state/features/world';\r\n\r\nexport interface IBeanContainer{\r\n    /**\r\n     * all beans ever, including dead ones\r\n     */\r\n    historicalBeans: LiveList<Bean>;\r\n    /**\r\n     * current non-dead beans\r\n     */\r\n    beans: LiveList<Bean>;\r\n}\r\nexport const PickupPhysics = {\r\n    Brake: { x: .94, y: .94},\r\n    AccelerateS: 60,\r\n    MaxSpeed: 9,\r\n    CollisionDistance: 10\r\n}\r\nexport const BeanPhysics = {\r\n    Brake: { x: .94, y: .94},\r\n    AccelerateS: 10,\r\n    MaxSpeed: 4,\r\n    CollisionDistance: 10\r\n}\r\nexport const MaxHedonHistory = 5;\r\n\r\nexport interface IEnvironment{\r\n    year: number;\r\n    season: Season;\r\n}\r\n\r\nexport interface ITile {\r\n    name?: string, \r\n    url: string, \r\n    type: string,\r\n    key: number\r\n}\r\n\r\n\r\nexport type TraitCommunity = 'state'|'ego';\r\nexport type TraitIdeals = 'prog'|'trad';\r\nexport type TraitEthno = 'circle'|'square'|'triangle';\r\nexport type TraitFaith = 'rocket'|'music'|'dragon'|'noFaith';\r\nexport type TraitFood = 'starving'|'hungry'|'sated'|'stuffed';\r\nexport type TraitStamina = 'homeless'|'sleepy'|'awake'|'rested';\r\nexport type TraitHealth = 'sick'|'sickly'|'bruised'|'fresh';\r\nexport type TraitSanity = 'psychotic'|'disturbed'|'stressed'|'sane';\r\nexport type TraitJob = 'farmer'|'builder'|'doc'|'entertainer'|'cleric'|'polit'|'jobless';\r\n\r\nexport type Trait = TraitCommunity|TraitIdeals|TraitEthno|TraitFaith|TraitFood|TraitStamina|TraitHealth|TraitSanity;\r\n\r\nexport const TraitIcon: {[key in Trait]: string} = {\r\n    'state': '🕊️', 'ego': '🦅',\r\n    'prog': '⚖️', 'trad': '👑',\r\n    'circle': '🤎', 'square': '💛', 'triangle': '🧡',\r\n    'rocket': '🚀', 'music': '🎵', 'dragon': '🐲',\r\n    'noFaith': '⚫️',\r\n    'starving': '🍴', 'hungry': '🍽️', 'sated': '🥜', 'stuffed': '🥩',\r\n    'homeless': '🌨️', 'sleepy': '🌙', 'awake': '☀️', 'rested': '🌞',\r\n    'sick': '🤢', 'sickly': '😷', 'bruised': '🩹', 'fresh': '💪',\r\n    'psychotic': '🤪', 'disturbed': '🤤', 'stressed':'', 'sane': '🧠',\r\n}\r\nexport enum MaslowHappinessScore {Deficient= -.25, Sufficient=0, Abundant=.15}\r\n\r\nexport interface IHappinessModifier{\r\n    reason: string;\r\n    /**\r\n     * -1 to 1, where 0 is \"no effect\" and +/-1 is +/-100%\r\n     */\r\n    mod: number;\r\n}\r\n\r\nexport function GetHappiness(array: IHappinessModifier[]){\r\n    const clampedPercent = Math.min(\r\n        1,\r\n        Math.max(\r\n            -1,\r\n            array.reduce((sum, hapMod) => {\r\n                sum += hapMod.mod;\r\n                return sum\r\n            }, 0)\r\n        )\r\n    );\r\n\r\n    return (clampedPercent * 100);\r\n}\r\n\r\nexport const TraitToModifier: {[key in TraitFood|TraitStamina|TraitHealth]: IHappinessModifier} = {\r\n    'homeless': {reason: 'Homeless', mod: MaslowHappinessScore.Deficient},\r\n    'sleepy': {reason: 'Renting', mod: MaslowHappinessScore.Sufficient},\r\n    'awake': {reason: 'Homeowner', mod: MaslowHappinessScore.Sufficient},\r\n    'rested': {reason: 'Homeowner', mod: MaslowHappinessScore.Abundant},\r\n    'sick': {reason: 'Sick', mod: MaslowHappinessScore.Deficient},\r\n    'sickly': {reason: 'Sick', mod: MaslowHappinessScore.Sufficient},\r\n    'bruised': {reason: 'Bruised', mod: MaslowHappinessScore.Sufficient},\r\n    'fresh': {reason: 'Healthy', mod: MaslowHappinessScore.Abundant},\r\n    'starving': {reason: 'Hungry', mod: MaslowHappinessScore.Deficient},\r\n    'hungry': {reason: 'Hungry', mod: MaslowHappinessScore.Sufficient},\r\n    'sated': {reason: 'Sated', mod: MaslowHappinessScore.Sufficient},\r\n    'stuffed': {reason: 'Stuffed', mod: MaslowHappinessScore.Abundant},\r\n}\r\nexport interface IThreshold {warning: number, sufficient: number, abundant: number}\r\nexport const GoodToThreshold: {[key in TraitGood]: IThreshold} = {\r\n    'food': {warning: 0.5, sufficient: 1, abundant: 3},\r\n    'shelter': {warning: 0.5, sufficient: 1, abundant: 7},\r\n    'medicine': {warning: 0.5, sufficient: 1, abundant: 3},\r\n    'fun': {warning: 0.1, sufficient: 1, abundant: 3},\r\n}\r\n\r\nexport function JobToGood(job: TraitJob): TraitGood{\r\n    switch(job){\r\n        case 'builder': return 'shelter';\r\n        case 'doc': return 'medicine';\r\n        case 'entertainer': return 'fun';\r\n        default: case 'farmer': return 'food';\r\n    }\r\n}\r\nexport function GoodToJob(good: TraitGood): TraitJob{\r\n    switch(good){\r\n        case 'shelter': return 'builder';\r\n        case 'medicine': return 'doc';\r\n        case 'fun': return 'entertainer';\r\n        default: case 'food': return 'farmer';\r\n    }\r\n}\r\nexport type TraitGood = 'food'|'shelter'|'medicine'|'fun';\r\nexport const GoodIcon: {[key in TraitGood]: string} ={\r\n    'food': '🥪',\r\n    'shelter': '🏠', \r\n    'medicine': '💊', \r\n    'fun': '👏'\r\n};\r\n\r\nexport type TraitEmote = 'happiness'|'unhappiness'|'love'|'hate';\r\nexport const EmoteIcon: {[key in TraitEmote]: string} ={\r\n    'love': '💛',\r\n    'happiness': '👍',\r\n    'unhappiness': '💢',\r\n    'hate': '💔'\r\n};\r\nexport const EmotionWorth: {[key in TraitEmote]: number} ={\r\n    'love': 5,\r\n    'happiness': 1,\r\n    'unhappiness': -1,\r\n    'hate': -5\r\n};\r\nexport const EmotionSanity: {[key in TraitEmote]: number} ={\r\n    'love': 1,\r\n    'happiness': 0.2,\r\n    'unhappiness': 0,\r\n    'hate': -1\r\n};\r\n\r\nexport function WorldInflate(world: IWorldState){\r\n    const beans = world.beans.allIDs.reduce((arr, key) => { arr.push(world.beans.byID[key]); return arr;}, [] as IBean[])\r\n    const allMoney = beans.reduce((sum, b) => sum+b.cash, 0);\r\n    const percent = allMoney / 100;\r\n    const yearlyInflationDollars = Math.round(percent * 1);\r\n    if (yearlyInflationDollars > 0){\r\n        const richest = beans.reduce((obj: {winner?: IBean, max: number}, b) => {\r\n            if (b.cash > obj.max){\r\n                obj.winner = b;\r\n                obj.max = b.cash;\r\n            }\r\n            return obj;\r\n        }, {max: 0});\r\n        if (richest.winner){\r\n            richest.winner.cash += yearlyInflationDollars;\r\n        }\r\n    }\r\n}","import { TraitCommunity, TraitFaith, TraitIdeals } from \"../World\";\r\n\r\nexport type BeliefCommonality = 'common'|'uncommon'|'rare';\r\nexport const CommonalityChances: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 2,\r\n    'rare': 1\r\n};\r\n\r\nexport type TraitBelief = 'Diligence'| // happy from work\r\n'Natalism'| // increased % of having kids\r\n'Antinatalism'|\r\n'Naturalism'|\r\n'Hedonism'| //more entertainment\r\n'Progressivism'|\r\n'Libertarianism'|\r\n'Parochialism'|\r\n'Cosmopolitanism'|\r\n'Capitalism'|\r\n'Socialism'|\r\n'Communism'|\r\n// 'Tribalism'| \r\n// 'Globalism'| \r\n// 'Pacifism'| \r\n'Neuroticism'| // takes extra sanity damage\r\n'Dogmatism'| \r\n// 'Mysticism'| \r\n 'Paranoia'| \r\n// 'Evangelism'| \r\n// 'Fanaticism'| // doesn't like beings that don't share narrative \r\n'Authority'| //less crime, more crime reports\r\n'Anarchism'| // breaks rules easily\r\n'Sadism'| \r\n'Vandalism'|\r\n'Antagonism'|\r\n'Enthusiasm'|\r\n'Gossip'|\r\n'Extroversion'|\r\n'Charity'| // % to donate\r\n'Gluttony'|\r\n'Wanderlust'|\r\n'Germophobia'|\r\n'Bloodthirst'|\r\n'Introversion'|\r\n'Charisma'|\r\n'Depression'|\r\n'Optimism'|\r\n'Fraud'|\r\n'Greed'; // steal easier\r\n\r\n\r\n// 'friendly'| // likes all beings more\r\n// 'realistic'| // lower happiness\r\n// 'athletic'| // takes less health damage\r\n// 'open-minded'| // beliefs are easily changed\r\n\r\nexport type BeliefSubject = 'self'|'other';\r\nexport type BeliefVerb = 'are'|'arenot';\r\nexport interface IBeliefData {\r\n    noun: string,\r\n    adj: string,\r\n    icon: string,\r\n    description?: string,\r\n    rarity: BeliefCommonality,\r\n    idealPro?: Array<TraitIdeals|TraitCommunity>,\r\n    idealCon?: Array<TraitIdeals|TraitCommunity>\r\n}\r\nexport const PrimaryBeliefData: {[key in TraitIdeals|TraitCommunity]: IBeliefData} = {\r\n    prog: {\r\n        noun: 'Progressivism', adj: 'Progressive', icon: '⚖️',\r\n        description: \"Strives to help others\", rarity: 'common',\r\n    },\r\n    trad: {\r\n        noun: 'Elitism', adj: 'Elitist', icon: '👑',\r\n        description: \"Strives for individual power\", rarity: 'common',\r\n    },\r\n    state: {\r\n        noun: 'Collectivism', adj: 'Collectivist', icon: '🕊️',\r\n        description: \"Trusts in the social group\", rarity: 'common',\r\n    },\r\n    ego: {\r\n        noun: 'Independence', adj: 'Independent', icon: '🦅',\r\n        description: \"Trusts only in oneself\", rarity: 'common',\r\n    },\r\n}\r\nexport const NarrativeBeliefData: {[key in TraitFaith]: IBeliefData} = {\r\n    rocket: {\r\n        noun: 'Futurism', adj: 'Futuristic', icon: '🚀',\r\n        description: \"Loves stories of the far future\", rarity: 'common',\r\n    },\r\n    dragon: {\r\n        noun: 'Mythology', adj: 'Mythical', icon: '🐲',\r\n        description: \"Loves stories of the legendary past\", rarity: 'common',\r\n    },\r\n    music: {\r\n        noun: 'Drama', adj: 'Dramatic', icon: '🎵',\r\n        description: \"Loves stories of emotional bonding\", rarity: 'common',\r\n    },\r\n    noFaith: {\r\n        noun: 'Nihilism', adj: 'Nihilist', icon: '⚫️',\r\n        description: \"Hates fairy tales\", rarity: 'common',\r\n    },\r\n}\r\nexport const SecondaryBeliefData: {[key in TraitBelief]: IBeliefData} = {\r\n    // misc 🎲 traits\r\n    Diligence: {\r\n        noun: 'Diligence', adj: 'Diligence', icon: '💪', rarity: 'common',\r\n        description: \"🎲 to 👍 while working\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['state', 'ego']\r\n    },\r\n    Natalism: {\r\n        noun: 'Natalism', adj: 'Natalist', icon: '👶', rarity: 'common',\r\n        description: \"Extra 🎲 for 👶;Extra 👍 after birth\" //implemented\r\n    },\r\n    Antinatalism: {\r\n        noun: 'Antinatalism', adj: 'Antinatalist', icon: '🚷', rarity: 'uncommon',\r\n        description: \"Less 🎲 for 👶;💢 after birth\" //implemented\r\n    },\r\n    Charity: {\r\n        noun: 'Charity', adj: 'Charitable', icon: '😇', rarity: 'uncommon',\r\n        description: \"🎲 to gift 💰 to the penniless; and spread 👍\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog']\r\n    },\r\n    Progressivism: {\r\n        noun: 'Progressivism', adj: 'Progressive', icon: '⚖️', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when paying taxes\" //implemented\r\n    },\r\n    Libertarianism: {\r\n        noun: 'Libertarianism', adj: 'Libertarian', icon: '🔫', rarity: 'rare',\r\n        description: \"🎲 to 💢 when paying taxes\", //implemented\r\n    },\r\n    Wanderlust: {\r\n        noun: 'Wanderlust', adj: 'Wanderer', icon: '🔭', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when travelling\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Germophobia: {\r\n        noun: 'Germophobia', adj: 'Germophobic', icon: '🤧', rarity: 'rare',\r\n        description: \"💢 when sick or working in hospital\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n\r\n    // work traits\r\n    Parochialism: {\r\n        noun: 'Parochialism', adj: 'Parochial', icon: '🐮', rarity: 'common',\r\n        description: \"Extra 👍 working 🌾; 💢 from dense houses\",  //first part implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Cosmopolitanism: {\r\n        noun: 'Cosmopolitanism', adj: 'Cosmopolitan', icon: '🍸', rarity: 'common',\r\n        description: \"Extra 👍 working 🎻; 💢 from rural houses\",  //first part implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Capitalism: {\r\n        noun: 'Capitalism', adj: 'Capitalist', icon: '🎩', rarity: 'common',\r\n        description: \"💢 working in co-ops and communes; Extra 👍 when owner\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Socialism: {\r\n        noun: 'Socialism', adj: 'Socialist', icon: '🤝', rarity: 'common',\r\n        description: \"Extra 👍 working in co-ops\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Communism: {\r\n        noun: 'Communism', adj: 'Communist', icon: '⚒️', rarity: 'common',\r\n        description: \"💢 working in companies\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n\r\n    Fraud: {\r\n        noun: 'Fraud', adj: 'Fraudulent', icon: '🤥', rarity: 'uncommon',\r\n        description: \"🎲 to avoid taxes; Extra 🎲 for theft 😈 Crime\"\r\n    },\r\n\r\n    // 👍 traits\r\n    Naturalism: {\r\n        noun: 'Naturalism', adj: 'Naturalist', icon: '🛶', rarity: 'uncommon',\r\n        description: \"Extra 👍 from 😎; 😎 3x longer\" //implemented\r\n    },\r\n    Hedonism: {\r\n        noun: 'Hedonism', adj: 'Hedonistic', icon: '💋', rarity: 'uncommon',\r\n        description: \"🎲 to emote extra 👍;🎲 to 💢 when working;\", //implemented\r\n        //idealCon: ['prog'], idealPro: ['ego', 'trad']\r\n    },\r\n    Gluttony: {\r\n        noun: 'Gluttony', adj: 'Glutton', icon: '🎃', rarity: 'common',\r\n        description: \"Extra 👍 when stuffed; Extra 💢 when hungry;\", //implemented\r\n        //idealCon: ['prog'], idealPro: ['ego', 'trad']\r\n    },\r\n    Paranoia: {\r\n        noun: 'Paranoia', adj: 'Paranoid', icon: '👽', rarity: 'uncommon',\r\n        description: \"🎲 to 💢 at any time\",  //implemented\r\n        //idealCon: ['state'], idealPro: ['ego']\r\n    },\r\n    Depression: {\r\n        noun: 'Depression', adj: 'Depressive', icon: '😓', rarity: 'common',\r\n        description: \"🎲 to 💢 when unhappy\",\r\n    },\r\n    Optimism: {\r\n        noun: 'Optimism', adj: 'Optimistic', icon: '😺', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when happy\",\r\n    },\r\n\r\n    // 😈 Crime traits\r\n    Authority: {\r\n        noun: 'Authority', adj: 'Authoritarian', icon: '👢', rarity: 'common',\r\n        description: \"Less 🎲 for all 😈 Crime\", //implemented\r\n        //idealCon: ['ego'], idealPro: ['state']\r\n    },\r\n    Anarchism: {\r\n        noun: 'Anarchism', adj: 'Anarchist', icon: '🖕', rarity: 'uncommon',\r\n        description: \"Extra 🎲 for all 😈 Crime\", //implemented\r\n    },\r\n    Greed: {\r\n        noun: 'Greed', adj: 'Greedy', icon: '🤑', rarity: 'common',\r\n        description: \"Extra 🎲 for theft 😈 Crime; Extra 👍 when rich\",\r\n        //idealCon: ['prog'], idealPro: ['trad']\r\n    },\r\n    Bloodthirst: {\r\n        noun: 'Bloodthirst', adj: 'Bloodthirsty', icon: '🩸', rarity: 'rare',\r\n        description: \"High 🎲 to ☠️ Kill during 😈 Crime\"\r\n    },\r\n    // Pacifism: {\r\n    //     noun: 'Pacifism', adj: 'Pacifist', icon: '😘', rarity: 'common',\r\n    //     description: \"will never punish others\",\r\n    //     idealCon: ['trad'], idealPro: ['prog']\r\n    // },\r\n    // Mysticism: {\r\n    //     noun: 'Mysticism', adj: 'Mystical', icon: '🔮', rarity: 'common',\r\n    //     description: \"🎲 to 👏 in any conversation\",\r\n    //     idealCon: ['trad'], idealPro: ['prog']\r\n    // },\r\n\r\n    // 🗣️ traits\r\n    Extroversion: {\r\n        noun: 'Extroversion', adj: 'Extroverted', icon: '🤩', rarity: 'common',\r\n        description: \"Extra 🎲 to start a 🗣️\", //implemented\r\n    },\r\n    Introversion: {\r\n        noun: 'Introversion', adj: 'Introverted', icon: '🤓', rarity: 'uncommon',\r\n        description: \"Less 🎲 to be in a 🗣️\", //implemented\r\n    },\r\n    Charisma: {\r\n        noun: 'Charisma', adj: 'Charismatic', icon: '😏', rarity: 'uncommon',\r\n        description: \"More 🎲 to persuade in a 🗣️\", //implemented\r\n    },\r\n    Gossip: {\r\n        noun: 'Gossip', adj: 'Gossipy', icon: '📞', rarity: 'common',\r\n        description: \"🎲 to spread 💢 in a 🗣️; 🎲 to 👍 after 🗣️\", //implemented\r\n    },\r\n    Antagonism: {\r\n        noun: 'Antagonism', adj: 'Antagonistic', icon: '🤬', rarity: 'common',\r\n        description: \"🎲 to spread 💢 in a 🗣️\" //implemented\r\n    },\r\n    Enthusiasm: {\r\n        noun: 'Enthusiasm', adj: 'Enthusiastic', icon: '🥳', rarity: 'common',\r\n        description: \"🎲 to spread 👍 in a 🗣️\" //implemented\r\n    },\r\n    // Globalism: {\r\n    //     noun: 'Globalism', adj: 'Globalist', icon: '🌍', rarity: 'common',\r\n    //     description: \"🎲 to 👍 other hair colors in a 🗣️\",\r\n    //     idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    // },\r\n    // Tribalism: {\r\n    //     noun: 'Tribalism', adj: 'Tribal', icon: '🏰', rarity: 'common',\r\n    //     description: \"🎲 to 💢 other hair colors in a 🗣️\",\r\n    //     idealCon: ['prog'], idealPro: ['state', 'ego']\r\n    // },\r\n\r\n    // narrative traits\r\n    // Evangelism: {\r\n    //     noun: 'Evangelism', adj: 'Evangelist', icon: '📣', rarity: 'common',\r\n    //     description: \"+50% persuasion of 🎭\",\r\n    //     idealCon: ['ego'], idealPro: ['state']\r\n    // },\r\n    // Fanaticism: {\r\n    //     noun: 'Fanaticism', adj: 'Fanatical', icon: '👺', rarity: 'common',\r\n    //     description: \"🎲 to 💢 other 🎭\",\r\n    //     idealCon: ['prog'], idealPro: []\r\n    // },\r\n    // Xenophobia: {\r\n    //     noun: 'Xenophobia', adj: 'Xenophobic', icon: '🛑', rarity: 'common',\r\n    //     description: \"🎲 to 💢 when living with other hair colors\",\r\n    // },\r\n\r\n    // super bad traits\r\n    Sadism: {\r\n        noun: 'Sadism', adj: 'Sadistic', icon: '😈', rarity: 'rare',\r\n        description: \"🎲 to ☠️ Kill in a 🗣️;👍 from ☠️ Kill\"\r\n    },\r\n    Vandalism: {\r\n        noun: 'Vandalism', adj: 'Vandal', icon: '💩', rarity: 'rare',\r\n        description: \"🎲 to destroy goods;👍 from 😈 Theft Crime\"\r\n    },\r\n\r\n    // madness traits\r\n    // Delirium: {\r\n    //     noun: 'Delirium', adj: 'Delirious', icon: '😪', rarity: 'rare',\r\n    //     description: \"Chooses actions at random\"\r\n    // },\r\n    // DelusionalMania: {\r\n    //     noun: 'Delusional Mania', adj: 'Delusional Maniac', icon: '😵', rarity: 'rare',\r\n    //     description: \"🎲 to ☠️ nearby subjects\"\r\n    // },\r\n    // Catatonia: {\r\n    //     noun: 'Catatonia', adj: 'Catatonic', icon: '😶', rarity: 'rare',\r\n    //     description: \"-50% walk speed. Cannot work.\"\r\n    // },\r\n\r\n    // meta-traits\r\n    Neuroticism: {\r\n        noun: 'Neuroticism', adj: 'Neurotic', icon: '😱', rarity: 'rare',\r\n        description: \"+100% 🧠 damage\", //implemented\r\n    },\r\n    Dogmatism: {\r\n        noun: 'Dogmatism', adj: 'Dogmatic', icon: '🐶', rarity: 'uncommon',\r\n        description: \"Cannot change beliefs\", //implemented\r\n    },\r\n};\r\n\r\nexport function IsIdealDivergent(con: TraitCommunity|TraitIdeals, utopiaMotive: TraitIdeals, utopiaCommunity: TraitCommunity): boolean{\r\n    switch(con){\r\n        case 'trad':\r\n        case 'prog':\r\n            return con == utopiaMotive;\r\n        case 'state':\r\n        case 'ego':\r\n            return con == utopiaCommunity;\r\n    }\r\n}\r\n\r\nexport function IsBeliefDivergent(belief: TraitBelief, utopiaMotive: TraitIdeals, utopiaCommunity: TraitCommunity): boolean{\r\n    const data = SecondaryBeliefData[belief];\r\n    return data.idealCon != null && data.idealCon.reduce((isDivergent: boolean, con) => {\r\n        return isDivergent || IsIdealDivergent(con, utopiaMotive, utopiaCommunity);\r\n    }, false);\r\n}\r\n\r\nexport const BeliefsAll = Object.keys(SecondaryBeliefData).map((x) => x as TraitBelief);\r\n\r\n/**\r\n * static list of beliefs with rarity\r\n * \r\n * common traits are duplicated many times within the array\r\n * rarer traits have fewer duplications or a singular instance \r\n */\r\nexport const RandomBeliefBucket = Object.keys(SecondaryBeliefData).reduce((list, str) => {\r\n    const t = str as TraitBelief;\r\n    const slots = CommonalityChances[SecondaryBeliefData[t].rarity];\r\n    for (let i = 0; i < slots; i++) {\r\n        list.push(t);\r\n    }\r\n    return list;\r\n}, [] as TraitBelief[]);\r\n\r\nexport interface Belief{\r\n    subject: BeliefSubject;\r\n    verb: BeliefVerb;\r\n    adj: TraitBelief;\r\n}\r\n\r\nexport type HedonSourceToVal = {[source: string]: number};\r\nexport interface HedonReport {\r\n    flatAverage: number,\r\n    weightedAverage: number,\r\n    maxSource: string,\r\n    minSource: string,\r\n    all: HedonSourceToVal\r\n}\r\nexport interface HedonExtremes { max:number, min:number }\r\n\r\nexport function GetHedonReport(hedonHistory: HedonSourceToVal[]): HedonReport {\r\n    if (hedonHistory.length === 0){\r\n        return {\r\n            all: {},\r\n            flatAverage: 0,\r\n            weightedAverage: 0,\r\n            maxSource: '',\r\n            minSource: ''\r\n        }\r\n    }\r\n    const all: {[source: string]: number} = {};\r\n    let weightedAverage: number = 0;\r\n    let allSum: number = 0;\r\n    for (let i = 0; i < hedonHistory.length; i++) {\r\n        const day = hedonHistory[i];\r\n        let daySum = 0;\r\n        const sources = Object.keys(day);\r\n        for (let j = 0; j < sources.length; j++) {\r\n            const source = sources[j];\r\n            daySum += day[source];\r\n            if (!all[source]) all[source] = 0;\r\n            all[source] += day[source];\r\n        }\r\n        weightedAverage += daySum / (i + 1);\r\n        allSum += daySum;\r\n    }\r\n\r\n    const allSources = Object.keys(all);\r\n    return {\r\n        flatAverage: allSum / hedonHistory.length,\r\n        weightedAverage: weightedAverage,\r\n        maxSource: allSources.reduce((max, source) => {\r\n            if (all[source] > max.val)\r\n                return {source: source, val: all[source]};\r\n            else return max;\r\n        }, {source: '', val: 0}).source,\r\n        minSource: allSources.reduce((max, source) => {\r\n            if (all[source] < max.val)\r\n                return {source: source, val: all[source]};\r\n            else return max;\r\n        }, {source: '', val: 0}).source,\r\n        all: all\r\n    }\r\n}","import { Live } from \"../events/Events\";\r\nimport { TraitCommunity, TraitFood, TraitGood, TraitHealth, TraitIdeals } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { Bean } from \"./Bean\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { IEconomicAgent } from \"./Economy\";\r\nimport { IPolicy } from \"./Politics\";\r\n\r\nexport type LawGroup = 'Taxation'|'Welfare'|'Economics'|'Crime'|'Culture';\r\nexport type LawAxis = 'wel_food'|'wel_house'|'wel_health'|'tax_basic'|'tax_second'|'econ_sub'|'cul_rel'|'cul_theo'|'crime_theo';\r\n\r\nexport type LawType = 'civil'|'criminal';\r\n\r\nexport type LawKey = 'food_aid'\r\n|'medical_aid'\r\n|'poll_tax'\r\n// |'wealth_tax'\r\n// |'food_bank'\r\n// |'univ_rations'\r\n// |'housing_subsidy'\r\n// |'state_apartments'\r\n// |'clinics'\r\n// |'grain_sub'\r\n// |'arts'\r\n// |'theocracy'\r\n// |'secularism'\r\n// |'atheism'\r\n// |'mythology'\r\n// |'futurism'\r\n// |'drama'\r\n|'sales_tax'\r\n// |'vice_tax'\r\n// |'prop_tax'\r\n|'death_tax';\r\n\r\nexport type LawPrereq = TraitBelief|TraitBelief[];\r\nexport const DollarPerBeanRebateThreshold = 1;\r\nexport const PollTaxWeeklyAmount = 0.1;\r\n\r\nexport function PlayerCanSeePrereqs(prereqs: LawPrereq[], seen: {[belief: string]: boolean}){\r\n    return prereqs.length === 0 || prereqs.some((x) => PlayerKnowsPrereq(x, seen));\r\n}\r\nexport function PlayerMeetsPrereqs(prereqs: LawPrereq[], seen: {[belief: string]: boolean}){\r\n    return prereqs.length === 0 || prereqs.every((x) => PlayerKnowsPrereq(x, seen));\r\n}\r\nexport function PlayerKnowsPrereq(prereq: LawPrereq, seen: {[belief: string]: boolean}){\r\n    return Array.isArray(prereq) ? prereq.some((x) => PlayerKnowsBelief(x, seen)) : PlayerKnowsBelief(prereq, seen);\r\n}\r\nexport function PlayerKnowsBelief(prereq: TraitBelief, seen: {[belief: string]: boolean}){\r\n    return seen[prereq];\r\n}\r\nexport function PrereqKey(prereq: LawPrereq){\r\n    return Array.isArray(prereq) ? prereq.join('/') : prereq;\r\n}\r\nexport function PrereqString(prereq: LawPrereq){\r\n    return Array.isArray(prereq) ? prereq.map(x => BeliefString(x)).join(' / ') : BeliefString(prereq);\r\n}\r\nexport function BeliefString(prereq: TraitBelief){\r\n    return SecondaryBeliefData[prereq].icon+' '+SecondaryBeliefData[prereq].noun;\r\n}\r\n\r\nexport type LawPunishment = 'fine'|'imprison'|'death';\r\n\r\nexport interface ILaw{\r\n    /**\r\n     * convenience grouping property\r\n     */\r\n    group: LawGroup;\r\n    /**\r\n     * \"slot\" for law\r\n     */\r\n    axis: LawAxis;\r\n    /**\r\n     * specific law selected\r\n     */\r\n    key: LawKey;\r\n}\r\nexport interface IGovernment{\r\n    laws: ILaw[];\r\n    lawTree: {[key in LawAxis]: ILaw|undefined};\r\n    cash: number;\r\n    ticksSinceLastSale: number;\r\n}\r\nexport interface ILawData extends ILaw{\r\n    prereqs: LawPrereq[];\r\n    name: string;\r\n    hint?: string;\r\n    description?: string;\r\n    icon?: string;\r\n}\r\nexport const LawAxisData: {[key in LawAxis]: {name: string}} = {\r\n    'wel_food': {name: 'Food Welfare'},\r\n    'wel_house': {name: 'Housing Welfare'},\r\n    'wel_health': {name: 'Healthcare'},\r\n    'tax_basic': {name: 'Taxation'},\r\n    'tax_second': {name: 'Advanced Taxation'},\r\n    'econ_sub': {name: 'Subsidies'},\r\n    'cul_rel': {name: 'Culture'},\r\n    'cul_theo': {name: 'State Narrative'},\r\n    crime_theo: {name: 'Persecution'}\r\n}\r\nexport const LawData: {[key in LawKey]: ILawData} = {\r\n    'food_aid':{\r\n        key: 'food_aid', group: 'Welfare', name: 'Food Aid', axis: 'wel_food', icon: '👨‍🌾',\r\n        description: 'The government buys Hungry Subjects food.', prereqs: [['Gluttony','Parochialism'], ['Charity', 'Socialism']]},\r\n    'medical_aid':{\r\n        key: 'medical_aid', group: 'Welfare', name: 'Med Aid', axis: 'wel_health', icon: '👩‍⚕️',\r\n        description: 'The government buys Sick Subjects medicine.', prereqs: ['Charity', 'Cosmopolitanism']},\r\n    // 'food_bank':{\r\n    //     key: 'food_bank', group: 'Welfare', name: 'Food Bank', axis: 'wel_food',\r\n    //     description: 'Hungry Subjects are provided food purchased by the government.'\r\n    // },\r\n    // 'food_stamps':{\r\n    //     key: 'food_stamps', group: 'Welfare', name: 'Food Stamps', axis: 'wel_food',\r\n    //     description: 'Hungry Subjects are provided money by the government to purchase food.'},\r\n    // 'univ_rations':{\r\n    //     key: 'univ_rations', group: 'Welfare', name: 'Universal Rations', axis: 'wel_food',\r\n    //     description: 'All Subjects are provided small amounts of food from the government.'},\r\n    // 'outside':{\r\n    //     key: 'outside', group: 'Welfare', name: 'Sleep Outside', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects must sleep in the cold.'},\r\n    // 'homeless_shelters':{\r\n    //     key: 'homeless_shelters', group: 'Welfare', name: 'Homeless Shelters', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects are provided shelter purchased by the government.'},\r\n    // 'housing_subsidy':{\r\n    //     key: 'housing_subsidy', group: 'Welfare', name: 'Housing Subsidy', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects are provided money by the government to purchase shelter.'},\r\n    // 'state_apartments':{\r\n    //     key: 'state_apartments', group: 'Welfare', name: 'State Apartments', axis: 'wel_house'},\r\n    // 'stay_healthy':{\r\n    //     key: 'stay_healthy', group: 'Welfare', name: 'Stay Healthy', axis: 'wel_health',\r\n    //     description: 'Sick Subjects must pay for their own medical care.'},\r\n    // 'clinics':{\r\n    //     key: 'clinics', group: 'Welfare', name: 'Charity Clinics', axis: 'wel_health',\r\n    //     description: 'Sick Subjects are provided medicine purchased by the government.'},\r\n    // 'medical_aid':{\r\n    //     key: 'medical_aid', group: 'Welfare', name: 'Medical Aid', axis: 'wel_health',\r\n    //     description: 'Sick Subjects are provided money by the government to pay for medical care.'},\r\n    // 'univ_health':{\r\n    //     key: 'univ_health', group: 'Welfare', name: 'Universal Healthcare', axis: 'wel_health',\r\n    //     description: 'All Subjects are provided medical care by the government.'},\r\n    // 'hands_off':{\r\n    //     key: 'hands_off', group: 'Economics', name: 'Laissez-faire', axis: 'econ_sub',\r\n    //     description: 'No industries receive subsidies.'},\r\n    // 'grain_sub':{\r\n    //     key: 'grain_sub', group: 'Economics', name: 'Grain Subsidy', axis: 'econ_sub',\r\n    //     description: 'Farmers are provided money.'},\r\n    // 'arts':{\r\n    //     key: 'arts', group: 'Economics', name: 'Arts Patronage', axis: 'econ_sub'},\r\n    // 'theocracy':{\r\n    //     key: 'theocracy', group: 'Crime', name: 'Illegal Narratives', axis: 'crime_theo',\r\n    //     description: \"It is illegal for subjects to speak about other universal narratives.\"},\r\n    // 'secularism':{\r\n    //     key: 'secularism', group: 'Culture', name: 'Secularism', axis: 'cul_theo',\r\n    //     description: \"The government does not endorse a particular universal narrative.\"},\r\n    // 'atheism':{\r\n    //     key: 'atheism', group: 'Culture', name: 'State Nihilism', axis: 'cul_theo'},\r\n    // 'mythology':{\r\n    //     key: 'mythology', group: 'Culture', name: 'State Mythology 🐲', axis: 'cul_theo'},\r\n    // 'futurism':{\r\n    //     key: 'futurism', group: 'Culture', name: 'State Futurism 🚀', axis: 'cul_theo'},\r\n    // 'drama':{\r\n    //     key: 'drama', group: 'Culture', name: 'State Drama 🎵', axis: 'cul_theo'},\r\n    // '':{key: // , group: '', name: 'Religious Schooling', 'state', idealPro: [ 'trad', axis: 'cul_ed'},\r\n    // '':{key: // , group: '', name: 'University Grants', 'ego', axis: 'cul_ed'},\r\n    // '':{key: // , group: '', name: 'College For All', 'state', idealPro: [ 'prog', axis: 'cul_ed'},\r\n    'poll_tax':{\r\n        key: 'poll_tax', group: 'Taxation', name: 'Head Tax', axis: 'tax_basic', prereqs: [], icon: '👑',\r\n        description: 'Subjects must pay a flat tax.'},\r\n    'sales_tax':{\r\n        key: 'sales_tax', group: 'Taxation', name: 'Sales Tax', axis: 'tax_basic', prereqs: [], icon: '💸',\r\n        description: 'Subjects must pay a percentage tax for every transaction.'},\r\n    // 'wealth_tax':{\r\n    //     key: 'wealth_tax', group: 'Taxation', name: 'Wealth Tax', axis: 'tax_basic',\r\n    //     description: 'Rich subjects must pay a percentage tax on their excess cash.'},\r\n    // 'vice_tax':{\r\n    //     key: 'vice_tax', group: 'Taxation', name: 'Vice Tax', axis: 'tax_second',\r\n    //     description: 'Entertainment goods have a flat tax.'},\r\n    // 'prop_tax':{\r\n    //     key: 'prop_tax', group: 'Taxation', name: 'Property Tax', axis: 'tax_second',\r\n    //     description: 'Subjects must pay a tax on housing.'},\r\n    'death_tax':{\r\n        key: 'death_tax', group: 'Taxation', name: 'Death Tax', axis: 'tax_second', prereqs: [], icon: '☠️',\r\n        description: 'Dead subjects pay a portion of their cash to the government.'},\r\n}\r\nexport interface IGovernment{\r\n    \r\n}\r\nexport type LawGroupToLaws = {\r\n    [key in LawGroup]: ILaw[]\r\n};\r\nexport const SalesTaxPercentage = 0.05;\r\nexport class Government{\r\n    public get laws(): ILaw[] {\r\n        return Object.values(this.lawTree).flatMap(law => law ? [law] : []);\r\n    }\r\n    public set laws(val: ILaw[]) {\r\n        val.forEach((v) => {\r\n            this.lawTree[v.axis] = v;\r\n        });\r\n    }\r\n    public getLawsByGroup(): LawGroupToLaws {\r\n        return this.laws.reduce((d, x) => {\r\n            d[x.group].push(x);\r\n            return d;\r\n        }, {\r\n            Taxation: [] as ILaw[],\r\n            Welfare: [] as ILaw[],\r\n            Economics: [] as ILaw[],\r\n            Crime: [] as ILaw[],\r\n            Culture: [] as ILaw[]\r\n        });\r\n    }\r\n    public lawTree: {[key in LawAxis]: ILaw|undefined} = {} as {[key in LawAxis]: ILaw|undefined};\r\n    public treasury: Live<number> = new Live<number>(0);\r\n\r\n    isLaw(l: LawKey): boolean{\r\n        return this.lawTree[LawData[l].axis]?.key === l;\r\n    }\r\n\r\n    enact(l: LawKey): void {\r\n        const data = LawData[l];\r\n        this.lawTree[data.axis] = data;\r\n    }\r\n\r\n    revoke(l: LawKey): void {\r\n        const data = LawData[l];\r\n        this.lawTree[data.axis] = undefined;\r\n    }\r\n\r\n    get salesTaxPercentage(): number{\r\n        return this.isLaw('sales_tax') ? SalesTaxPercentage : 0;\r\n    }\r\n    \r\n    PurchaseQualifiesForWelfare(bean: Bean, good: TraitGood): boolean{\r\n        switch(good){\r\n            case 'food':\r\n                return (bean.food === 'starving' || bean.food === 'hungry') && this.isLaw('food_aid');\r\n            case 'medicine':\r\n                return (bean.health === 'sick' || bean.health === 'sickly') && this.isLaw('medical_aid');\r\n        }\r\n        return false;\r\n    }\r\n    CanPayWelfare(price: number): boolean{\r\n        return this.treasury.get >= price;\r\n    }\r\n    MaybeRebate(beans: Bean[]){\r\n        const allowedTreasury = beans.length * DollarPerBeanRebateThreshold;\r\n        if (this.treasury.get > allowedTreasury){\r\n            const overage = this.treasury.get - allowedTreasury;\r\n            const perBean = overage / beans.length;\r\n            this.treasury.set(allowedTreasury);\r\n            beans.forEach((b) => b.cash += perBean);\r\n        }\r\n    }\r\n}\r\n\r\nexport function IsLaw(gov: IGovernment, l: LawKey){\r\n    return gov.lawTree[LawData[l].axis]?.key === l;\r\n}\r\nexport function MaybeRebate(gov: IGovernment, beans: IBean[]){\r\n    const allowedTreasury = beans.length * DollarPerBeanRebateThreshold;\r\n    if (gov.cash > allowedTreasury){\r\n        const overage = gov.cash - allowedTreasury;\r\n        const perBean = overage / beans.length;\r\n        gov.cash = allowedTreasury;\r\n        beans.forEach((b) => b.cash += perBean);\r\n    }\r\n}\r\nfunction AgentIsPhysical(bean: any): bean is {food: TraitFood, health: TraitHealth} {\r\n    return bean['food'] != undefined && bean['sick'] != undefined;\r\n}\r\nexport function GovPurchaseQualifiesForWelfare(law: IGovernment, buyer: IEconomicAgent, good: TraitGood){\r\n    if (AgentIsPhysical(buyer)){\r\n        switch(good){\r\n            case 'food':\r\n                return (buyer.food === 'starving' || buyer.food === 'hungry') && IsLaw(law, 'food_aid');\r\n            case 'medicine':\r\n                return (buyer.health === 'sick' || buyer.health === 'sickly') && IsLaw(law, 'medical_aid');\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function GovCanPayWelfare(law: IGovernment, price: number): boolean{\r\n    return law.cash >= price;\r\n}","import { TraitGood, TraitJob, GoodToJob, Trait } from \"../World\";\r\nimport { Bean, LibertarianTaxUnhappyChance, ProgressivismTaxHappyChance } from \"./Bean\";\r\nimport { IOrganization, Charity, IEnterprise } from \"./Institutions\";\r\nimport { City } from \"./City\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IEvent, IEventBus, Live } from \"../events/Events\";\r\nimport { GovCanPayWelfare, Government, GovPurchaseQualifiesForWelfare, IGovernment, ILaw, IsLaw, SalesTaxPercentage } from \"./Government\";\r\nimport { IBean } from \"./Agent\";\r\n\r\nexport interface IEconomicAgent{\r\n    cash: number;\r\n}\r\nexport interface ISeller extends IEconomicAgent{\r\n    ticksSinceLastSale: number;\r\n}\r\nfunction AgentIsSeller(a: any): a is ISeller{\r\n    return a.ticksSinceLastSale != null;\r\n}\r\nexport interface IListing{\r\n    sellerCityKey?: number;\r\n    sellerBeanKey?: number;\r\n    sellerEnterpriseKey?: number;\r\n    price: number;\r\n    seller?: ISeller;\r\n    quantity: number;\r\n}\r\nconst AllGoods: TraitGood[] = ['food', 'shelter', 'medicine', 'fun'];\r\n\r\nexport interface IEconomy{\r\n    unfulfilledMonthlyDemand: {[key in TraitGood]: number};\r\n    monthlyDemand: {[key in TraitGood]: number};\r\n    monthlySupply: {[key in TraitGood]: number};\r\n    market: IMarket;\r\n}\r\nexport interface IMarket{\r\n    listings: {[key in TraitGood]: IListing[]};\r\n}\r\nexport interface IMarketReceipt{\r\n    bought: number, \r\n    price: number, \r\n    tax: number\r\n}\r\nexport function MarketTransact(\r\n    market: IMarket, \r\n    listing: IListing, \r\n    good: TraitGood, \r\n    demand: number, \r\n    buyer: IEconomicAgent, \r\n    seller: ISeller, \r\n    salesTaxPercentage: number){    \r\n    MarketListingSubtract(market, listing, good, demand);\r\n    const listPrice = listing.price * demand;\r\n    const tax = listPrice * salesTaxPercentage;\r\n    const grossPrice = listPrice + tax;\r\n    buyer.cash -= grossPrice;\r\n    seller.cash += listPrice;\r\n    seller.ticksSinceLastSale = 0;\r\n    return {\r\n        bought: demand,\r\n        price: listPrice,\r\n        tax: tax\r\n    }\r\n}\r\nexport function MarketGovernmentTransact(market: IMarket, gov: IGovernment, listing: IListing, good: TraitGood, demand: number, seller: ISeller){\r\n    MarketListingSubtract(market, listing, good, demand);\r\n    const listPrice = listing.price * demand;\r\n    const grossPrice = listPrice;\r\n    gov.cash -= grossPrice;\r\n    seller.cash += listPrice;\r\n    seller.ticksSinceLastSale = 0;\r\n    return {\r\n        bought: demand,\r\n        price: listPrice,\r\n        tax: 0\r\n    }\r\n}\r\nexport function MarketListingSubtract(market: IMarket, listing: IListing, good: TraitGood, demand: number){     \r\n    listing.quantity -= demand;\r\n    if (listing.quantity <= 0){\r\n        market.listings[good].splice(0, 1);\r\n    }\r\n}\r\n\r\nexport class Economy {\r\n    market = new OrderBook();\r\n    charity = new OrderBook();\r\n    unfulfilledMonthlyDemand: {[key in TraitGood]: number} = { food: 0, shelter: 0, medicine: 0, fun: 0, }\r\n    monthlyDemand: {[key in TraitGood]: number} = { food: 0, shelter: 0, medicine: 0, fun: 0, }\r\n    monthlySupply: {[key in TraitGood]: number} = { food: 0, shelter: 0, medicine: 0, fun: 0, }\r\n    law?: Government;\r\n    constructor(){\r\n    }\r\n    public resetMonthlyDemand(){\r\n        this.unfulfilledMonthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n        this.monthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n        this.monthlySupply = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n    }\r\n    tryTransact(\r\n        buyer: IEconomicAgent, \r\n        good: TraitGood,\r\n        minDemand: number = 1,\r\n        maxDemand: number = 1\r\n        ): {bought: number, price: number, tax: number}|null {\r\n        this.monthlyDemand[good] += maxDemand;\r\n        const listing = this.market.getLowestPriceListing(good, minDemand);\r\n        if (listing == null){\r\n            //console.log('agent could not find '+good);\r\n            this.unfulfilledMonthlyDemand[good] += maxDemand;\r\n            return null;\r\n        }\r\n        const actualDemand = Math.min(listing.quantity, maxDemand);\r\n        if ((listing.price * (1 + this.salesTaxPercentage)) <= buyer.cash * actualDemand){ \r\n            const receipt = this.market.transact(listing, good, actualDemand, buyer, this.salesTaxPercentage);\r\n            if (receipt.tax && this.law){\r\n                this.law.treasury.set(this.law.treasury.get+receipt.tax);\r\n                if (buyer instanceof Bean){\r\n                    buyer.ifBelievesInMaybeEmote('Libertarianism', 'unhappiness', LibertarianTaxUnhappyChance);\r\n                    buyer.ifBelievesInMaybeEmote('Progressivism', 'happiness', ProgressivismTaxHappyChance);\r\n                }\r\n            }\r\n            return receipt;\r\n        } else if (buyer instanceof Bean) {\r\n            if (this.law?.PurchaseQualifiesForWelfare(buyer, good) && this.law?.CanPayWelfare(listing.price)){\r\n                return this.market.governmentTransact(listing, good, actualDemand, this.law.treasury);\r\n            }\r\n            // console.log('bean couldnot afford '+good+\" @ $\"+listing?.price);\r\n            // const charityTicket = this.charity.getLowestPriceListing(good, minDemand);\r\n            // if (charityTicket && charityTicket.seller instanceof Charity) {\r\n            //     // console.log('bean got '+good+\" from charity\");\r\n            //     const actualDemand = Math.min(charityTicket.quantity, maxDemand);\r\n            //     buyer.partyLoyalty += PartyLoyaltyPerCharityUse;\r\n            //     charityTicket.seller.beansHelped++;\r\n            //     charityTicket.seller.inventory -= actualDemand;\r\n            //     return this.charity.transact(charityTicket, good, actualDemand, buyer);\r\n            // }\r\n        }\r\n        this.unfulfilledMonthlyDemand[good] += actualDemand;\r\n        return null;\r\n    }\r\n    canBuy(buyer: IEconomicAgent, good: TraitGood,\r\n        minDemand: number = 1,\r\n        maxDemand: number = 1): 'yes'|'nosupply'|'pricedout'{\r\n        const listing = this.market.getLowestPriceListing(good, minDemand);\r\n        if (listing == null){\r\n            return 'nosupply';\r\n        }\r\n        const actualDemand = Math.min(listing.quantity, maxDemand);\r\n        if (listing.price <= buyer.cash * actualDemand)\r\n            return 'yes';\r\n        if (buyer instanceof Bean && this.law?.PurchaseQualifiesForWelfare(buyer, good) && this.law?.CanPayWelfare(listing.price)){\r\n            return 'yes';\r\n        }\r\n        return 'pricedout';\r\n    }\r\n    steal(\r\n        good: TraitGood,\r\n        maxDemand: number = 1\r\n        ): number|null {\r\n        const listing = GetRandom(this.market.listings[good]);\r\n        if (listing == null){\r\n            return null;\r\n        }\r\n        const actualDemand = Math.min(listing.quantity, maxDemand);\r\n        this.market.subtractFromListing(listing, good, actualDemand);\r\n        \r\n        return actualDemand;\r\n    }\r\n    produceAndPrice(seller: Bean, good: TraitGood, quantity: number, price: number) {\r\n        this.monthlySupply[good] += quantity;\r\n        const existing = this.market.getBeansListings(seller.cityKey, seller.key, good);\r\n        if (existing){\r\n            existing.quantity += quantity;\r\n            existing.price = price;\r\n            existing.quantity = Math.min(existing.quantity, 6);\r\n        } else {\r\n            this.market.addNewPersonalListing(good, quantity, price, seller);\r\n        }\r\n        this.market.sort(good);\r\n    }\r\n    employAndPrice(seller: IEnterprise, good: TraitGood, quantity: number, price: number) {\r\n        this.monthlySupply[good] += quantity;\r\n        const existing = this.market.getEnterpriseListings(seller, good);\r\n        if (existing){\r\n            existing.quantity += quantity;\r\n            existing.price = price;\r\n            existing.quantity = Math.min(existing.quantity, 6);\r\n        } else {\r\n            this.market.addNewEnterpriseListing(good, quantity, price, seller);\r\n        }\r\n        this.market.sort(good);\r\n    }\r\n    public mostInDemandJob(): TraitJob|null{\r\n        const goods: TraitGood[] = AllGoods;\r\n        const max = goods.reduce((last, good) => {\r\n            if (this.unfulfilledMonthlyDemand[good] > last.max){\r\n                last.max = this.unfulfilledMonthlyDemand[good];\r\n                last.job = GoodToJob(good);\r\n            }\r\n            return last;\r\n        }, {max: 0, job: null as TraitJob|null})\r\n\r\n        return max.job;\r\n    }\r\n    public onBeanDie(bean: Bean){\r\n        AllGoods.forEach((g) => {\r\n            const existing = this.market.getBeansListings(bean.cityKey, bean.key, g);\r\n            if (existing){\r\n                const lucky = bean.city?.getRandomCitizen();\r\n                if (lucky) {\r\n                    existing.sellerCityKey = lucky.cityKey;\r\n                    existing.sellerBeanKey = lucky.key;\r\n                    existing.seller = lucky;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    public getFairGoodPrice(good: TraitGood){\r\n        return GetFairGoodPrice(this, good);\r\n    }\r\n    public getCostOfLiving(){\r\n        return GetCostOfLiving(this);\r\n    }\r\n    get salesTaxPercentage(): number{\r\n        return this.law?.salesTaxPercentage || 0;\r\n    }\r\n}\r\n\r\nexport class OrderBook{\r\n    public readonly listings: {[key in TraitGood]: IListing[]} = {\r\n        food: [] as IListing[],\r\n        shelter: [] as IListing[],\r\n        medicine: [] as IListing[],\r\n        fun: [] as IListing[],\r\n    };\r\n    public getLowestPriceListing(good: TraitGood, demand: number): IListing|null{\r\n        const fullListings =  this.listings[good].filter((l) => {\r\n            return l.quantity >= demand;\r\n        });\r\n        if (fullListings.length > 0){\r\n            let numberOfSamePriceListings = 1;\r\n            const lowPrice = fullListings[0].price;\r\n            for (let i = 1; i < fullListings.length; i++) {\r\n                const list = fullListings[i];\r\n                if (list.price > lowPrice)\r\n                    break;\r\n                numberOfSamePriceListings++;\r\n            }\r\n            const i = Math.floor(Math.random() * numberOfSamePriceListings);\r\n            if (i >= fullListings.length)\r\n                throw \"invalid index\";\r\n            return fullListings[i];\r\n        }\r\n        return null;\r\n    }\r\n    public getStakeListings(bKey: number, enterpriseKey: number|undefined, g: TraitGood): IListing|undefined{\r\n        return this.listings[g].find((x) => x.sellerBeanKey == bKey || x.sellerEnterpriseKey == enterpriseKey);\r\n    }\r\n    public getBeansListings(cKey: number, bKey: number, g: TraitGood): IListing|undefined{\r\n        return this.listings[g].find((x) => x.sellerBeanKey == bKey && x.sellerCityKey == cKey);\r\n    }\r\n    public getEnterpriseListings(b: IEnterprise, g: TraitGood): IListing|undefined{\r\n        return this.listings[g].find((x) => x.sellerEnterpriseKey == b.key);\r\n    }\r\n    public transact(listing: IListing, good: TraitGood, demand: number, buyer: IEconomicAgent, salesTaxPercentage: number){    \r\n        this.subtractFromListing(listing, good, demand);\r\n        const listPrice = listing.price * demand;\r\n        const tax = listPrice * salesTaxPercentage;\r\n        const grossPrice = listPrice + tax;\r\n        buyer.cash -= grossPrice;\r\n        if (listing.seller){\r\n            listing.seller.cash += listPrice;\r\n            listing.seller.ticksSinceLastSale = 0;\r\n        }\r\n        return {\r\n            bought: demand,\r\n            price: listPrice,\r\n            tax: tax\r\n        }\r\n    }\r\n    public governmentTransact(listing: IListing, good: TraitGood, demand: number, treasury: Live<number>){    \r\n        this.subtractFromListing(listing, good, demand);\r\n        const listPrice = listing.price * demand;\r\n        const grossPrice = listPrice;\r\n        treasury.set(treasury.get - grossPrice);\r\n        if (listing.seller){\r\n            listing.seller.cash += listPrice;\r\n            listing.seller.ticksSinceLastSale = 0;\r\n        }\r\n        return {\r\n            bought: demand,\r\n            price: listPrice,\r\n            tax: 0\r\n        }\r\n    }\r\n    public subtractFromListing(listing: IListing, good: TraitGood, demand: number){     \r\n        listing.quantity -= demand;\r\n        if (listing.quantity <= 0){\r\n            this.listings[good].splice(0, 1);\r\n        }\r\n    }\r\n    public addNewPersonalListing(good: TraitGood, quantity: number, price: number, bean: Bean){\r\n        this.listings[good].push({\r\n            sellerCityKey: bean.cityKey,\r\n            sellerBeanKey: bean.key,\r\n            price: price,\r\n            seller: bean,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    public addNewEnterpriseListing(good: TraitGood, quantity: number, price: number, enterprise: IEnterprise){\r\n        this.listings[good].push({\r\n            sellerEnterpriseKey: enterprise.key,\r\n            price: price,\r\n            seller: enterprise,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    public sort(good: TraitGood){        \r\n        this.listings[good].sort((a, b) => a.price - b.price);\r\n    }\r\n}\r\nexport function EconomyTryTransact(\r\n    economy: IEconomy,\r\n    gov: IGovernment,\r\n    buyer: IEconomicAgent, \r\n    good: TraitGood,\r\n    getSeller: (l: IListing) => ISeller,\r\n    minDemand: number = 1,\r\n    maxDemand: number = 1\r\n    ): IMarketReceipt|undefined {\r\n    economy.monthlyDemand[good] += maxDemand;\r\n    const listing = MarketLowestPriceListing(economy.market, good, minDemand);\r\n    if (listing == null){\r\n        //console.log('agent could not find '+good);\r\n        economy.unfulfilledMonthlyDemand[good] += maxDemand;\r\n        return undefined;\r\n    }\r\n    const actualDemand = Math.min(listing.quantity, maxDemand);\r\n    const salesTaxPercent = IsLaw(gov, 'sales_tax') ? SalesTaxPercentage : 0;\r\n    if ((listing.price * (1 + salesTaxPercent)) <= buyer.cash * actualDemand){ \r\n        const receipt = MarketTransact(economy.market, listing, good, actualDemand, buyer, getSeller(listing), salesTaxPercent);\r\n        if (receipt.tax){\r\n            gov.cash += receipt.tax;\r\n        }\r\n        return receipt;\r\n    } else {\r\n        if (GovPurchaseQualifiesForWelfare(gov, buyer, good) && GovCanPayWelfare(gov, listing.price)){\r\n            return MarketGovernmentTransact(economy.market, gov, listing, good, actualDemand, getSeller(listing));\r\n        }\r\n    }\r\n    economy.unfulfilledMonthlyDemand[good] += actualDemand;\r\n    return undefined;\r\n}\r\nexport function EconomyMostInDemandJob(economy: IEconomy){\r\n    const goods: TraitGood[] = AllGoods;\r\n    const max = goods.reduce((last, good) => {\r\n        if (economy.unfulfilledMonthlyDemand[good] > last.max){\r\n            last.max = economy.unfulfilledMonthlyDemand[good];\r\n            last.job = GoodToJob(good);\r\n        }\r\n        return last;\r\n    }, {max: 0, job: null as TraitJob|null})\r\n\r\n    return max.job;\r\n}\r\nconst MaximumListingQuantity = 20;\r\nexport function EconomyProduceAndPrice(economy: IEconomy, seller: IBean, good: TraitGood, quantity: number, price: number) {\r\n    economy.monthlySupply[good] += quantity;\r\n    const existing = economy.market.listings[good].find((x) => x.sellerBeanKey == seller.key);\r\n    if (existing){\r\n        existing.quantity += quantity;\r\n        existing.price = price;\r\n        existing.quantity = Math.min(existing.quantity, MaximumListingQuantity);\r\n    } else {\r\n        economy.market.listings[good].push({\r\n            sellerBeanKey: seller.key,\r\n            sellerCityKey: seller.cityKey,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    economy.market.listings[good].sort((a, b) => a.price - b.price);\r\n}\r\nexport function EconomyEmployAndPrice(econ: IEconomy, seller: IEnterprise, good: TraitGood, quantity: number, price: number) {\r\n    econ.monthlySupply[good] += quantity;\r\n    const existing = econ.market.listings[good].find((x) => x.sellerEnterpriseKey == seller.key);\r\n    if (existing){\r\n        existing.quantity += quantity;\r\n        existing.price = price;\r\n        existing.quantity = Math.min(existing.quantity, MaximumListingQuantity);\r\n    } else {\r\n        econ.market.listings[good].push({\r\n            sellerEnterpriseKey: seller.key,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    econ.market.listings[good].sort((a, b) => a.price - b.price);\r\n}\r\nexport function GetFairGoodPrice(econ: IEconomy, good: TraitGood){\r\n    const supply = econ.monthlySupply[good] || 1;\r\n    const demand = econ.monthlyDemand[good];\r\n    return 0.25 + (0.75 * Math.min(demand/supply, 1));\r\n}\r\nexport function GetCostOfLiving(econ: IEconomy){\r\n    return GetFairGoodPrice(econ, 'food')+GetFairGoodPrice(econ, 'shelter')+GetFairGoodPrice(econ,'medicine');\r\n}\r\nexport function EconomyCanBuy(econ: IEconomy, gov: IGovernment, buyer: IEconomicAgent, good: TraitGood,\r\n    minDemand: number = 1,\r\n    maxDemand: number = 1): 'yes'|'nosupply'|'pricedout'{\r\n    const listing = MarketLowestPriceListing(econ.market, good, minDemand);\r\n    if (listing == null){\r\n        return 'nosupply';\r\n    }\r\n    const actualDemand = Math.min(listing.quantity, maxDemand);\r\n    if (listing.price <= buyer.cash * actualDemand)\r\n        return 'yes';\r\n    if (buyer instanceof Bean && GovPurchaseQualifiesForWelfare(gov, buyer, good) && GovCanPayWelfare(gov, listing.price)){\r\n        return 'yes';\r\n    }\r\n    return 'pricedout';\r\n\r\n}\r\n\r\nfunction MarketLowestPriceListing(market: IMarket, good: TraitGood, demand: number): IListing|null{\r\n    const fullListings =  market.listings[good].filter((l) => {\r\n        return l.quantity >= demand;\r\n    });\r\n    if (fullListings.length > 0){\r\n        let numberOfSamePriceListings = 1;\r\n        const lowPrice = fullListings[0].price;\r\n        for (let i = 1; i < fullListings.length; i++) {\r\n            const list = fullListings[i];\r\n            if (list.price > lowPrice)\r\n                break;\r\n            numberOfSamePriceListings++;\r\n        }\r\n        const i = Math.floor(Math.random() * numberOfSamePriceListings);\r\n        if (i >= fullListings.length)\r\n            throw \"invalid index\";\r\n        return fullListings[i];\r\n    }\r\n    return null;\r\n}","\r\nexport function shuffle<T>(array: Array<T>) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport function MathClamp(input: number, min: number, max: number): number{\r\n    return Math.max(Math.min(input, max), min)\r\n}\r\n\r\nexport function groupBy<T>(list: T[], keyGetter: (val: T) => string|number): Map<string|number, T[]> {\r\n    const map = new Map<string|number, T[]>();\r\n    list.forEach((item) => {\r\n         const key = keyGetter(item);\r\n         const collection = map.get(key);\r\n         if (!collection) {\r\n             map.set(key, [item]);\r\n         } else {\r\n             collection.push(item);\r\n         }\r\n    });\r\n    return map;\r\n}","import { LiveMap } from \"../events/Events\";\r\nimport { TraitGood, TraitJob } from \"../World\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\nimport { MathClamp } from \"./Utils\";\r\n\r\nexport interface HexPoint{\r\n    q: number;\r\n    r: number;\r\n}\r\nexport class Hex implements HexPoint{\r\n    constructor(public q: number, public r: number){}\r\n}\r\nexport const hex_directions: HexPoint[] = [\r\n    {q:+1, r:0}, {q: +1, r: -1}, {q: 0, r: -1}, \r\n    {q:-1, r:0}, {q: -1, r: +1}, {q: 0, r: +1}, \r\n];\r\nexport function hex_direction(direction: number): HexPoint{\r\n    return hex_directions[direction]\r\n}\r\n\r\nexport function hex_neighbor(hex: HexPoint, direction: number): HexPoint{\r\n    var dir = hex_direction(direction)\r\n    return {q: hex.q + dir.q, r: hex.r + dir.r};\r\n}\r\nexport function hex_distance(a: HexPoint, b: HexPoint): number{\r\n    return (Math.abs(a.q - b.q) \r\n          + Math.abs(a.q + a.r - b.q - b.r)\r\n          + Math.abs(a.r - b.r)) / 2\r\n}\r\nexport function hex_add(a: HexPoint, b: HexPoint): HexPoint {\r\n    return {q: a.q + b.q, r: a.r + b.r};\r\n}\r\nexport function hex_scale(a: HexPoint, k: number): HexPoint {\r\n    return {q:a.q * k, r:a.r * k};\r\n}\r\nexport function hex_ring(center: HexPoint, radius: number): HexPoint[]{\r\n    var results: HexPoint[] = [];\r\n    // this code doesn't work for radius == 0; can you see why?\r\n    var cube = hex_add(center, \r\n                        hex_scale(hex_direction(4), radius));\r\n    for (let i = 0; i < 6; i++) {\r\n        for (let j = 0; j < radius; j++) {\r\n            results.push(cube)\r\n            cube = hex_neighbor(cube, i);       \r\n        }\r\n    }\r\n    return results;\r\n}\r\nexport function hex_spiral(center: HexPoint, radius: number): HexPoint[]{\r\n    var results = [center];\r\n    for (let k = 0; k < radius; k++) {\r\n        results = results.concat(hex_ring(center, k));\r\n        //console.log(results);   \r\n    }\r\n    return results;\r\n}\r\n\r\nexport function move_towards(current: Point, target: Point, maxDistanceDelta: number)\r\n{\r\n    const a: Point = {x: target.x - current.x, y: target.y - current.y};\r\n    const magnitude = Math.sqrt(a.x * a.x + a.y * a.y);\r\n    if (magnitude <= maxDistanceDelta || magnitude == 0)\r\n    {\r\n        return target;\r\n    }\r\n    return {\r\n        x: current.x + a.x / magnitude * maxDistanceDelta,\r\n        y: current.y + a.y / magnitude * maxDistanceDelta,\r\n    };\r\n}\r\nexport interface IAccelerator {point: Point, velocity: Vector};\r\nexport const OriginAccelerator = { point: {x: 0, y: 0}, velocity: {x: 0, y: 0}}\r\nexport function accelerate_towards(\r\n    mover: IAccelerator, \r\n    target: Point, \r\n    acceleration: number,\r\n    maxSpeed: number, \r\n    colDistance: number, \r\n    brake: Point): boolean\r\n{\r\n    const delta: Point = {\r\n        x: target.x - mover.point.x, \r\n        y: target.y - mover.point.y\r\n    };\r\n    const magnitude = Math.sqrt((delta.x * delta.x) + (delta.y * delta.y));\r\n    if (magnitude <= colDistance) return true;\r\n\r\n    delta.x /= magnitude;\r\n    delta.y /= magnitude;\r\n\r\n    mover.velocity.x += (delta.x * acceleration);\r\n    mover.velocity.y += (delta.y * acceleration);\r\n    mover.velocity.x = MathClamp(mover.velocity.x, -maxSpeed, maxSpeed);\r\n    mover.velocity.y = MathClamp(mover.velocity.y, -maxSpeed, maxSpeed);\r\n\r\n    accelerator_coast(mover, brake);\r\n    return false;\r\n}\r\nexport function accelerator_coast(\r\n    current: IAccelerator, \r\n    brake: Point): void\r\n{\r\n    current.velocity.x *= brake.x;\r\n    current.velocity.y *= brake.y;\r\n\r\n    current.point.x += current.velocity.x;\r\n    current.point.y += current.velocity.y;\r\n}\r\n\r\nexport function lerp(a: number, b: number, t: number): number{\r\n    return a + (b - a) * t\r\n}\r\n\r\nexport function vector_lerp(a: Point, b: Point, t: number): Point{\r\n    return {\r\n        x: lerp(a.x, b.x, t),\r\n        y: lerp(a.y, b.y, t)\r\n    };\r\n}\r\nfunction cube_lerp(a: CubicPoint, b: CubicPoint, t: number): CubicPoint{\r\n    return {\r\n        x: lerp(a.x, b.x, t),\r\n        y: lerp(a.y, b.y, t),\r\n        z: lerp(a.z, b.z, t)\r\n    };\r\n}\r\nfunction cube_distance(a: CubicPoint, b: CubicPoint): number{\r\n    return (Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z)) / 2\r\n}\r\nfunction cube_round(cube: CubicPoint): CubicPoint{\r\n    var rx = Math.round(cube.x);\r\n    var ry = Math.round(cube.y);\r\n    var rz = Math.round(cube.z);\r\n\r\n    var x_diff = Math.abs(rx - cube.x)\r\n    var y_diff = Math.abs(ry - cube.y)\r\n    var z_diff = Math.abs(rz - cube.z)\r\n\r\n    if (x_diff > y_diff && x_diff > z_diff)\r\n        rx = -ry-rz;\r\n    else if (y_diff > z_diff)\r\n        ry = -rx-rz;\r\n    else\r\n        rz = -rx-ry;\r\n\r\n    return {x: rx, y: ry, z: rz};\r\n}\r\nfunction round_point_to_hex(hex: HexPoint): HexPoint{\r\n    return cube_to_axial(cube_round(axial_to_cube(hex)))\r\n\r\n}\r\nfunction cube_to_axial(cube: CubicPoint){\r\n    var q = cube.x;\r\n    var r = cube.z;\r\n    return new Hex(q, r);\r\n}\r\nfunction axial_to_cube(hex: HexPoint): CubicPoint{\r\n    return {\r\n        x: hex.q,\r\n        z: hex.r,\r\n        y: -hex.q-hex.r\r\n    };\r\n}\r\nfunction cube_linedraw(a: CubicPoint, b: CubicPoint): HexPoint[]{\r\n    var N = cube_distance(a, b);\r\n    var results: HexPoint[] = [];\r\n    for (let i = 0; i <= N; i++) {\r\n        results.push(cube_to_axial(cube_round(cube_lerp(a, b, 1.0/N * i))))\r\n    }\r\n    return results;\r\n}\r\nexport function hex_linedraw(a: HexPoint, b: HexPoint): HexPoint[]{\r\n    return cube_linedraw(axial_to_cube(a), axial_to_cube(b));\r\n}\r\n\r\nclass Orientation {\r\n    // angle is in multiples of 60°\r\n    constructor(public f0: number, public f1: number, public  f2: number, public f3: number,\r\n        public b0: number, public b1: number,public b2: number,public b3: number,\r\n        public start_angle: number){}\r\n};\r\nexport const layout_flat: Orientation = new Orientation(\r\n    3.0 / 2.0, \r\n    0.0, \r\n    Math.sqrt(3.0) / 2.0, \r\n    Math.sqrt(3.0),\r\n    2.0 / 3.0, \r\n    0.0, \r\n    -1.0 / 3.0, \r\n    Math.sqrt(3.0) / 3.0,\r\n    0.0\r\n);\r\nexport const origin_point: Point = {x: 0, y: 0};\r\nexport const hex_origin: HexPoint = {q: 0, r: 0};\r\nexport function hex_to_pixel(size: Point, origin: Point, h: HexPoint): Point {\r\n    const M: Orientation = layout_flat;\r\n    const x = (M.f0 * h.q + M.f1 * h.r) * size.x;\r\n    const y = (M.f2 * h.q + M.f3 * h.r) * size.y;\r\n    return {x: x + origin.x, y: y + origin.y};\r\n}\r\nexport function pixel_to_hex(size: Point, origin: Point, p: Point) {\r\n    const M = layout_flat;\r\n    const pt = {x: (p.x - origin.x) / size.x,\r\n                y: (p.y - origin.y) / size.y\r\n            };\r\n    const q = M.b0 * pt.x + M.b1 * pt.y;\r\n    const r = M.b2 * pt.x + M.b3 * pt.y;\r\n    return new Hex(q, r);\r\n}\r\n\r\n\r\nexport interface PolarPoint{\r\n    /**\r\n     * radius (in pixels)\r\n     */\r\n    r: number;\r\n    /**\r\n     * azimuth (radians)\r\n     */\r\n    az: number;\r\n}\r\n\r\nexport function polarToPoint(p: PolarPoint): Point{\r\n    return {\r\n        x: p.r * Math.cos(p.az),\r\n        y: p.r * Math.sin(p.az)\r\n    }\r\n}\r\n\r\nexport function distanceBetweenPolar(a: PolarPoint, b: PolarPoint): number{\r\n    const aCart = polarToPoint(a);\r\n    const bCart = polarToPoint(b)\r\n    return Math.sqrt(\r\n        Math.pow(aCart.x - aCart.x, 2) +\r\n        Math.pow(bCart.y - aCart.y, 2)\r\n    );\r\n}\r\n\r\nexport interface Point{\r\n    x: number; y: number;\r\n}\r\nexport interface Vector extends Point{\r\n}\r\nexport interface CubicPoint extends Point{\r\n    z: number;\r\n}\r\n\r\nexport function transformPoint(p: Point){\r\n    return {transform:`translate(${p.x}px, ${p.y}px)`};\r\n}\r\n\r\nexport interface IBuilding{\r\n    key: number;\r\n    address: HexPoint;\r\n    type: BuildingTypes;\r\n    jobs: number[];\r\n    upgraded: boolean,\r\n    enterpriseKey?: number\r\n}\r\n\r\n/**\r\n * address books allow lookups from entity \"name\" to location\r\n */\r\nexport interface AddressBookHex{\r\n    [entityKey: number]: HexPoint\r\n}\r\nexport interface AddressBookPoint{\r\n    [entityKey: number]: Point\r\n}\r\n/**\r\n * address grids allow lookups from location to entity\r\n * \r\n * note: coordinates are of form \"X,Y\"\r\n * and the map cannot distinguish between hex and cartesian points\r\n */\r\nexport interface AddressGrid<T>{\r\n    [coordinate: string]: T|undefined\r\n}\r\nexport interface AddressBuildingGrid extends AddressGrid<IBuilding>{}\r\n\r\nexport interface BuildingMap{\r\n    coordByID: AddressBookHex;\r\n    all: IBuilding[];\r\n}\r\n\r\nexport class CityBook {\r\n    /**\r\n     * given \"q,r\", return the IBuilding.key\r\n     */\r\n    public readonly map = new LiveMap<string, number>(new Map());\r\n    /**\r\n     * given IBuilding.type return the IBuilding[]\r\n     */\r\n    public readonly yellow = new LiveMap<string, number[]>(new Map());\r\n    /**\r\n     * given IBuilding.key, return \"q,r\"\r\n     */\r\n    public readonly white = new LiveMap<number, string>(new Map());\r\n    /**\r\n     * given IBuilding.key, return IBuilding\r\n     */\r\n    public readonly db: LiveMap<number, IBuilding>;\r\n\r\n    constructor(_db: Map<number, IBuilding>){\r\n        this.db = new LiveMap<number, IBuilding>(_db);\r\n        this.buildIndexes();\r\n        this.db.afterSetBeforePublish = () => this.buildIndexes();\r\n    }\r\n\r\n    private buildIndexes(){\r\n        const keys = Array.from(this.db.get.keys());\r\n        const ix = { \r\n            map: new Map<string, number>(),\r\n            yellow: new Map<string, number[]>(),\r\n            white: new Map<number, string>()\r\n        }\r\n        keys.forEach((key: number) => {\r\n            const b = this.db.get.get(key);\r\n            if (b){\r\n                const address = b.address.q+','+b.address.r;\r\n                ix.map.set(address, b.key);\r\n                ix.white.set(b.key, address);\r\n                const group = ix.yellow.get(b.type) || []\r\n                ix.yellow.set(b.type, group.concat([b.key]));\r\n            }\r\n\r\n        });\r\n        this.white.set(ix.white);\r\n        this.map.set(ix.map);\r\n        this.yellow.set(ix.yellow);\r\n    }\r\n\r\n    public addBuilding(b: IBuilding){\r\n        this.db.add(b.key, b);\r\n        this.buildIndexes();\r\n    }\r\n    public removeBuilding(b: IBuilding){\r\n        this.db.remove(b.key);\r\n        this.buildIndexes();\r\n    }\r\n\r\n    public getBuildings(): IBuilding[]{\r\n        return Array.from(this.db.get.values());\r\n    }\r\n    public findBuildingByCoordinate(h: HexPoint){\r\n        const address = h.q+','+h.r;\r\n        const key = this.map.get.get(address);\r\n        if (key != null) \r\n            return this.db.get.get(key);\r\n        return undefined;\r\n    }\r\n    public getRandomBuildingOfType(buildingType: BuildingTypes): IBuilding|undefined{\r\n        const keysOfType: number[] = this.yellow.get.get(buildingType) || [];\r\n        const r = GetRandom(keysOfType);\r\n        return this.db.at(r);\r\n    }\r\n\r\n    public getRandomEntertainmentBuilding(): IBuilding|undefined{\r\n        const keysOfType: number[] = (this.yellow.get.get('park') || []).concat(this.yellow.get.get('nature') || []);\r\n        const r = GetRandom(keysOfType);\r\n        return this.db.at(r);\r\n    }\r\n\r\n    public getCountOfType(buildingType: BuildingTypes): number{\r\n        return Array.from(this.yellow.get.get(buildingType) || []).length;\r\n    }\r\n}\r\n\r\nexport type BuildingTypes = 'farm'|'house'|'hospital'|'church'|'theater'|'courthouse'|'park'|'nature';\r\nexport type TopiaBuildingTypes = 'utopia_fields'|'utopia_pump'|'dystopia_refinery'|'dystopia_crypt';\r\n//utopian fields = free relax\r\n//utopia pump = slowly sucks up happiness/unhappiness?\r\n//dystopia refinery = slowly converts negative emotions to energy/bots\r\n//dystopia crypt = skips death notifications (limited use?)\r\nexport type MoverTypes = 'bean'|'ufo'|'pickup';\r\nexport type MatterTypes = MoverTypes|BuildingTypes;\r\n\r\nexport const BuildingIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🐄',\r\n    'house': '🏡', 'hospital': '🏥', 'church': '⛪', 'theater': '🎪', 'courthouse':'🏫',\r\n    'park': '⛲️', 'nature': '🏞️'\r\n};\r\nexport const UpgradedBuildingIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🚜',\r\n    'house': '🏘️', 'hospital': '🏙️', 'church': '⛪', 'theater': '🏟️', 'courthouse':'🏫',\r\n    'park': '🎡', 'nature': '🏞️'\r\n};\r\nexport const BuildingJobIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🌾',\r\n    'house': '📪', 'hospital': '🛏️', 'church': '⛪', 'theater': '🪑', 'courthouse':'🏫',\r\n    'park': '💐', 'nature': '♨️'\r\n};\r\nexport const BuildingToGood: {[key in BuildingTypes]: TraitGood} = {\r\n    'farm': 'food',\r\n    'house': 'shelter', \r\n    'hospital': 'medicine', \r\n    'church': 'fun', \r\n    'theater': 'fun', \r\n    'courthouse': 'fun',\r\n    'park': 'fun', \r\n    'nature': 'fun'\r\n};\r\nexport const GoodToBuilding: {[key in TraitGood]: BuildingTypes} = {\r\n    'food': 'farm',\r\n    'shelter': 'house',\r\n    'medicine':'hospital',\r\n    'fun': 'theater'\r\n};\r\nexport const JobToBuilding: {[key in TraitJob]: BuildingTypes} = {\r\n    'farmer': 'farm',\r\n    'builder': 'house', \r\n    'doc':'hospital', \r\n    'entertainer': 'theater',\r\n    'cleric': 'church', \r\n    'jobless': 'house', \r\n    'polit': 'house'\r\n};\r\nexport const BuildingToJob: {[key in BuildingTypes]: TraitJob} = {\r\n    'farm': 'farmer',\r\n    'house': 'builder', \r\n    'hospital':'doc', \r\n    'theater': 'entertainer',\r\n    'church': 'cleric',\r\n    'park': 'entertainer',\r\n    'nature': 'entertainer',\r\n    'courthouse': 'polit'\r\n};\r\n\r\nexport const HexSizePX = 70;\r\nexport const HexSizeR = 120; // rounded sqrt(3) * HexSizePX\r\nexport class Geography{\r\n    public book: CityBook = new CityBook(new Map());\r\n\r\n    addBuilding(building: IBuilding) {\r\n        this.book.addBuilding(building);\r\n        return null;\r\n    }\r\n    removeBuilding(where: HexPoint, building: IBuilding) {\r\n        this.book.removeBuilding(building);\r\n        return null;\r\n    }\r\n    getEnterprise(buildingKey: number): IEnterprise|undefined{\r\n        return undefined;\r\n    }\r\n    constructor(){\r\n        const geo = GenerateGeography();\r\n        this.numberOfRings = geo.numberOfRings;\r\n        this.hexes = geo.hexes;\r\n        this.hex_size = geo.hex_size;\r\n        this.petriRadius = geo.petriRadius;\r\n        this.petriOrigin = geo.petriOrigin;\r\n    }\r\n    public readonly numberOfRings: number;\r\n    public readonly hexes: HexPoint[];\r\n    public readonly hex_size: Point;\r\n    public readonly petriRadius: number;\r\n    public readonly petriOrigin: Point;\r\n}\r\n\r\nexport function GenerateGeography(){\r\n    const numberOfRings = 5;\r\n    const radius = ((numberOfRings - 0.5) * HexSizeR) + numberOfRings;\r\n    return {\r\n        numberOfRings: numberOfRings,\r\n        hexes: hex_spiral({q:0, r:0}, numberOfRings),\r\n        hex_size: {x: HexSizePX, y: HexSizePX},\r\n        petriRadius: radius,\r\n        petriOrigin: {x: radius, y: radius}\r\n    }\r\n}","import { IWorldState } from \"../state/features/world\";\r\nimport { Bean } from \"./Bean\";\r\nimport { City, ICity } from \"./City\";\r\nimport { IEconomy } from \"./Economy\";\r\nimport { BuildingToGood, BuildingTypes, HexPoint, IBuilding, Point } from \"./Geography\";\r\nimport { EnterpriseType, IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\n\r\nconst EnterpriseBuildings: BuildingTypes[] = ['farm', 'hospital', 'house', 'theater'];\r\n\r\nexport function BuildingOpenSlots(b: IBuilding): number[]{\r\n    return [0,1,2,3,4,5].filter((s, i) => {\r\n        return b.jobs[+s] == null && (i < 3 || b.upgraded);\r\n    }).map((x) => +x);\r\n}\r\n\r\nexport function BuildingUsedSlots(b: IBuilding): number[]{\r\n    return [0,1,2,3,4,5].filter((s) => {\r\n        return b.jobs[+s] != null;\r\n    }).map((x) => +x);\r\n}\r\n\r\nexport function BuildingTryFreeBean(b: IBuilding, beanKey: number): boolean{\r\n    const oldLen = b.jobs.length;\r\n    b.jobs = b.jobs.filter(x => x != beanKey);\r\n    return oldLen === b.jobs.length+1;\r\n}\r\nexport function GenerateIBuilding(world: IWorldState, city: ICity, type: BuildingTypes, hex: HexPoint, econ: IEconomy): IBuilding{\r\n    const newBuilding: IBuilding = {\r\n        type: type,\r\n        key: world.buildings.nextID++,\r\n        address: hex,\r\n        jobs: [],\r\n        upgraded: false\r\n    }\r\n    world.buildings.allIDs.push(newBuilding.key);\r\n    world.buildings.byID[newBuilding.key] = newBuilding;\r\n    city.buildingKeys.push(newBuilding.key);\r\n    city.buildingMap[`${hex.q},${hex.r}`] = newBuilding.key;\r\n\r\n    if (EnterpriseBuildings.some(x => type)){\r\n        newBuilding.enterpriseKey = newBuilding.key;\r\n        world.enterprises.allIDs.push(newBuilding.key);\r\n        world.enterprises.byID[newBuilding.key] = {\r\n            cash: 0,\r\n            cityKey: city.key,\r\n            enterpriseType: \"company\",\r\n            key: newBuilding.key,\r\n            ticksSinceLastSale: 0\r\n        }\r\n    }\r\n\r\n    const good = BuildingToGood[type];\r\n    \r\n    if (good != 'fun')\r\n    {\r\n        world.economy.market.listings[good].push({\r\n            price: 1,\r\n            quantity: 3,\r\n            sellerCityKey: city.key,\r\n            sellerEnterpriseKey: newBuilding.key\r\n        });\r\n    }\r\n    return newBuilding;\r\n}","import { PubSub } from \"../events/Events\";\r\nimport { IAccelerator } from \"./Geography\";\r\n\r\nexport type MoverType = 'ufo'|'bean'|'pickup';\r\ntype MoverCache = {\r\n    [key in MoverType]: {\r\n        [k2: number]: PubSub<IAccelerator>;\r\n    };\r\n};\r\n\r\nexport class MoverStore{\r\n    private cache: MoverCache = {\r\n        'ufo': {},\r\n        'bean': {},\r\n        'pickup': {}\r\n    }\r\n    public Get(type: MoverType, key: number): PubSub<IAccelerator>{\r\n        if (!this.cache[type][key])\r\n            this.cache[type][key] = new PubSub<IAccelerator>();\r\n        return this.cache[type][key];\r\n    }\r\n}","import { MoverStore } from \"./simulation/MoverBus\";\r\n\r\nexport const MoverStoreInstance = new MoverStore();","import { IBeanContainer, ITile, Trait, TraitEthno, TraitJob, TraitEmote } from \"../World\";\r\nimport { Bean } from \"./Bean\";\r\nimport { Economy, GetCostOfLiving, IEconomy } from \"./Economy\";\r\nimport { Government } from \"./Government\";\r\nimport { GenerateBean, GetRandom, GetRandomNumber } from \"../WorldGen\";\r\nimport { ICityPartyHQ, Party } from \"./Politics\";\r\nimport { BuildingTypes, Geography, HexPoint, IBuilding, JobToBuilding, Point, Vector } from \"./Geography\";\r\nimport { IDate } from \"./Time\";\r\nimport { shuffle } from \"./Utils\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\nimport { IEventBus, Live, LiveList, PubSub } from \"../events/Events\";\r\nimport { WorldSound } from \"../WorldSound\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { IPickup } from \"./Pickup\";\r\nimport { BuildingOpenSlots, BuildingTryFreeBean } from \"./RealEstate\";\r\nimport { IBean } from \"./Agent\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\n\r\n\r\nexport function reportIdeals(beans: Bean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'ego' as Trait, (b) => b.ideals);\r\n}\r\nexport function reportCommunity(beans: Bean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'state' as Trait, (b) => b.community);\r\n}\r\nexport function reportEthno(beans: Bean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'circle' as Trait, (b) => b.ethnicity);\r\n}\r\nexport function _report(beans: Bean[], defWin: Trait, beanPropGet: (bean: Bean) => Trait): {avg: number, winner: Trait}{\r\n    const result = { avg: 0, winner: defWin };\r\n    const all = beans.reduce((stash: any, bean) => {\r\n        const value = beanPropGet(bean);\r\n        if (stash[value] == null) { stash[value] = 1;}\r\n        else { stash[value]++}\r\n        return stash;\r\n    }, {});\r\n    Object.keys(all).forEach((trait) => {\r\n        if (all[trait] > result.avg) {\r\n            result.avg = all[trait];\r\n            result.winner = trait as Trait;\r\n        }\r\n    });\r\n    result.avg /= beans.length;\r\n    return result;\r\n}\r\n\r\nexport class UFO{\r\n    constructor(public key: number, public point: HexPoint, public action: string){}\r\n}\r\nexport class Pickup implements IPickup{\r\n    constructor(public key: number, public point: Point, public type: TraitEmote){}\r\n    public velocity: Vector = {x: 0, y: 0};\r\n    public onMove = new PubSub<Point>();\r\n}\r\n\r\nexport interface ICity{\r\n    key: number,\r\n    name: string,\r\n    petriRadius: number,\r\n    petriOrigin: Point,\r\n    hex_size: Point,\r\n    deadBeanKeys: number[],\r\n    beanKeys: number[],\r\n    ufoKeys: number[],\r\n    buildingKeys: number[],\r\n    pickupMagnetPoint: Point|undefined,\r\n    hexes: HexPoint[],\r\n    buildingMap: {[hexKey: string]: number},\r\n    pickupKeys: number[],\r\n    costOfLiving: number\r\n}\r\n\r\nexport class City extends Geography implements ITile, IBeanContainer, ICity {\r\n    public name: string = '';\r\n    public url: string = '';\r\n    public type: string = '';\r\n    public key: number = 0;\r\n    public beans = new LiveList<Bean>([]);\r\n    public historicalBeans = new LiveList<Bean>([]);\r\n    public readonly pickups = new LiveList<Pickup>([]);\r\n    public ufos: UFO[] = [];\r\n    public pickupSeed = 0;\r\n    public beanSeed = 0;\r\n    public houses: any[] = [];\r\n    public partyHQ?: ICityPartyHQ;\r\n\r\n    deadBeanKeys = []; beanKeys = []; ufoKeys = []; buildingKeys = [];\r\n    buildingMap = {}; \r\n    pickupKeys = []\r\n\r\n    /// computed properties\r\n    public majorityEthnicity: TraitEthno = 'circle';\r\n    public costOfLiving: number = 1;\r\n\r\n    constructor(private sfx: WorldSound, public readonly economy: Economy){\r\n        super();\r\n    }\r\n\r\n    public law?: Government;\r\n    public environment?: IDate;\r\n    public eventBus?: IEventBus;\r\n    public lpickupMagnetPoint = new Live<Point|undefined>(undefined);\r\n    public pickupMagnetPoint: Point|undefined;\r\n\r\n    unsetJob(bean: Bean){\r\n        if (bean.job === 'jobless') return;\r\n        const all = this.book.getBuildings();\r\n        for (let i = 0; i < all.length; i++) {\r\n            const building = all[i];\r\n            if (BuildingTryFreeBean(building, bean.key)){\r\n                bean.employerEnterpriseKey = undefined;\r\n                bean.job = 'jobless';\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    addEmotePickup(p: Point, emote: TraitEmote){\r\n        const point = {...p};\r\n        point.x += GetRandomNumber(-10, 10);\r\n        point.y += GetRandomNumber(-10, 10);\r\n        const id = ++this.pickupSeed;\r\n        this.pickups.push(new Pickup(id, point, emote));\r\n    }\r\n\r\n    getRandomCitizen(): Bean|null{\r\n        const shuffled = shuffle(this.beans.get);\r\n        if (shuffled.length > 0) {\r\n            return shuffled[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    onCitizenDie(deadBean: Bean){\r\n        if (deadBean.cash > 0){\r\n            if (this.law && this.law.isLaw('death_tax')){\r\n                this.law.treasury.set(this.law.treasury.get + deadBean.cash);\r\n                deadBean.cash = 0;\r\n            } else {\r\n                //inheritance\r\n                const lucky = this.getRandomCitizen();\r\n                if (lucky) {\r\n                    lucky.cash = lucky.cash + deadBean.cash;\r\n                    deadBean.cash = 0;\r\n                }\r\n            }\r\n        }\r\n        this.unsetJob(deadBean);\r\n    }\r\n    breedBean(parent: IBean) {\r\n        const job: TraitJob = Math.random() <= .5 ? parent.job : GetRandom(['doc', 'farmer', 'builder', 'jobless']);\r\n        // const bean = GenerateBean(this, undefined, job);\r\n        // bean.ethnicity = parent.ethnicity;\r\n        // bean.name = bean.name.split(' ')[0] + ' ' + parent.name.split(' ')[1];\r\n        // bean.cash = parent.cash / 2;\r\n        // parent.cash /= 2;\r\n        // bean.bornInPetri = true;\r\n        // if (this.environment)\r\n        //     bean.dob = {year: this.environment?.year, season: this.environment?.season, day: this.environment?.day, hour: this.environment?.hour};\r\n        // this.beans.push(bean);\r\n    }\r\n    calculateCityComputed(economy: Economy, law: Government) {\r\n        this.costOfLiving = economy.getCostOfLiving();\r\n        const c = this.beans.get.reduce((count: {circle: number, square: number, triangle: number}, bean) => {\r\n            switch(bean.ethnicity){\r\n                case 'circle': count.circle++;break;\r\n                case 'square': count.square++;break;\r\n                case 'triangle': count.triangle++;break;\r\n            }\r\n            return count;\r\n        }, {circle: 0, square: 0, triangle: 0});\r\n        if (c.circle > c.square && c.circle > c.triangle){\r\n            this.majorityEthnicity = 'circle';\r\n        } else if (c.square > c.circle && c.square > c.triangle){\r\n            this.majorityEthnicity = 'square';\r\n        } else {\r\n            this.majorityEthnicity = 'triangle';\r\n        }\r\n    }\r\n    getNearestNeighbors(source: Bean): Bean[] {\r\n        return this.beans.get.filter((b) => {\r\n            if (b.key == source.key) return false;\r\n\r\n            const p = b.point;\r\n            const q = source.point;\r\n            const squared = Math.pow(p.x - q.x, 2)+Math.pow(p.y - q.y, 2);\r\n\r\n            return squared < 1600 && squared > 600;\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport function CalculateCityComputed(city: ICity, economy: IEconomy){\r\n    city.costOfLiving = GetCostOfLiving(economy);\r\n}\r\nexport function BuildingUnsetJob(building: IBuilding, bean: IBean){\r\n    if (bean.job === 'jobless') return;\r\n    if (BuildingTryFreeBean(building, bean.key)){\r\n        bean.employerEnterpriseKey = undefined;\r\n        bean.job = 'jobless';\r\n    }\r\n}\r\nexport function CityGetPopulationTraitsList(scannedBeans: {[beanKey: number]: boolean}, beans: IBean[]): {icon: string, noun: string, count: number}[]{\r\n    return Array.from(\r\n        beans.reduce((m, b) => {\r\n            if (scannedBeans[b.key]){\r\n                b.beliefs.forEach((t) => {\r\n                    const prev = m.get(t) || 0;\r\n                    m.set(t, prev+1);\r\n                });\r\n            } else {\r\n                m.set('Unknown', (m.get('Unknown') || 0) + 1);\r\n            }\r\n            return m;\r\n        }, new Map<TraitBelief|'Unknown', number>()).entries()\r\n    ).sort(([aT, aC], [bT, bC]) => bC - aC).map(([t, c]) => {\r\n        return t === 'Unknown' ? {\r\n            icon: '❔',\r\n            noun: 'Unknown',\r\n            count: c\r\n        } : {\r\n            icon: SecondaryBeliefData[t].icon,\r\n            noun: SecondaryBeliefData[t].noun,\r\n            count: c\r\n        }\r\n    });\r\n}\r\nexport function CityGetRandomBuildingOfType(city: ICity, world: IWorldState, buildingType: BuildingTypes): IBuilding|undefined{\r\n    const keysOfType: number[] = city.buildingKeys.filter(x => world.buildings.byID[x].type === buildingType);\r\n    if (keysOfType.length < 1)\r\n        return undefined;\r\n    const r = GetRandom(keysOfType);\r\n    return world.buildings.byID[r]\r\n}\r\nexport function CityGetRandomEntertainmentBuilding(city: ICity, world: IWorldState): IBuilding|undefined{\r\n    const keysOfType: number[] = city.buildingKeys.filter(x => world.buildings.byID[x].type === 'nature' || world.buildings.byID[x].type === 'park' || world.buildings.byID[x].type === 'theater');\r\n    if (keysOfType.length < 1)\r\n        return undefined;\r\n    const r = GetRandom(keysOfType);\r\n    return world.buildings.byID[r]\r\n}\r\nexport function CityGetNearestNeighbors(city: ICity, source: IBean): number[]{\r\n    const q = MoverStoreInstance.Get('bean', source.key).current;\r\n    if (!q)\r\n        return [];\r\n    return city.beanKeys.filter((bKey) => {\r\n        if (bKey == source.key) return false;\r\n\r\n        const p = MoverStoreInstance.Get('bean', bKey).current;\r\n        if (!p)\r\n            return false;\r\n        const squared = Math.pow(p.point.x - q.point.x, 2)+Math.pow(p.point.y - q.point.y, 2);\r\n\r\n        return squared < 1600 && squared > 600;\r\n    });\r\n}","import { IBean } from './simulation/Agent';\r\nimport { RandomBeliefBucket } from './simulation/Beliefs';\r\nimport { City, ICity } from './simulation/City';\r\nimport { Economy } from './simulation/Economy';\r\nimport { BuildingTypes, HexPoint, PolarPoint } from './simulation/Geography';\r\nimport { IWorldState } from './state/features/world';\r\nimport { TraitCommunity, TraitEthno, TraitFaith, TraitIdeals, TraitJob } from './World';\r\nimport { WorldSound } from './WorldSound';\r\n\r\nconst EnterpriseStartingListing = 1;\r\nconst MaxNumBeanTraitsOnGenerate = 3;\r\n\r\n/**\r\n * return better random values\r\n * @param min \r\n * @param max \r\n * @returns \r\n */\r\nexport function GetRandomNumber(min: number, max: number): number{\r\n    const randomBuffer = new Uint32Array(1);\r\n    window.crypto.getRandomValues(randomBuffer);\r\n    const randomNumber = randomBuffer[0] / (0xffffffff + 1);\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(randomNumber * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * \r\n * @returns float between 0 and 1\r\n */\r\nexport function GetRandomFloat(): number{\r\n    //https://stackoverflow.com/questions/34575635/cryptographically-secure-float\r\n    // A buffer with just the right size to convert to Float64\r\n    let buffer = new ArrayBuffer(8);\r\n\r\n    // View it as an Int8Array and fill it with 8 random ints\r\n    let ints = new Int8Array(buffer);\r\n    window.crypto.getRandomValues(ints);\r\n\r\n    // Set the sign (ints[7][7]) to 0 and the\r\n    // exponent (ints[7][6]-[6][5]) to just the right size \r\n    // (all ones except for the highest bit)\r\n    ints[7] = 63;\r\n    ints[6] |= 0xf0;\r\n\r\n    // Now view it as a Float64Array, and read the one float from it\r\n    return new DataView(buffer).getFloat64(0, true) - 1; \r\n}\r\n\r\n/**\r\n * given a chance (0-1) return true if random float is <= chance\r\n * @param chance \r\n * @returns \r\n */\r\nexport function GetRandomRoll(chance: number): boolean{\r\n    const randomNumber = GetRandomFloat();\r\n    //console.log(`DC ${(chance*100).toFixed(3)} rolled ${(randomNumber*100).toFixed(4)}`);\r\n    return randomNumber <= chance;\r\n}\r\n\r\n/**\r\n * convenience random function\r\n * @param length \r\n * @returns \r\n */\r\nexport function GetRandomIndex(length: number): number{\r\n    return GetRandomNumber(0, length-1)\r\n}\r\n\r\nexport function GetRandom<S>(choices: S[]):S {\r\n    const max = choices.length;\r\n    if (max == 1)\r\n        return choices[0];\r\n\r\n    const i = GetRandomIndex(choices.length);\r\n    return choices[i];\r\n}\r\nexport function RandomIdeal(): TraitIdeals{\r\n    return GetRandom(['prog', 'trad']);\r\n}\r\nexport function RandomCommunity(): TraitCommunity{\r\n    return GetRandom(['state', 'ego']);\r\n}\r\nexport function RandomEthno(): TraitEthno{\r\n    return GetRandom(['circle','square','triangle']);\r\n}\r\nexport function RandomFaith(): TraitFaith{\r\n    return GetRandom(['rocket','music','dragon', 'noFaith']);\r\n}\r\nexport function StartingCash(job: TraitJob): number{\r\n    let base = 4 + Math.floor(Math.random() * 3);\r\n    switch(job){\r\n        case 'doc': return base+2;\r\n        default: return base;\r\n    }\r\n}\r\nexport const MAX_PETRI_RADIUS = 200;\r\nexport const PI2 = Math.PI*2;\r\nexport function RandomPolar(r?: number): PolarPoint{\r\n    return {\r\n        r: r || GetRandomNumber(0, MAX_PETRI_RADIUS),\r\n        az: GetRandomNumber(0, PI2)\r\n    };\r\n}\r\nexport function GetBuildingR(type: BuildingTypes): number{\r\n    switch(type){\r\n        case 'farm':\r\n            return GetRandomNumber(200, 300);\r\n        default: \r\n            return GetRandomNumber(80, 200);\r\n    }\r\n}\r\n\r\nconst CityPrefixes = ['New ', 'Old ', 'Fort ', 'St. ', 'Mount ', 'Grand ', '', '', '', '', '', '', '', '', '', ''];\r\nconst CityFirstsnames = ['Spring', 'Timber', 'Over', 'West', 'East', 'North', 'South', 'Rock', 'Sand', 'Clay', 'Iron', 'Ore', 'Coal', 'Liver', 'Hawk', 'Red', 'Yellow', 'Gold', 'Blue', 'Black', 'White', 'Sunny', 'Reed', 'Ox', 'Mill', 'Fern', 'Down', 'Bel', 'Bald', 'Ash'];\r\nconst CityLastnames = ['water ', ' Springs', 'ville', 'dale', 'lane', 'peak', 'coast', 'beach', 'port', 'market', 'ton', 'brook', ' Creek', 'land', 'burgh', 'bridge', 'ford', 'bury', 'chester', 'son', 'vale', ' Valley', 'hill', 'more', 'wood', ' Oaks', ' Cove', 'mouth', 'way', 'crest'];\r\nexport function GetRandomCityName(){\r\n    return `${GetRandom(CityPrefixes)}${GetRandom(CityFirstsnames)}${GetRandom(CityLastnames)}`;\r\n}\r\nexport const Number_Starting_City_Pop = 0;\r\nexport function GenerateCity(previousCityCount: number, sfx: WorldSound, econ: Economy): City{\r\n    let newCity = new City(sfx, econ);\r\n    newCity.key = previousCityCount;\r\n    newCity.name = GetRandomCityName();\r\n    \r\n    // GenerateBuilding(newCity, 'courthouse', newCity.hexes[0], newCity.economy); \r\n    // GenerateBuilding(newCity, 'nature', newCity.hexes[GetRandomNumber(15, 20)], newCity.economy); \r\n    // GenerateBuilding(newCity, 'nature', newCity.hexes[GetRandomNumber(21, 25)], newCity.economy); \r\n    // GenerateBuilding(newCity, 'nature', newCity.hexes[GetRandomNumber(26, 60)], newCity.economy);\r\n    // GenerateBuilding(newCity, 'house', newCity.hexes[1]); \r\n    // GenerateBuilding(newCity, 'hospital', newCity.hexes[5]);\r\n    \r\n    // GenerateBuilding(newCity, 'farm', newCity.hexes[7]);\r\n\r\n    // const cityPopulation = Number_Starting_City_Pop;\r\n    // while(newCity.beans.get.length < cityPopulation){\r\n    //     newCity.beans.push(\r\n    //         GenerateBean(newCity)\r\n    //     );\r\n    // }\r\n\r\n    return newCity;\r\n}\r\n\r\nexport function GenerateBean(world: IWorldState, city: ICity, parent?: IBean, hexPoint?: HexPoint, job?: TraitJob): IBean{\r\n    let newBean: IBean = {\r\n        key: world.beans.nextID++,\r\n        cityKey: city.key,\r\n        name: '',\r\n        ethnicity: RandomEthno(),\r\n        community: RandomCommunity(),\r\n        ideals: RandomIdeal(),\r\n        faith: RandomFaith(),\r\n        stamina: 'awake',\r\n        health: 'fresh',\r\n        food: 'sated',\r\n        discrete_food: 3,\r\n        discrete_health: 2,\r\n        discrete_sanity: 10,\r\n        discrete_stamina: 7,\r\n        discrete_fun: 0,\r\n        graceTicks: 0,\r\n        dob: {year: world.date.year, season: world.date.season, day: world.date.day, hour: world.date.hour},\r\n        sanity: 'sane',\r\n        beliefs: [],\r\n        lifecycle: 'alive',\r\n        hedonHistory: [{}, {}, {}, {}, {}],\r\n        job: 'jobless',\r\n        happiness: { flatAverage: 0,all: {}, maxSource: '', minSource: '', weightedAverage: 0},\r\n        lastHappiness: 0,\r\n        hedonFiveDayRecord: { max: 0, min: 0 },\r\n        fairGoodPrice: 0,\r\n        bornInPetri: parent != null,\r\n        cash: 3,\r\n        ticksSinceLastSale: 0,\r\n        ticksSinceLastRelax: 0,\r\n        lastChatMS: 0,\r\n        action: 'idle',\r\n        actionData: {act: 'idle'},\r\n        activity_duration: {'buy': 0, 'chat': 0, 'craze': 0, 'crime': 0, 'idle': 0, 'relax': 0, 'sleep': 0, 'soapbox': 0, 'travel': 0, 'work': 0},\r\n    };\r\n    // MoverBusInstance.Get('bean', newBean.key).publish({\r\n    //     velocity: {x: 0, y: 0},\r\n    //     point: hex_to_pixel(city.hex_size, city.petriOrigin, hexPoint || {q: 0, r: 0})\r\n    // });\r\n    newBean.name = GetRandom(['Joe', 'Frank', 'Jill', 'Jose',\r\n    'Johnny', 'Isabelle', 'Carmen', 'Ace', 'Carl', 'Zander', 'Jean',\r\n    'Anne', 'Leslie', 'Ben', 'Ron', \r\n    'Ellen', 'Dallas', 'Kane', 'Ash', \r\n    'Jim', 'James', 'Leonard', 'Nyota', 'Christine', 'Scotty', 'Tasha', 'Geordi', 'Beverly', 'Deanna', 'Wesley', 'Majel',\r\n    'Malcolm','River',  \r\n    'Luke', 'Han', 'Owen', 'Rey', 'Mace', 'Cody',\r\n    'Dana', 'Walter',  \r\n    'Rick', 'Holden', 'Roy', 'Pris', 'Eldon', 'Rachael',\r\n    'Rose', 'Donna', 'Jack', 'Amy', 'Rory', 'Martha', 'Clara', \r\n    'Arnold', 'Dave', 'Holly', \r\n    'Kara', 'Gaius','William', 'Lee', 'Laura', 'Saul',\r\n    'Max', 'Edison', 'Theora', 'Bryce', 'Murray', 'Ned',\r\n    'Daniel', 'Samantha', \r\n    'Logan', 'Francis', 'Jessica',\r\n    'Thomas',\r\n    'Benny', 'James', 'John Henry', 'Sarah', 'Piper', 'Nick', 'Shaun', 'Preston'\r\n    ]) + ' ';\r\n    newBean.name += GetRandom([\r\n        'Ripley', 'Bishop', 'Hicks', 'Vasquez', 'Hudson', \r\n        'Rico', 'Flores', 'Ibanez', 'Levy', 'Jenkins', 'Barlow', 'Zim', 'Rasczak',\r\n        'Kirk', 'McCoy', 'Sulu', 'Uhura', 'Chekov', 'Chapel', 'Rand','Riker', 'Crusher', 'Barret', \"O'Brien\",\r\n        'Reynolds', 'Tam', \r\n        'Scully', 'Mulder','Skinner', \r\n        'Connor', \r\n        'Rex',\r\n        'Thrace', 'Baltar', 'Smith','Adama', 'Roslin', 'Tigh', 'Song', 'Oswald', \r\n        'Deckard', 'Bryant', 'Tyrell', 'Sebastian', 'Voight', 'Kampff',\r\n        'Tyler', 'Harkness', 'Jones', 'Noble', 'Pond', 'Williams',\r\n        'Rimmer', 'Lister', \r\n        'Head', 'Carter', 'Lynch', 'McKenzie', 'Grossberg',\r\n        \"O'Neil\", 'Jackson', 'Carter',\r\n        'Whitmore',\r\n        'House', 'Mitchell', 'Eden', 'Lyons', 'Valentine', 'Garvey'\r\n         ]);\r\n    const beanBeliefCount = Math.ceil(Math.random() * MaxNumBeanTraitsOnGenerate);\r\n    while (newBean.beliefs.length < beanBeliefCount) {\r\n        const newBelief = GetRandom(RandomBeliefBucket);\r\n        const hasAlready = newBean.beliefs.includes(newBelief);\r\n        if (!hasAlready)\r\n            newBean.beliefs.push(newBelief);\r\n    }\r\n\r\n    if (parent){\r\n        newBean.ethnicity = parent.ethnicity;\r\n        newBean.name = newBean.name.split(' ')[0] + ' ' + parent.name.split(' ')[1];\r\n        newBean.cash = parent.cash / 2;\r\n        parent.cash /= 2;\r\n    }\r\n    \r\n    // if (job == null){\r\n    //     switch (city.beanSeed){\r\n    //         case 1:\r\n    //             job = 'farmer'; break;\r\n    //         case 2:\r\n    //             job = 'builder'; break;\r\n    //         case 3:\r\n    //             job = 'doc'; break;\r\n    //         default:\r\n    //             job = GetRandom(['farmer', 'builder', 'doc', 'entertainer']); break;\r\n    //     }\r\n    // }\r\n    // newBean.trySetJob(job);\r\n    \r\n    return newBean;\r\n}","import { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { TraitEmote } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { OriginAccelerator, Point, Vector } from \"./Geography\";\r\n\r\nexport interface IPickup{\r\n    key: number, \r\n    point: Point, \r\n    type: TraitEmote,\r\n    velocity: Vector\r\n}\r\n\r\nexport function GenerateEmoteFromBean(bean: IBean, emote: TraitEmote): IPickup {\r\n    return {\r\n        key: 0,\r\n        point: {\r\n            ...(MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator).point\r\n        },\r\n        type: emote,\r\n        velocity: { x: 0, y: 0 }\r\n    };\r\n}","import { TraitCommunity, TraitIdeals, TraitEthno, TraitFaith, TraitStamina, TraitHealth, TraitFood, TraitJob, JobToGood, IHappinessModifier, TraitToModifier, MaslowHappinessScore, GetHappiness, GoodToThreshold, TraitGood, TraitSanity, TraitEmote, EmotionSanity, EmotionWorth } from \"../World\";\r\nimport { RandomEthno, GetRandom, GetRandomNumber, GetRandomRoll, GenerateBean } from \"../WorldGen\";\r\nimport { Economy, GetFairGoodPrice, IEconomy, ISeller } from \"./Economy\";\r\nimport { Policy, Party } from \"./Politics\";\r\nimport { IEvent, PubSub } from \"../events/Events\";\r\nimport { IDate, withinLastYear } from \"./Time\";\r\nimport { Government, IGovernment } from \"./Government\";\r\nimport { Act, IActivityData, IBean, IChatData } from \"./Agent\";\r\nimport { JobToBuilding, OriginAccelerator, Point, Vector } from \"./Geography\";\r\nimport { BuildingUnsetJob, City, ICity } from \"./City\";\r\nimport { PriorityQueue } from \"./Priorities\";\r\nimport { GetHedonReport, HedonExtremes, HedonReport, HedonSourceToVal, SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { IPlayerData } from \"./Player\";\r\nimport { BeanDeathCause, BeanResources, IDifficulty } from \"../Game\";\r\nimport { MathClamp } from \"./Utils\";\r\nimport { GenerateEmoteFromBean, IPickup } from \"./Pickup\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\n\r\nconst BabyChance = 0.008;\r\nexport const DaysUntilSleepy = 7;\r\nconst ChatCooldownMS = 4000;\r\n/**\r\n * beans with belief # < this are more likely to be persuaded\r\n * with belief # > this are less likely to be persuaded\r\n */\r\nconst PersuasionBeliefTarget = 2; \r\n\r\nexport const HedonismExtraChance = 0.1;\r\nexport const ParanoidUnhappyChance = 0.05;\r\nexport const HedonismHateWorkChance = 0.15;\r\nexport const DiligenceHappyChance = 0.25;\r\nexport const ParochialHappyChance = 0.25;\r\nexport const CosmopolitanHappyChance = 0.25;\r\nconst ExtrovertChatExtraChance = 0.25;\r\nconst IntrovertChatExtraChance = -.15;\r\nconst AntagonismBullyChance = 0.45;\r\nconst GossipBullyChance = 0.35;\r\nconst EnthusiasmPraiseChance = 0.45;\r\nexport const GermophobiaHospitalWorkChance = 0.25;\r\nconst NatalismExtraBabyChance = 0.04;\r\nconst AntinatalismExtraBabyChance = -0.002;\r\nconst CharismaExtraPersuasionStrength = 2; //d20 based, so 10% extra strength\r\nexport const LibertarianTaxUnhappyChance = 0.1;\r\nexport const ProgressivismTaxHappyChance = 0.1;\r\n\r\nconst MaxGraceTicks = 6;\r\nexport class Bean implements IBean{\r\n    actionData: IActivityData = { act: 'idle' };\r\n    public key: number = 0;\r\n    public cityKey: number = 0;\r\n    public dob: IDate = { year: 0, season: 0, day: 1, hour: 0 };\r\n    public bornInPetri: boolean = false;\r\n    public name: string = 'Human Bean';\r\n    public get sanity(): TraitSanity {\r\n        if (this.discrete_sanity >= 8)\r\n            return 'sane';\r\n        else if (this.discrete_sanity >= 5)\r\n            return 'stressed'\r\n        else if (this.discrete_sanity >= 3)\r\n            return 'disturbed'\r\n        else\r\n            return 'psychotic';\r\n    }\r\n    public discrete_sanity: number = 10;\r\n    /**\r\n     * 0-1\r\n     */\r\n    public discrete_fun: number = 0;\r\n    public lifecycle: 'alive'|'dead'|'abducted' = 'alive';\r\n    public get alive(): boolean{\r\n        return this.lifecycle === 'alive';\r\n    }\r\n    public set alive(val: boolean){\r\n        this.lifecycle = val === true ? 'alive' : 'dead';\r\n    }\r\n\r\n    public activity_queue: IActivityData[] = [];\r\n    public activity_duration: {[act in Act]: number} = {'buy': 0, 'chat': 0, 'craze': 0, 'crime': 0, 'idle': 0, 'relax': 0, 'sleep': 0, 'soapbox': 0, 'travel': 0, 'work': 0};\r\n\r\n    public speed = 60;\r\n    public point: Point = {x: 0, y: 0};\r\n    public velocity: Vector = {x: 0, y: 0};\r\n    public onMove = new PubSub<Point>();\r\n    public destinationKey = 0;\r\n\r\n    public city: City|null = null;\r\n\r\n    public action: Act = 'idle';\r\n\r\n    public ethnicity: TraitEthno = RandomEthno();\r\n\r\n    //maslow\r\n    public discrete_food: number = 1;\r\n    public get food(): TraitFood {\r\n        if (this.discrete_food >= GoodToThreshold['food'].abundant)\r\n        return 'stuffed';\r\n        else if (this.discrete_food >= GoodToThreshold['food'].sufficient)\r\n        return 'sated'\r\n        else if (this.discrete_food >= GoodToThreshold['food'].warning)\r\n        return 'hungry'\r\n        else\r\n        return 'starving';\r\n    }\r\n    public stamina: TraitStamina = 'awake';\r\n    public discrete_health: number = 2;\r\n    public get health(): TraitHealth {\r\n        if (this.discrete_health >= GoodToThreshold['medicine'].abundant)\r\n        return 'fresh';\r\n        else if (this.discrete_health >= GoodToThreshold['medicine'].sufficient)\r\n        return 'bruised'\r\n        else if (this.discrete_health >= GoodToThreshold['medicine'].warning)\r\n        return 'sickly'\r\n        else\r\n        return 'sick';\r\n    }\r\n    //values\r\n    public community: TraitCommunity = 'ego';\r\n    public ideals: TraitIdeals = 'trad';\r\n    //other\r\n    public job: TraitJob = 'jobless';\r\n    public employerEnterpriseKey?: number;\r\n    public faith: TraitFaith = 'noFaith';\r\n    public beliefs: TraitBelief[] = [];\r\n    public cash: number = 3;\r\n    /**\r\n     * # of ticks before bean can possibly die of dire conditions\r\n     */\r\n    public graceTicks = MaxGraceTicks;\r\n    /**\r\n     * current hedons on index 0, plus last len-1 days of hedon history\r\n     * \r\n     * do not modify - World.tsx simulate_world will handle it\r\n     */\r\n    public hedonHistory: HedonSourceToVal[] = [{}];\r\n    /**\r\n     * latest happiness report\r\n     */\r\n    public happiness: HedonReport = GetHedonReport(this.hedonHistory);\r\n    public hedonFiveDayRecord: HedonExtremes = {min: 0, max: 0};\r\n    /**\r\n     * -100 to 100\r\n     */\r\n    public lastHappiness: number = 0;\r\n    \r\n    public ticksSinceLastSale: number = 0;\r\n    public ticksSinceLastRelax: number = 0;\r\n    /**\r\n     * days until needs sleep\r\n     */\r\n    public discrete_stamina: number = 7;\r\n    public fairGoodPrice: number = 1;\r\n    public lastChatMS: number = Date.now();\r\n    get isInCrisis(): boolean{\r\n        return BeanIsInCrisis(this);\r\n    }\r\n    believesIn(belief: TraitBelief): boolean{\r\n        return BeanBelievesIn(this, belief);\r\n    }\r\n    getHappinessModifiers(econ: Economy, homeCity: City, law: Government): IHappinessModifier[]{\r\n        const mods: IHappinessModifier[] = [\r\n            TraitToModifier[this.food],\r\n            TraitToModifier[this.stamina],\r\n            TraitToModifier[this.health],\r\n            {\r\n                reason: 'Entertainment', mod: this.discrete_fun*.4\r\n            }\r\n        ];\r\n        if (this.ideals === 'trad' && this.ethnicity != homeCity.majorityEthnicity) {\r\n            mods.push({reason: 'Xenophobic', mod: -.1});\r\n        }\r\n        if (this.community === 'ego' && this.job != 'jobless' && this.employerEnterpriseKey &&\r\n            homeCity.book.db.get.get(this.employerEnterpriseKey)?.upgraded) {\r\n            mods.push({reason: 'Hates Building Density', mod: -.1});\r\n        }\r\n        if (this.cash < 1) {\r\n            mods.push({reason: 'Penniless', mod: MaslowHappinessScore.Deficient});\r\n        } else if (this.cash > econ.getCostOfLiving() * 3){\r\n            mods.push({reason: 'Upper Class', mod: 0.3});\r\n        } else if (this.cash > econ.getCostOfLiving() * 2){\r\n            mods.push({reason: 'Middle Class', mod: 0.15});\r\n        }\r\n        if (this.job === 'jobless') {\r\n            mods.push({reason: 'Unemployed', mod: MaslowHappinessScore.Deficient});\r\n        }\r\n\r\n        return mods;\r\n    }\r\n    getSentimentModifiers(econ: Economy, homeCity: City, law: Government, party: Party): {\r\n        party: IHappinessModifier[],\r\n        law: IHappinessModifier[]\r\n    }{\r\n        const result = {party: [] as IHappinessModifier[], law: [] as IHappinessModifier[]};\r\n\r\n        if (this.community === party.community){\r\n            result.party.push({reason: 'Same Community', mod: 0.15});\r\n        }\r\n        if (this.ideals === party.ideals){\r\n            result.party.push({reason: 'Same Ideals', mod: 0.15});\r\n        } else if (this.community != party.community){\r\n            result.party.push({reason: 'Incompatible Values', mod: -0.15});\r\n        }\r\n        return result;\r\n    }\r\n    calculateBeliefs(econ: Economy, homeCity: City, law: Government, party: Party): void{\r\n        this.hedonFiveDayRecord = {\r\n          min: Math.min(this.hedonFiveDayRecord.min, this.happiness.flatAverage),\r\n          max: Math.max(this.hedonFiveDayRecord.max, this.happiness.flatAverage)  \r\n        };\r\n        if (this.happiness.flatAverage === 0){\r\n            this.lastHappiness = 0;\r\n        } else {\r\n            this.lastHappiness = this.happiness.flatAverage >= 0 ? (\r\n                this.happiness.flatAverage / this.hedonFiveDayRecord.max) * 100 : (\r\n                this.happiness.flatAverage / this.hedonFiveDayRecord.min) * 100;\r\n        }\r\n\r\n        if (this.job === 'jobless'){\r\n            this.fairGoodPrice = 1;\r\n        } else {\r\n            const myGood = JobToGood(this.job);\r\n            this.fairGoodPrice = econ.getFairGoodPrice(myGood);\r\n        }\r\n    }\r\n    /**\r\n     * non-normalized multiplier\r\n     */\r\n    getSentimentPolicies(traits: {[x:string]:boolean}, policies: Policy[]){\r\n        let multiplier = 100;\r\n        policies.forEach((policy) => {\r\n            policy.fx.forEach((fx) => {\r\n                if (traits[fx.key])\r\n                multiplier += fx.mag * 10; //-30 to +30\r\n            });\r\n        });\r\n        return multiplier / 100;\r\n    }\r\n    _getTraitMap(){\r\n        let traits = {[this.community]: true, [this.ideals]:  true, [this.ethnicity]: true};\r\n        if (this.faith != 'noFaith')\r\n            traits[this.faith] = true;\r\n        return traits;\r\n    }\r\n    getIdea(costOfLiving: number): {bad: boolean, idea: string}|null {\r\n        if (this.food === 'hungry')\r\n            return {bad: true, idea: '🍗'};\r\n        if (this.health === 'sickly')\r\n            return {bad: true, idea: '💊'};\r\n        if (this.stamina === 'homeless')\r\n            return {bad: true, idea: '🏠'};\r\n        if (this.canBaby(costOfLiving))\r\n            return {bad: false, idea: '👶'};\r\n        return null;        \r\n    }\r\n    getSpeech(): string | undefined {\r\n        if (this.action === 'chat'){\r\n            if (this.actionData.chat?.participation === 'speaker' && this.actionData.chat.preachBelief){\r\n                return '💬'+SecondaryBeliefData[this.actionData.chat.preachBelief].icon;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    getCrimeDecision(\r\n        good: TraitGood,\r\n        crimeReason: 'desperation'|'greed',\r\n    ){\r\n        const roll = Math.random();\r\n        let chance = 0.05;\r\n        if (this.community === 'ego'){\r\n            chance += .1;\r\n        }\r\n        if (crimeReason === 'desperation' && this.health === 'sick' || this.food === 'starving'){\r\n            chance += .15;\r\n        }\r\n        return chance <= roll;\r\n    }\r\n    tryFindRandomJob(law: Government) {\r\n        const job: TraitJob = GetRandom(['builder', 'doc', 'farmer', 'entertainer']);\r\n        \r\n    }\r\n    canPurchase(cost: BeanResources, sanityBonus: number) {\r\n        return (cost.sanity === undefined || this.discrete_sanity >= cost.sanity + sanityBonus);\r\n    }\r\n    public maybeParanoid() {\r\n        this.ifBelievesInMaybeEmote('Paranoia', 'unhappiness', ParanoidUnhappyChance)\r\n    }\r\n    public maybeAntagonised(){\r\n        this.emote('unhappiness', 'Antagonism');\r\n    }\r\n    public maybeEnthused(){\r\n        this.emote('happiness', 'Enthusiasm');\r\n    }\r\n    maybePersuade(belief: TraitBelief, strength: number) {\r\n        if (this.believesIn('Dogmatism'))\r\n            return;\r\n        if (!this.beliefs.includes(belief)){\r\n            let defense = 10 + GetRandomNumber(1, 6);\r\n            defense += this.beliefs.length - PersuasionBeliefTarget;\r\n            let offense = GetRandomNumber(1, 20) + strength;\r\n    \r\n            if (offense > defense){\r\n                this.beliefs = [...this.beliefs, belief]\r\n                this.city?.eventBus?.persuasion.publish({\r\n                    key: 0,\r\n                    icon: '🗣️', \r\n                    trigger: 'persuasion', \r\n                    message: `${this.name} now believes in ${SecondaryBeliefData[belief].icon} ${SecondaryBeliefData[belief].noun}!`, \r\n                    beanKey: this.key, cityKey: this.cityKey,\r\n                    point: this.point\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * chats or conversations use 🗣️ in descriptions\r\n     * @returns \r\n     */\r\n    public maybeChat(): boolean {\r\n        if (this.lastChatMS + ChatCooldownMS > Date.now()) \r\n            return false;\r\n        if (this.action === 'chat')\r\n            return false;\r\n        const roll = Math.random();\r\n        let chance = (this.community === 'state') ? 0.2 : 0.1;\r\n        if (this.believesIn('Extroversion')) \r\n            chance += ExtrovertChatExtraChance;\r\n        if (this.believesIn('Introversion')) \r\n            chance += IntrovertChatExtraChance;\r\n        return roll < chance;\r\n    }\r\n    public getRandomChat(nearby: Bean[]): IChatData {\r\n        const canPreach = this.beliefs.length;\r\n        if (canPreach){\r\n            if (this.believesIn('Charity') && this.cash >= 2){\r\n                //find a bean with less money than self, poorest in sight\r\n                const needy = nearby.filter(x => x.cash <= this.cash-1).reduce((least: Bean|null, bean) => {\r\n                    if (least == null || (bean.cash < least.cash))\r\n                        return bean;\r\n                    return least;\r\n                }, null);\r\n                if (needy) {\r\n                    this.cash -= 0.5;\r\n                    this.emote('happiness', 'Charity');\r\n                    needy.cash += 0.5;\r\n                    needy.emote('happiness', 'Charity');\r\n                    return {\r\n                        participation: 'speaker',\r\n                        type: 'gift',\r\n                        targetBeanKey: needy.key\r\n                    }\r\n                }\r\n            } else if(this.believesIn('Enthusiasm') && Math.random() < EnthusiasmPraiseChance){\r\n                return {\r\n                    participation: 'speaker',\r\n                    type: 'praise',\r\n                    preachBelief: 'Enthusiasm'\r\n                }\r\n            } else if(this.believesIn('Antagonism') && Math.random() < AntagonismBullyChance){\r\n                return {\r\n                    participation: 'speaker',\r\n                    type: 'bully',\r\n                    preachBelief: 'Antagonism'\r\n                }\r\n            } else if(this.believesIn('Gossip') && Math.random() < GossipBullyChance){\r\n                return {\r\n                    participation: 'speaker',\r\n                    type: 'bully',\r\n                    preachBelief: 'Gossip'\r\n                }\r\n            }\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'preach',\r\n                preachBelief: GetRandom(this.beliefs),\r\n                persuasionStrength: 1 + (this.believesIn('Charisma') ? CharismaExtraPersuasionStrength : 0)\r\n            }\r\n        } else {\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'praise'\r\n            }\r\n        }\r\n    }\r\n    work(law: Government, econ: Economy) {\r\n        if (this.job === 'jobless'){\r\n        } else {\r\n            switch(this.job){\r\n                case 'farmer':\r\n                    this.discrete_food = Math.min(this.discrete_food+1, GoodToThreshold.food.sufficient*2);\r\n                    this.ifBelievesInMaybeEmote('Parochialism', 'happiness', ParochialHappyChance);\r\n                    break;\r\n                case 'doc':\r\n                    this.discrete_health = Math.min(this.discrete_health+1, GoodToThreshold.medicine.sufficient*2);\r\n                    this.ifBelievesInMaybeEmote('Germophobia', 'unhappiness', GermophobiaHospitalWorkChance);\r\n                    break;\r\n                case 'builder': \r\n                    this.stamina = 'awake';\r\n                    this.discrete_stamina = 7;\r\n                    break;\r\n                case 'entertainer':\r\n                    this.ifBelievesInMaybeEmote('Cosmopolitanism', 'happiness', CosmopolitanHappyChance);\r\n                break;\r\n            }\r\n            this.ifBelievesInMaybeEmote('Diligence', 'happiness', DiligenceHappyChance);\r\n            this.ifBelievesInMaybeEmote('Hedonism', 'unhappiness', HedonismHateWorkChance);\r\n            this.ticksSinceLastSale++;\r\n            if (this.ticksSinceLastSale > 7){\r\n                const cityHasOtherWorkers = this.city ? this.city.beans.get.filter(x => x.job === this.job).length > 1 : false;\r\n                //underemployment\r\n                if (cityHasOtherWorkers && Math.random() > 0.5) {\r\n                    const newJob = econ.mostInDemandJob();\r\n                    // if (newJob)\r\n                        // this.trySetJob(newJob);\r\n                }\r\n            }\r\n            let workedForEmployer = false;\r\n            if (this.city && this.employerEnterpriseKey){\r\n                const employer = this.city.getEnterprise(this.employerEnterpriseKey);\r\n                if (employer){\r\n                    econ.employAndPrice(employer, JobToGood(this.job), 4, this.fairGoodPrice);\r\n                    workedForEmployer = true;\r\n                    switch(employer.enterpriseType){\r\n                        case 'company':\r\n                            this.ifBelievesInMaybeEmote('Communism', 'unhappiness', 0.1);\r\n                            if (employer.ownerBeanKey === this.key)\r\n                                this.ifBelievesInMaybeEmote('Capitalism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'co-op':                            \r\n                            this.ifBelievesInMaybeEmote('Capitalism', 'unhappiness', 0.1);\r\n                                \r\n                            this.ifBelievesInMaybeEmote('Socialism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'commune':                            \r\n                            this.ifBelievesInMaybeEmote('Capitalism', 'unhappiness', 0.1);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (!workedForEmployer)\r\n                econ.produceAndPrice(this, JobToGood(this.job), 4, this.fairGoodPrice);\r\n        }\r\n    }\r\n    private buyFood(economy: Economy) {\r\n        const groceries = economy.tryTransact(this, 'food', 0.5, 3);\r\n        if (groceries) {\r\n            this.discrete_food += groceries.bought;\r\n            if (this.food === 'stuffed'){\r\n                this.emote('happiness', 'Stuffed');\r\n                this.ifBelievesInMaybeEmote('Gluttony', 'happiness', 1);\r\n            }\r\n        }\r\n        return groceries;\r\n    }\r\n    public buy: {[key in TraitGood]: (econ: Economy)=> boolean} = {\r\n        food: (economy: Economy) =>{\r\n            return this.buyFood(economy) != null;\r\n        },\r\n        medicine:  (economy: Economy) =>{\r\n            return this.buyMeds(economy) != null;\r\n        },\r\n        fun:  (economy: Economy) =>{\r\n            return this.buyFun(economy);\r\n        },\r\n        shelter: (economy: Economy) => {\r\n            return this.buyHousing(economy);\r\n        }\r\n    }\r\n    public steal(good: 'food'|'medicine', econ: Economy){\r\n        const stolen = econ.steal(good, 3);\r\n        if (stolen != null){\r\n            switch(good){\r\n                case 'food':\r\n                    this.discrete_food += stolen;\r\n                    break;\r\n                case 'medicine':\r\n                    this.discrete_health += stolen;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    private buyHousing(economy: Economy): boolean {\r\n        const housing = economy.tryTransact(this, 'shelter');\r\n        if (housing) {\r\n            this.discrete_stamina = 10;\r\n            this.stamina = 'awake';\r\n        } else if (this.discrete_stamina <= 0){\r\n            this.stamina = 'homeless';\r\n        }\r\n        return housing != null;\r\n    }\r\n    private buyFun(economy: Economy): boolean {\r\n        const fun = economy.tryTransact(this, 'fun');\r\n        if (fun) {\r\n            this.discrete_fun = 1;\r\n            this.emote('happiness', 'Entertainment');\r\n            this.emote('happiness', 'Entertainment');\r\n        }\r\n        return fun != null;\r\n    }\r\n\r\n    age(economy: Economy, diff: IDifficulty): IEvent|null {\r\n        if (!this.alive) return null;\r\n\r\n        const wasNotHungry = this.food !== 'starving';\r\n        const wasNotSick = this.health !== 'sick';\r\n\r\n        this.discrete_food -= diff.bean_life.degrade_per_tick.food;\r\n        if (this.discrete_food < 0)\r\n            this.discrete_health -= 0.2;\r\n\r\n        const starve = this.maybeDie('starvation', this.food === 'starving', 0.6);\r\n        if (starve)\r\n            return null;\r\n        else if (this.food === 'starving' && wasNotHungry){\r\n            this.emote('unhappiness', 'Starving');\r\n            if (this.believesIn('Gluttony')){\r\n                this.emote('unhappiness', 'Gluttony');\r\n                this.emote('unhappiness', 'Gluttony');\r\n            }\r\n        }\r\n            \r\n        this.discrete_stamina -= diff.bean_life.degrade_per_tick.stamina;\r\n    \r\n        const exposure = this.maybeDie('exposure', this.stamina === 'homeless', 0.2);\r\n        if (exposure)\r\n            return null;\r\n\r\n        this.discrete_health -= diff.bean_life.degrade_per_tick.health;\r\n        this.discrete_health = Math.min(this.discrete_health, 3);\r\n        const sick = this.maybeDie('sickness', this.health === 'sick', 0.4);\r\n        if (sick)\r\n            return null;\r\n        else if (this.health === 'sick' && wasNotSick){\r\n            this.emote('unhappiness', 'sick');\r\n            if (this.believesIn('Germophobia')){\r\n                this.emote('unhappiness', 'Germophobia');\r\n            }\r\n        }\r\n\r\n        this.discrete_fun -= diff.bean_life.degrade_per_tick.fun;\r\n        this.discrete_fun = Math.max(0, this.discrete_fun);\r\n\r\n        if (!this.isInCrisis)\r\n            this.graceTicks = MathClamp(this.graceTicks+1, 0, MaxGraceTicks);\r\n        \r\n        return null;\r\n    }\r\n    private buyMeds(economy: Economy) {\r\n        const meds = economy.tryTransact(this, 'medicine', 0.5, 3);\r\n        if (meds){\r\n            this.discrete_health += meds.bought;\r\n            if (this.health === 'fresh')\r\n                this.emote('happiness', 'Robust');\r\n        }\r\n        return meds;\r\n    }\r\n    get babyChance(): number{\r\n        let base = BabyChance;\r\n        if (this.believesIn('Natalism'))\r\n            base += NatalismExtraBabyChance;\r\n        if (this.believesIn('Antinatalism'))\r\n            base += AntinatalismExtraBabyChance;\r\n        return base;\r\n    }\r\n    maybeBaby(economy: Economy): IEvent | null {\r\n        if (this.canBaby(economy.getCostOfLiving()) &&\r\n            GetRandomRoll(this.babyChance)) {\r\n            if (this.city)\r\n                this.city.breedBean(this);\r\n            else\r\n                throw 'bean does not have city object';\r\n            if (this.believesIn('Natalism')){\r\n                this.emote('love', 'Natalist Parent');\r\n            } else if (this.believesIn('Antinatalism')) {\r\n                this.emote('hate', 'Antinatalism');\r\n            } else {\r\n                this.emote('happiness', 'Proud Parent');\r\n            }\r\n            return {icon: '🎉', trigger: 'birth', message: `${this.name} has a baby!`,\r\n            key: 0,}\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    canBaby(costOfLiving: number): boolean{\r\n        return this.alive && this.cash > costOfLiving * 3 &&\r\n            !this.isInCrisis;\r\n    }\r\n    maybeCrime(good: TraitGood): boolean {\r\n        if (good === 'shelter') return false;\r\n        if (good === 'fun') return false;\r\n        const roll = Math.random();\r\n        let chance = 0.05;\r\n        if (this.community === 'ego'){\r\n            chance += .1;\r\n        }\r\n        if (this.isInCrisis){\r\n            chance += .1;\r\n        }\r\n        if (this.believesIn('Greed')){\r\n            chance += .25;\r\n        }\r\n        if (this.believesIn('Anarchism')){\r\n            chance += .33;\r\n        }\r\n        if (this.believesIn('Authority')){\r\n            chance += -.25;\r\n        }\r\n        if (good === 'food' && this.food === 'starving'){\r\n            chance += .25;\r\n        }\r\n        else if (good === 'medicine' && this.health === 'sick'){\r\n            chance += .25;\r\n        }\r\n        return chance <= roll;\r\n    }\r\n    ifBelievesInMaybeEmote(belief: TraitBelief, emote: TraitEmote, chance: number){\r\n        if (this.believesIn(belief) && Math.random() < chance){\r\n            this.emote(emote, belief);\r\n        }\r\n    }\r\n    emote(emote: TraitEmote, source: string){\r\n        this.discrete_sanity = MathClamp(this.discrete_sanity + EmotionSanity[emote], 0, 10);\r\n        this.hedonHistory[0][source] = (this.hedonHistory[0][source] || 0) + EmotionWorth[emote];\r\n        this.city?.addEmotePickup(this.point, emote);\r\n        if (this.believesIn('Hedonism') && (emote === 'happiness' || emote === 'love') && Math.random() < HedonismExtraChance){\r\n            this.city?.addEmotePickup(this.point, emote);\r\n        }\r\n    }\r\n    canBuy(good: TraitGood): 'yes'|'nosupply'|'pricedout' {\r\n        return this.city?.economy?.canBuy(this, good) || 'nosupply';\r\n    }\r\n    maybeDie(cause: BeanDeathCause, isDire: boolean, chance = 0.5): boolean{\r\n        if (isDire && Math.random() <= chance) {\r\n            if (this.graceTicks <= 0){\r\n                this.die(cause);\r\n                return true;\r\n            }\r\n            this.graceTicks--;\r\n        }\r\n        return false;\r\n    }\r\n    die(cause: BeanDeathCause){\r\n        this.alive = false;\r\n        const pains = GetRandomNumber(2, 3);\r\n        for (let i = 0; i < pains; i++) {\r\n            this.emote('hate', 'death');\r\n        }\r\n        this.city?.beans.remove(this);\r\n        this.city?.historicalBeans.push(this);\r\n        this.city?.eventBus?.death.publish({\r\n            icon: '☠️', trigger: 'death', message: `${this.name} died of ${cause}!`, \r\n            beanKey: this.key, cityKey: this.cityKey,\r\n            point: this.point,\r\n            key: 0,\r\n        });\r\n    }\r\n    maybeScarcity(good: TraitGood){\r\n        let scarce = false;\r\n        if (good === 'food' && (this.food === 'starving' || this.food === 'hungry'))\r\n            scarce = true;\r\n        else if (good === 'shelter' && (this.stamina === 'homeless' || this.stamina === 'sleepy'))\r\n            scarce = true;\r\n        else if (good === 'medicine' && (this.health === 'sick' || this.health === 'sickly'))\r\n            scarce = true;\r\n        if (scarce)\r\n            this.emote('unhappiness', 'Scarcity');\r\n    }\r\n    abduct(player: IPlayerData){\r\n        this.lifecycle = 'abducted';\r\n    }\r\n}\r\n\r\nexport function BeanMaybePersuaded(bean: IBean, belief: TraitBelief, strength: number): boolean{\r\n    if (BeanBelievesIn(bean, 'Dogmatism'))\r\n        return false;\r\n\r\n    if (!bean.beliefs.includes(belief)){\r\n        let defense = 10 + GetRandomNumber(1, 6);\r\n        defense += bean.beliefs.length - PersuasionBeliefTarget;\r\n        let offense = GetRandomNumber(1, 20) + strength;\r\n\r\n        return (offense > defense);\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function BeanCalculateHealth(bean: IBean, difficulty: IDifficulty): TraitHealth{\r\n    if (bean.discrete_health >= GoodToThreshold['medicine'].abundant)\r\n        bean.health = 'fresh';\r\n    else if (bean.discrete_health >= GoodToThreshold['medicine'].sufficient)\r\n        bean.health =  'bruised'\r\n    else if (bean.discrete_health >= GoodToThreshold['medicine'].warning)\r\n        bean.health =  'sickly'\r\n    else\r\n        bean.health =  'sick';\r\n\r\n    return bean.health;\r\n}\r\n\r\nexport function BeanCalculateShelter(bean: IBean, difficulty: IDifficulty): TraitStamina{\r\n    if (bean.discrete_stamina < 0)\r\n        bean.stamina = 'homeless';\r\n    else\r\n        bean.stamina = 'rested';\r\n    \r\n    return bean.stamina;\r\n}\r\n\r\nexport function BeanCalculateSanity(bean: IBean, difficulty: IDifficulty): TraitSanity{\r\n    if (bean.discrete_sanity >= 8)\r\n        bean.sanity = 'sane';\r\n    else if (bean.discrete_sanity >= 5)\r\n        bean.sanity =  'stressed'\r\n    else if (bean.discrete_sanity >= 3)\r\n        bean.sanity =  'disturbed'\r\n    else\r\n        bean.sanity =  'psychotic';\r\n    return bean.sanity;\r\n}\r\nexport function BeanCalculateFood(bean: IBean, difficulty: IDifficulty): TraitFood{\r\n    if (bean.discrete_food >= GoodToThreshold['food'].abundant)\r\n    bean.food = 'stuffed';\r\n    else if (bean.discrete_food >= GoodToThreshold['food'].sufficient)\r\n    bean.food = 'sated'\r\n    else if (bean.discrete_food >= GoodToThreshold['food'].warning)\r\n    bean.food = 'hungry'\r\n    else\r\n    bean.food = 'starving';\r\n\r\n    return bean.food;\r\n}\r\n\r\nexport function BeanCalculateBeliefs(bean: IBean, econ: IEconomy, difficulty: IDifficulty, law: IGovernment){\r\n    bean.hedonFiveDayRecord = {\r\n        min: Math.min(bean.hedonFiveDayRecord.min, bean.happiness.flatAverage),\r\n        max: Math.max(bean.hedonFiveDayRecord.max, bean.happiness.flatAverage)  \r\n    };\r\n    if (bean.happiness.flatAverage === 0){\r\n        bean.lastHappiness = 0;\r\n    } else {\r\n        bean.lastHappiness = bean.happiness.flatAverage >= 0 ? (\r\n            bean.happiness.flatAverage / Math.abs(bean.hedonFiveDayRecord.max)) * 100 : (\r\n            bean.happiness.flatAverage / Math.abs(bean.hedonFiveDayRecord.min)) * 100;\r\n    }\r\n    \r\n    BeanCalculateFood(bean, difficulty);\r\n    BeanCalculateHealth(bean, difficulty);\r\n    BeanCalculateSanity(bean, difficulty);\r\n    BeanCalculateShelter(bean, difficulty);\r\n\r\n    if (bean.job === 'jobless'){\r\n        bean.fairGoodPrice = 1;\r\n    } else {\r\n        bean.fairGoodPrice = GetFairGoodPrice(econ, JobToGood(bean.job))\r\n    }\r\n}\r\nexport function BeanMaybeChat(bean: IBean): boolean {\r\n        if (bean.lastChatMS + ChatCooldownMS > Date.now()) \r\n            return false;\r\n        if (bean.action === 'chat')\r\n            return false;\r\n        const roll = Math.random();\r\n        let chance = (bean.community === 'state') ? 0.2 : 0.1;\r\n        if (BeanBelievesIn(bean, 'Extroversion')) \r\n            chance += ExtrovertChatExtraChance;\r\n        if (BeanBelievesIn(bean, 'Introversion')) \r\n            chance += IntrovertChatExtraChance;\r\n        return roll < chance;\r\n}\r\nexport function BeanGetRandomChat(bean: IBean, findNeedy: () => IBean|undefined): IChatData{\r\n    const canPreach = bean.beliefs.length;\r\n    if (canPreach){\r\n        if (BeanBelievesIn(bean, 'Charity') && bean.cash >= 2){\r\n            //find a bean with less money than self, poorest in sight\r\n            const needy = findNeedy();\r\n            if (needy) {\r\n                return {\r\n                    participation: 'speaker',\r\n                    type: 'gift',\r\n                    targetBeanKey: needy.key\r\n                }\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Enthusiasm') && Math.random() < EnthusiasmPraiseChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'praise',\r\n                preachBelief: 'Enthusiasm'\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Antagonism') && Math.random() < AntagonismBullyChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'bully',\r\n                preachBelief: 'Antagonism'\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Gossip') && Math.random() < GossipBullyChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'bully',\r\n                preachBelief: 'Gossip'\r\n            }\r\n        }\r\n        return {\r\n            participation: 'speaker',\r\n            type: 'preach',\r\n            preachBelief: GetRandom(bean.beliefs),\r\n            persuasionStrength: 1 + (BeanBelievesIn(bean, 'Charisma') ? CharismaExtraPersuasionStrength : 0)\r\n        }\r\n    } else {\r\n        return {\r\n            participation: 'speaker',\r\n            type: 'praise'\r\n        }\r\n    }\r\n}\r\n\r\nexport function BeanAge(bean: IBean, diff: IDifficulty): {death?: IEvent, emotes?: IPickup[]}|undefined {\r\n    if (bean.lifecycle != 'alive') return undefined;\r\n    const emotes: IPickup[] = [];\r\n\r\n    const wasNotHungry = bean.food !== 'starving';\r\n    const wasNotSick = bean.health !== 'sick';\r\n\r\n    bean.discrete_food -= diff.bean_life.degrade_per_tick.food;\r\n    if (bean.discrete_food < 0)\r\n        bean.discrete_health -= diff.bean_life.penalty.starving_health;\r\n\r\n    BeanCalculateFood(bean, diff);\r\n    const starve = BeanMaybeDie(bean, 'starvation', bean.food === 'starving', 0.6);\r\n    if (starve)\r\n        return starve;\r\n    else if (bean.food === 'starving' && wasNotHungry){\r\n        emotes.push(...BeanEmote(bean, 'unhappiness', 'Starving'));\r\n        if (BeanBelievesIn(bean, 'Gluttony')){\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Gluttony'));\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Gluttony'));\r\n        }\r\n    }\r\n        \r\n    bean.discrete_stamina -= diff.bean_life.degrade_per_tick.stamina;\r\n\r\n    BeanCalculateShelter(bean, diff);\r\n    const exposure = BeanMaybeDie(bean, 'exposure', bean.stamina === 'homeless', 0.2);\r\n    if (exposure)\r\n        return exposure;\r\n\r\n    bean.discrete_health -= diff.bean_life.degrade_per_tick.health;\r\n    bean.discrete_health = Math.min(bean.discrete_health, 3);\r\n\r\n    BeanCalculateHealth(bean, diff);\r\n    const sick = BeanMaybeDie(bean, 'sickness', bean.health === 'sick', 0.4);\r\n    if (sick)\r\n        return sick;\r\n    else if (bean.health === 'sick' && wasNotSick){\r\n        emotes.push(...BeanEmote(bean, 'unhappiness', 'Sick'));\r\n        if (BeanBelievesIn(bean, 'Germophobia')){\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Germophobia'));\r\n        }\r\n    }\r\n\r\n    bean.discrete_fun -= diff.bean_life.degrade_per_tick.fun;\r\n    bean.discrete_fun = Math.max(0, bean.discrete_fun);\r\n\r\n    if (!BeanIsInCrisis(bean))\r\n        bean.graceTicks = MathClamp(bean.graceTicks+1, 0, MaxGraceTicks);\r\n    \r\n    if (emotes.length)\r\n        return {\r\n            emotes: emotes\r\n        };\r\n    else \r\n        return undefined;\r\n}\r\n\r\nexport function BeanEmote(bean: IBean, emote: TraitEmote, source: string): IPickup[]{\r\n    bean.discrete_sanity = MathClamp(bean.discrete_sanity + EmotionSanity[emote], 0, 10);\r\n    bean.hedonHistory[0][source] = (bean.hedonHistory[0][source] || 0) + EmotionWorth[emote];\r\n    const out = [\r\n        GenerateEmoteFromBean(bean, emote)\r\n    ];\r\n    if (BeanBelievesIn(bean, 'Hedonism') && (emote === 'happiness' || emote === 'love') && Math.random() < HedonismExtraChance){\r\n        out.push(...BeanEmote(bean, 'happiness', 'Hedonism'));\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function BeanBelievesIn(bean: IBean, trait: TraitBelief): boolean{\r\n    return bean.beliefs.indexOf(trait) !== -1;\r\n}\r\nexport function BeanMaybeBaby(bean: IBean, costOfLiving: number): IEvent|undefined{\r\n    if (BeanCanBaby(bean, costOfLiving) &&\r\n        GetRandomRoll(BeanBabyChance(bean))) {\r\n        if (BeanBelievesIn(bean, 'Natalism')){\r\n            BeanEmote(bean, 'love', 'Natalist Parent');\r\n        } else if (BeanBelievesIn(bean, 'Antinatalism')) {\r\n            BeanEmote(bean, 'hate', 'Antinatalism');\r\n        } else {\r\n            BeanEmote(bean, 'happiness', 'Proud Parent');\r\n        }\r\n        return {\r\n            icon: '🎉', trigger: 'birth', message: `${bean.name} has a baby!`,\r\n            key: 0,\r\n        }\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\nexport function BeanMaybeCrime(bean: IBean, good: TraitGood): boolean {\r\n    if (good === 'shelter') return false;\r\n    if (good === 'fun') return false;\r\n    const roll = Math.random();\r\n    let chance = 0.05;\r\n    if (bean.community === 'ego'){\r\n        chance += .1;\r\n    }\r\n    if (BeanIsInCrisis(bean)){\r\n        chance += .1;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Greed')){\r\n        chance += .25;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Anarchism')){\r\n        chance += .33;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Authority')){\r\n        chance += -.25;\r\n    }\r\n    if (good === 'food' && bean.food === 'starving'){\r\n        chance += .25;\r\n    }\r\n    else if (good === 'medicine' && bean.health === 'sick'){\r\n        chance += .25;\r\n    }\r\n    return chance <= roll;\r\n}\r\nexport function BeanMaybeParanoid(bean: IBean) {\r\n    if (BeanBelievesIn(bean, 'Paranoia') && Math.random() < ParanoidUnhappyChance){\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function BeanMaybeScarcity(bean: IBean, good: TraitGood){\r\n    let scarce = false;\r\n    if (good === 'food' && (bean.food === 'starving' || bean.food === 'hungry'))\r\n        scarce = true;\r\n    else if (good === 'shelter' && (bean.stamina === 'homeless' || bean.stamina === 'sleepy'))\r\n        scarce = true;\r\n    else if (good === 'medicine' && (bean.health === 'sick' || bean.health === 'sickly'))\r\n        scarce = true;\r\n    return scarce;\r\n}\r\nexport function BeanCanBaby(bean: IBean, costOfLiving: number): boolean{\r\n    return bean.lifecycle === 'alive' && \r\n        bean.cash > costOfLiving * 3 &&\r\n        !BeanIsInCrisis(bean);\r\n}\r\nexport function BeanBabyChance(bean: IBean): number{\r\n    let base = BabyChance;\r\n    if (BeanBelievesIn(bean, 'Natalism'))\r\n        base += NatalismExtraBabyChance;\r\n    if (BeanBelievesIn(bean, 'Antinatalism'))\r\n        base += AntinatalismExtraBabyChance;\r\n    return base;\r\n}\r\nexport function BeanMaybeDie(bean: IBean, cause: string, isDire: boolean, chance: number): {death: IEvent, emotes: IPickup[]}|undefined{\r\n    if (isDire && Math.random() <= chance) {\r\n        if (bean.graceTicks <= 0){\r\n            return BeanDie(bean, cause);\r\n        }\r\n        bean.graceTicks--;\r\n    }\r\n    return undefined;\r\n}\r\nexport function BeanDie(bean: IBean, cause: string): {death: IEvent, emotes: IPickup[]}{\r\n    bean.lifecycle = 'dead';\r\n    const pains = GetRandomNumber(2, 3);\r\n    const emotes = (new Array(pains)).map(\r\n        x => GenerateEmoteFromBean(bean, 'hate')\r\n    );\r\n    return {\r\n        death: {\r\n            icon: '☠️', trigger: 'death', message: `${bean.name} died of ${cause}!`, \r\n            beanKey: bean.key, cityKey: bean.cityKey,\r\n            point: (MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator).point,\r\n            key: 0,\r\n        },\r\n        emotes: emotes\r\n    }\r\n}\r\n\r\nexport function BeanLoseSanity(bean: IBean, amount: number){\r\n    const multiplier = BeanBelievesIn(bean, 'Neuroticism') ? 2 : 1;\r\n    bean.discrete_sanity -= multiplier * amount;\r\n}\r\n\r\nexport function BeanGetSpeech(bean: IBean): string|undefined { \r\n    if (bean.action === 'chat'){\r\n        if (bean.actionData.chat?.participation === 'speaker' && bean.actionData.chat.preachBelief){\r\n            return '💬'+SecondaryBeliefData[bean.actionData.chat.preachBelief].icon;\r\n        }\r\n    }\r\n}\r\n\r\nexport function BeanIsInCrisis(bean: IBean): boolean{\r\n    return bean.food === 'starving' ||\r\n    bean.stamina === 'homeless' ||\r\n    bean.health === 'sick';\r\n}\r\n\r\nexport function BeanCanPurchase(bean: IBean, cost: BeanResources, sanityBonus: number){\r\n    return (cost.sanity === undefined || bean.discrete_sanity >= cost.sanity + sanityBonus);\r\n}\r\n\r\nexport function BeanGetFace(bean: IBean): string{\r\n    if (bean.lifecycle === 'dead')\r\n        return '💀';\r\n    if (bean.actionData.act === 'sleep'){\r\n        return '😴';\r\n    }\r\n    if (bean.actionData.act === 'crime'){\r\n        return '😈';\r\n    }\r\n    if (bean.actionData.act === 'relax'){\r\n        return '😎';\r\n    }\r\n    if (bean.actionData.act === 'chat'){\r\n        if (bean.actionData.chat?.participation === 'speaker'){\r\n            switch(bean.actionData?.chat?.type){\r\n                default: return '😃';\r\n                case 'gift': return '😇';\r\n                case 'praise': return '🥳';\r\n                case 'bully': return '😈';\r\n            }\r\n        }\r\n        return '🤨';\r\n    }\r\n    if (bean.food === 'starving')\r\n        return '😫';\r\n    if (bean.health === 'sick')\r\n        return '🤢';\r\n    if (bean.stamina === 'homeless')\r\n        return '🥶';\r\n    if (bean.job === 'jobless')\r\n        return '😧';\r\n    if (bean.lastHappiness < 0)\r\n        return '☹️';\r\n    if (bean.lastHappiness >= 50)\r\n        return '🙂';\r\n    return '😐';\r\n}\r\n","import { ChangePubSub, IEvent, PubSub } from \"./events/Events\";\r\n\r\nexport class SignalStore {\r\n    alienEnergy = new ChangePubSub();\r\n    alienBots = new ChangePubSub();\r\n    alienHedons = new ChangePubSub();\r\n    newTraitSeen = new PubSub<{k: string, v: boolean}>();\r\n    events = new PubSub<IEvent>();\r\n    autosave = new PubSub<boolean>();\r\n}\r\n\r\nexport const SignalStoreInstance = new SignalStore();","import { LiveList, LiveMap } from \"../events/Events\";\r\nimport { DefaultDifficulty, IDifficulty, PlayerResources } from \"../Game\";\r\nimport { SignalStoreInstance } from \"../SignalStore\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { Number_Starting_City_Pop } from \"../WorldGen\";\r\nimport { IBean } from \"./Agent\";\r\nimport { TraitBelief } from \"./Beliefs\";\r\nimport { IDate } from \"./Time\";\r\n\r\n\r\nexport interface IPlayerData{\r\n    scanned_bean: {[beanKey: number]: boolean};\r\n    abductedBeanKeys: number[];\r\n    seenBeliefs: {[key: string]: boolean};\r\n    speechcrimes: {[year: number]: number};\r\n    next_grade: IDate;\r\n    pastReportCards: IReportCard[];\r\n    energy: IResource;\r\n    bots: IResource;\r\n    hedons: IResource;\r\n    workingReportCard: IReportCard;\r\n    techProgress: TechProgress;\r\n    currentlyResearchingTech: Tech|undefined;\r\n    difficulty: IDifficulty;\r\n    beliefInventory: BeliefInventory[];\r\n    goalProgress: {[key: string]: IGoalProgress};\r\n    goals: GoalKey[]\r\n}\r\n\r\nexport interface IResource{\r\n    amount: number;\r\n    income: number;\r\n}\r\n\r\nexport type GoalKey = 'found_utopia'|'build_house_n_farm'|'beam_3'|'scan'|'set_policy'|'brainwash'|'c+_grade';\r\nexport interface IGoal{\r\n    key: GoalKey;\r\n    text: string;\r\n    tooltip?: string;\r\n    reward?: PlayerResources,\r\n    check: (world: IWorldState) => boolean\r\n}\r\nexport interface IGoalProgress {\r\n    done: boolean,\r\n    step: number\r\n}\r\nexport interface IProgressable{\r\n    goalProgress: {[key: string]: IGoalProgress},\r\n    goals: Array<GoalKey>\r\n}\r\nexport const Goals: {[key in GoalKey]: IGoal} = {\r\n    found_utopia: {\r\n        key: 'found_utopia', text: 'Found your Utopia',\r\n       check: (world) => world.buildings.allIDs.length > 0\r\n    },\r\n    build_house_n_farm: {\r\n        key: 'build_house_n_farm', text: 'Build a house and farm',\r\n        check: (world) => {\r\n            return world.buildings.allIDs.find(k => world.buildings.byID[k].type == 'farm') != null &&\r\n            world.buildings.allIDs.find(k => world.buildings.byID[k].type == 'house') != null;\r\n        },\r\n        reward: {\r\n            energy: 3, bots: 3\r\n        }\r\n    }, \r\n    beam_3: {\r\n        key: 'beam_3', text: 'Beam in 3 new beings', \r\n        check: (world) => {\r\n            return world.beans.allIDs.filter(k => !world.beans.byID[k].bornInPetri).length >= (3 + Number_Starting_City_Pop)\r\n        }\r\n    }, \r\n    scan: {\r\n        key: 'scan', text: 'Scan a Subject',\r\n        check: (world) => Object.keys(world.alien.scanned_bean).length > 0\r\n    }, \r\n    set_policy: {\r\n        key: 'set_policy', text: 'Set a Gov Policy',\r\n        check: (world) => false\r\n    }, \r\n    brainwash: {\r\n        key: 'brainwash', text: 'Brainwash a Subject',\r\n        check: (world) => false\r\n    }, \r\n    'c+_grade': {\r\n        key: 'c+_grade', text: 'Receive a C+ Grade',\r\n        check: (world) => false\r\n    } \r\n};\r\n\r\nexport type Grade = 'F'|'D'|'C'|'B'|'A';\r\nexport type RubricKeys = 'Happiness'|'Prosperity'|'Stability'|'Dogma';\r\nexport type IReportCard = {[key in RubricKeys]: Grade}\r\nexport type GradingFunc = (world: IWorldState) => IReportCard;\r\nexport interface ICurriculum {\r\n    GradeWorld: GradingFunc,\r\n    RubricDescription: {[key in RubricKeys]: string} \r\n}\r\nexport const Curriculums: {[difficulty: string]: ICurriculum} = {\r\n    Default: {\r\n        GradeWorld: (world: IWorldState) => {return{\r\n            Happiness: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.lastHappiness >- .2),\r\n            Prosperity: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.food !== 'hungry'),\r\n            Stability: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.sanity === 'sane'),\r\n            Dogma: GradeUpToNumber((world.alien.speechcrimes[world.date.year] || 0), 10, 10),\r\n        }},\r\n        RubricDescription: {\r\n            Happiness: 'Subjects are at least 20% happy',\r\n            Prosperity: 'Subjects are not hungry',\r\n            Stability: 'Subjects are all sane',\r\n            Dogma: 'Up to 10 Speechcrimes'\r\n        }\r\n    }\r\n}\r\n/**\r\n * \r\n * @param number number of bad events\r\n * @param allowance number of allowed events\r\n * @param maximum range of \"overflow\" events\r\n */\r\nfunction GradeUpToNumber(number: number, allowance: number, maximum: number): Grade{\r\n    const normalized = 1 - Math.min(1, Math.max(0, number - allowance) / maximum);\r\n    return NormalizedScoreToGrade(normalized);\r\n}\r\nfunction BooleanAverageGrader<T>(array: T[], grade: (o: T) => boolean): Grade{\r\n    if (array.length < 1) return 'F';\r\n    return NormalizedScoreToGrade(array.filter(grade).length / array.length);\r\n}\r\nfunction NormalizedScoreToGrade(normNumber: number): Grade{\r\n    if (normNumber < .58) return 'F';\r\n    if (normNumber < .68) return 'D';\r\n    if (normNumber < .78) return 'C';\r\n    if (normNumber < .88) return 'B';\r\n    return 'A';\r\n}\r\nconst GradeWeights: {[key in Grade]: number} ={\r\n    A: 5,\r\n    B: 4,\r\n    C: 3,\r\n    D: 2,\r\n    F: 1\r\n}\r\nexport function GetAverage(reportCard: IReportCard): Grade{\r\n    return NormalizedScoreToGrade((GradeWeights[reportCard.Happiness] + \r\n        GradeWeights[reportCard.Prosperity] + \r\n        GradeWeights[reportCard.Stability] +\r\n        GradeWeights[reportCard.Dogma] \r\n    ) / 20);\r\n}\r\n\r\nexport type Tech = 'sanity_bonus'|'fast_resources'|'trauma_nanobots'|'neural_duplicator';\r\nexport interface ITechInfo{\r\n    tech: Tech,\r\n    /**\r\n     * number of tech points required to complete research\r\n     */\r\n    techPoints: number,\r\n    name: string,\r\n    description: string\r\n}\r\nexport const TechData: {[key in Tech]: ITechInfo} = {\r\n    'sanity_bonus': {\r\n        tech: 'sanity_bonus',\r\n        name: 'Surgical Psychops',\r\n        techPoints: 30,\r\n        description: 'Brainwashing causes -1 🧠 Sanity damage'\r\n    },\r\n    'fast_resources': {\r\n        tech: 'fast_resources',\r\n        name: '0 Dimensional Supersiphons',\r\n        techPoints: 30,\r\n        description: 'Faster ⚡️ and 🤖 accumulation'\r\n    },\r\n    'trauma_nanobots': {\r\n        tech: 'trauma_nanobots',\r\n        name: 'Trauma Nanobots',\r\n        techPoints: 30,\r\n        description: 'Spend 🤖 to stop Subject from dying'\r\n    },\r\n    'neural_duplicator': {\r\n        tech: 'neural_duplicator',\r\n        name: 'Level 2 Neural Duplication',\r\n        techPoints: 30,\r\n        description: 'Copy 🧠 Traits 1 additional time'\r\n    }\r\n}\r\nexport interface IPlayerTechProgress{\r\n    /**\r\n     * number of research points\r\n     */\r\n    researchPoints: number\r\n}\r\nexport type TechProgress = {[key: string]: IPlayerTechProgress};\r\nexport interface BeliefInventory{\r\n    trait: TraitBelief,\r\n    charges: number\r\n}\r\n\r\nexport function PlayerReward(player: IPlayerData, reward: PlayerResources){\r\n    if (reward.bots){\r\n        player.bots.amount += reward.bots;\r\n        SignalStoreInstance.alienBots.publish({change: reward.bots});\r\n    }\r\n    if (reward.energy){\r\n        player.energy.amount += reward.energy;\r\n        SignalStoreInstance.alienEnergy.publish({change: reward.energy});\r\n    }\r\n    if (reward.hedons){\r\n        player.hedons.amount += reward.hedons;\r\n        SignalStoreInstance.alienHedons.publish({change: reward.hedons});\r\n    }\r\n}\r\n\r\nexport function CheckGoals(world: IWorldState, player: IPlayerData){\r\n    for (let i = 0; i < player.goals.length; i++) {\r\n        const goal = player.goals[i];\r\n        if (player.goalProgress[goal] == null){\r\n            player.goalProgress[goal] = {done: false, step: 0};\r\n        }\r\n        if (!player.goalProgress[goal].done) {\r\n            const done = Goals[goal].check(world);\r\n            const reward = Goals[goal].reward;\r\n            player.goalProgress[goal].done = done;\r\n            if (done && reward != null){\r\n                PlayerReward(player, reward);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function CheckReportCard(world: IWorldState, player: IPlayerData) {\r\n    player.workingReportCard = Curriculums.Default.GradeWorld(world);\r\n}\r\nexport function HasResearched(techProgress: TechProgress, tech: Tech){\r\n    return techProgress[tech] != null && techProgress[tech].researchPoints >= TechData[tech].techPoints\r\n}\r\nexport function PlayerCanAfford(player: IPlayerData, cost: PlayerResources, qty: number = 1): boolean{\r\n    return (cost.bots === undefined || player.bots.amount >= cost.bots * qty) &&\r\n    (cost.energy === undefined || player.energy.amount >= cost.energy * qty) && \r\n    (cost.hedons === undefined || player.hedons.amount >= cost.hedons * qty);\r\n}\r\nexport function PlayerUseCharge(alien: IPlayerData, t: TraitBelief){\r\n    const all = alien.beliefInventory;\r\n    const existing = all.find(x => x.trait === t);\r\n    if (existing){\r\n        existing.charges -= 1;\r\n        alien.beliefInventory = [...all.filter(x => x.charges > 0)];\r\n    }\r\n}\r\nexport function PlayerTryPurchase(player: IPlayerData, cost: PlayerResources, qty: number = 1): boolean{\r\n    if (PlayerCanAfford(player, cost, qty)){\r\n        PlayerPurchase(player, cost, qty);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function PlayerPurchase(player: IPlayerData, cost: PlayerResources, qty: number = 1): void{\r\n    if (cost.bots){\r\n        player.bots.amount -= cost.bots * qty;\r\n        SignalStoreInstance.alienBots.publish({change: -cost.bots * qty});\r\n    }\r\n    if (cost.energy){\r\n        player.energy.amount -= cost.energy * qty;\r\n        SignalStoreInstance.alienEnergy.publish({change: -cost.energy * qty});\r\n    }\r\n    if (cost.hedons){\r\n        player.hedons.amount -= cost.hedons * qty;\r\n        SignalStoreInstance.alienHedons.publish({change: -cost.hedons * qty});\r\n    }\r\n}","import { AgentDurationStore } from \"./AgentDuration\";\r\n\r\nexport const AgentDurationStoreInstance = new AgentDurationStore();","\r\nexport type AgentDurationType = 'bean'|'ufo';\r\nexport interface IAgentDuration {elapsed: number, duration: number};\r\ntype AgentDurationCache = {\r\n    [key in AgentDurationType]: {\r\n        [k2: number]: {elapsed: number, duration: number};\r\n    };\r\n};\r\n\r\nexport class AgentDurationStore{\r\n    private cache: AgentDurationCache = {\r\n        'bean': {},\r\n        'ufo': {}\r\n    }\r\n    public Get(type: AgentDurationType, key: number): IAgentDuration{\r\n        if (!this.cache[type][key])\r\n            this.cache[type][key] = {elapsed: 0, duration: 0};\r\n        return this.cache[type][key];\r\n    }\r\n}","import { IWorldState } from \"../state/features/world\";\r\nimport { TraitJob } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { BuildingToJob, IBuilding, JobToBuilding } from \"./Geography\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\nimport { BuildingOpenSlots } from \"./RealEstate\";\r\nimport { shuffle } from \"./Utils\";\r\n\r\nexport function BeanTryFindJob(world: IWorldState, bean: IBean): boolean{\r\n    const city = world.cities.byID[bean.cityKey];\r\n\r\n    const openSlotBuildings = shuffle(city.buildingKeys.map(\r\n        x => world.buildings.byID[x]\r\n        ).filter(\r\n        x => {\r\n            const canHire = ['farm', 'house', 'theater', 'hospital'].includes(x.type);\r\n            const isHiring = BuildingOpenSlots(x).length > 0;\r\n            return canHire && isHiring;\r\n        }));\r\n    \r\n    \r\n    for (let i = 0; i < openSlotBuildings.length; i++) {\r\n        const building = openSlotBuildings[i];\r\n        const slots = BuildingOpenSlots(building);\r\n        if (slots.length > 0){\r\n            BeanSetJob(bean, building, world.enterprises.byID[building.key]);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function BeanTrySetJob(world: IWorldState, bean: IBean, job: TraitJob): boolean{\r\n    if (job === 'jobless') \r\n        return false;\r\n    const city = world.cities.byID[bean.cityKey];\r\n\r\n    const allOfType = city.buildingKeys.map(x => world.buildings.byID[x]).filter((x) => x.type === JobToBuilding[job]);\r\n    \r\n    for (let i = 0; i < allOfType.length; i++) {\r\n        const building = allOfType[i];\r\n        const slots = BuildingOpenSlots(building);\r\n        if (slots.length > 0){\r\n            BeanSetJob(bean, building, world.enterprises.byID[building.key]);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function BeanSetJob(bean: IBean, building: IBuilding, enterprise: IEnterprise){\r\n    building.jobs.push(bean.key);\r\n    bean.employerEnterpriseKey = building.key;\r\n    if (enterprise && enterprise.ownerBeanKey == null){\r\n        enterprise.ownerBeanKey = bean.key;\r\n    }\r\n    bean.job = BuildingToJob[building.type];\r\n}","import { HexPoint, Point } from \"../simulation/Geography\";\r\n\r\nexport interface IEntitySlice<T extends {key: number}> {\r\n    byID: { [key: number]: T },\r\n    allIDs: number[],\r\n    hxPosition: { [key: number]: HexPoint },\r\n    nextID: number\r\n}\r\n\r\nexport function CreateEmptyEntitySlice<T extends {key: number}>(): IEntitySlice<T>{\r\n    return {\r\n        byID: {},\r\n        allIDs: [],\r\n        hxPosition: {},\r\n        nextID: 0\r\n    }\r\n}\r\nexport function CreateEntitySlice<T extends {key: number}>(all: T[]): IEntitySlice<T>{\r\n    return {\r\n        byID: all.reduce((map, entity) => { map[entity.key] = entity; return map; }, {} as {[key: number]: T}),\r\n        allIDs: all.map(x => x.key),\r\n        hxPosition: {},\r\n        nextID: all.reduce((max, entity) => Math.max(entity.key+1, max), 0)\r\n    }\r\n}\r\nexport function EntityAddToSlice<T extends {key: number}>(slice: IEntitySlice<T>, newEntity: T){\r\n    const k = slice.nextID++;\r\n    newEntity.key = k;\r\n    slice.allIDs.push(k);\r\n    slice.byID[k] = newEntity;\r\n}","export type SFXFile = 'drop.mp3'|'ding_soft.mp3'|'ding_bad.wav'|'death_bell.wav'|'scan.mp3'|'squish_pop.mp3'|'squish_suck.mp3'|'baby_squeak.wav'|'mhmm.mp3';\r\nexport type SFX = 'drop'|'happiness'|'unhappiness'|'love'|'hate'|'death'|'scan'|'wash_in'|'wash_out'|'squeak'|'mhmm';\r\n\r\nconst SFXToFile: {[sfx in SFX]: SFXFile} = {\r\n    drop: \"drop.mp3\",\r\n    love: \"ding_soft.mp3\",\r\n    happiness: \"ding_soft.mp3\",\r\n    unhappiness: \"ding_bad.wav\",\r\n    hate: \"ding_bad.wav\",\r\n    death: \"death_bell.wav\",\r\n    scan: 'scan.mp3',\r\n    wash_in: 'squish_pop.mp3',\r\n    wash_out: 'squish_suck.mp3',\r\n    squeak: 'baby_squeak.wav',\r\n    mhmm: 'mhmm.mp3',\r\n};\r\n\r\ntype SFXMap = {[sfx in SFX]: SoundBuffer};\r\n\r\nclass SoundBuffer{\r\n    constructor(private file: SFXFile, private volume: number = 1){}\r\n\r\n    private buffer: HTMLAudioElement[] = [];\r\n    play(){\r\n        if (this.buffer.length > 0 && this.buffer[0].ended){\r\n            const audio = this.buffer.shift();\r\n            audio?.play();\r\n            if (audio)\r\n                this.buffer.push(audio);\r\n        } else {\r\n            const aud = new Audio(process.env.PUBLIC_URL+'/'+this.file);\r\n            aud.volume = this.volume;\r\n            aud.play();\r\n            this.buffer.push(aud);\r\n        }\r\n    }\r\n}\r\nexport class WorldSound{\r\n    private lib: SFXMap = {\r\n        'drop': new SoundBuffer(SFXToFile['drop'], 0.2),\r\n        'love': new SoundBuffer(SFXToFile['happiness']),\r\n        'happiness': new SoundBuffer(SFXToFile['happiness']),\r\n        'unhappiness': new SoundBuffer(SFXToFile['unhappiness']),\r\n        'hate': new SoundBuffer(SFXToFile['unhappiness']),\r\n        'death': new SoundBuffer(SFXToFile['death']),\r\n        'scan': new SoundBuffer(SFXToFile['scan'], 0.3),\r\n        'wash_in': new SoundBuffer(SFXToFile['wash_in']),\r\n        'wash_out': new SoundBuffer(SFXToFile['wash_out']),\r\n        'squeak': new SoundBuffer(SFXToFile['squeak'], 0.3),\r\n        'mhmm': new SoundBuffer(SFXToFile['mhmm'], 0.5),\r\n    }\r\n\r\n    public play(sfx: SFX){\r\n        this.lib[sfx].play();\r\n    }\r\n}\r\n\r\nexport const WorldSfxInstance = new WorldSound();","\r\nimport React from \"react\";\r\nimport { City, ICity } from \"../simulation/City\";\r\nimport { IBuilding, BuildingIcon, hex_directions, transformPoint, hex_to_pixel, origin_point, HexPoint, BuildingJobIcon, UpgradedBuildingIcon } from \"../simulation/Geography\";\r\nimport { BuildingJobSlot } from \"../simulation/Occupation\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport './Building.css';\r\n\r\nconst slot_size = {\r\n    x: 25,\r\n    y: 25\r\n}\r\nexport function getSlotOffset(direction: HexPoint){\r\n    return hex_to_pixel(slot_size, origin_point, direction);\r\n}\r\nexport function getRandomSlotOffset(){\r\n    return getSlotOffset(GetRandom(hex_directions));\r\n}\r\nfunction hexToTransform(direction: HexPoint){\r\n    return transformPoint(getSlotOffset(direction))\r\n}\r\nconst hexDirectionToJobSlot: {[key: number]: number} = {\r\n    2: 0,\r\n    0: 1,\r\n    4: 2,\r\n    1: 3,\r\n    5: 4,\r\n    3: 5,\r\n}\r\n\r\nexport const PetriBuilding: React.FC<{\r\n    city: ICity,\r\n    building: IBuilding\r\n}> = (props) => {\r\n    // const buildingHex = props.building.address;\r\n    // const p = hex_to_pixel(props.city.hex_size, props.city.petriOrigin, buildingHex);\r\n    const sty = {}; //transformPoint(p);\r\n    return <UIBuilding building={props.building} style={sty} cityName={props.city.name} getStyle={hexToTransform}></UIBuilding>;\r\n}\r\n\r\nexport const UIBuilding: React.FC<{\r\n    building: IBuilding,\r\n    cityName: string,\r\n    style: React.CSSProperties,\r\n    getStyle: (h: HexPoint) => React.CSSProperties\r\n}> = (props) => {\r\n    \r\n    return <div key={props.building.type+props.building.key} style={props.style} \r\n    className={\"building \"+props.building.type}>\r\n    {props.building.upgraded ? UpgradedBuildingIcon[props.building.type] : BuildingIcon[props.building.type]}\r\n    <UIBuildingSlots building={props.building} getStyle={props.getStyle}></UIBuildingSlots>\r\n    {props.building.type === 'courthouse' ? <span className=\"tile-label\">{props.cityName}</span> : null}\r\n    </div>\r\n}\r\nexport const UIBuildingSlots: React.FC<{\r\n    building: IBuilding,\r\n    getStyle: (h: HexPoint) => React.CSSProperties\r\n}> = (props) => {\r\n    return <>{hex_directions.map((d, i: number) => {\r\n        const jobSlot: BuildingJobSlot = hexDirectionToJobSlot[i];\r\n        const hasJob = props.building.jobs[jobSlot] != null;\r\n        return <span key={i} className=\"slot\" style={props.getStyle(d)}>\r\n            {hasJob ? BuildingJobIcon[props.building.type] : null}\r\n        </span>\r\n    })}</>\r\n}","export class PriorityNode<T>{\r\n    constructor(public value: T, public priority: number){}\r\n}\r\nexport interface IPriorityQueue<T>{\r\n    enqueue(value: PriorityNode<T>): void;\r\n    values: PriorityNode<T>[];\r\n    dequeue(): PriorityNode<T>|undefined;\r\n}\r\nexport class DumbPriorityQueue<T> implements IPriorityQueue<T>{\r\n    \r\n    public values: PriorityNode<T>[] = [];\r\n\r\n    constructor(_values: PriorityNode<T>[]){this.values = _values;}\r\n    \r\n    enqueue(value: PriorityNode<T>): void{\r\n        this.values.push(value);\r\n        this.values = this.values.sort((a, b) => a.priority - b.priority);\r\n    }\r\n\r\n    enqueueMany(values: PriorityNode<T>[]){\r\n        this.values = values;\r\n        this.values = this.values.sort((a, b) => a.priority - b.priority);\r\n    }\r\n    \r\n    dequeue(): PriorityNode<T>|undefined{\r\n        return this.values.shift();\r\n    }\r\n}\r\n\r\nexport class PriorityQueue<T> implements IPriorityQueue<T>{\r\n    public values: PriorityNode<T>[] = [];\r\n\r\n    constructor(_values: PriorityNode<T>[]){this.values = _values;}\r\n\r\n    //helper method that swaps the values and two indexes of an array\r\n    swap(index1: number, index2: number){\r\n        let temp = this.values[index1];\r\n        this.values[index1] = this.values[index2];\r\n        this.values[index2] = temp;\r\n        return this.values;\r\n    }\r\n    //helper methods that bubbles up values from end\r\n    bubbleUp(){\r\n        //get index of inserted element\r\n        let index = this.values.length - 1\r\n        //loop while index is not 0 or element no loger needs to bubble\r\n        while(index > 0){\r\n            //get parent index via formula\r\n            let parentIndex = Math.floor((index - 1)/2);\r\n            //if values is greater than parent, swap the two\r\n            if(this.values[parentIndex].priority > this.values[index].priority){\r\n                //swap with helper method\r\n                this.swap(index, parentIndex);\r\n                //change current index to parent index\r\n                index = parentIndex;\r\n            } else{\r\n                break;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    // method that pushes new value onto the end and calls the bubble helper\r\n    enqueue(value: PriorityNode<T>){\r\n        this.values.push(value)\r\n        //calculate parent, if parent is greater swap\r\n        //while loop or recurse\r\n        this.bubbleUp();\r\n        return this.values\r\n    }\r\n\r\n    bubbleDown(){\r\n        let parentIndex = 0;\r\n        const length = this.values.length;\r\n        const elementPriority = this.values[0].priority;\r\n        //loop breaks if no swaps are needed\r\n        while (true){\r\n            //get indexes of child elements by following formula\r\n            const leftChildIndex = (2 * parentIndex) + 1;\r\n            const rightChildIndex = (2 * parentIndex) + 2;\r\n            let leftChildPriority = 999;\r\n            let rightChildPriority;\r\n            let indexToSwap = null;\r\n            // if left child exists, and is greater than the element, plan to swap with the left child index\r\n            if(leftChildIndex < length){\r\n                leftChildPriority = this.values[leftChildIndex].priority\r\n                if(leftChildPriority < elementPriority){\r\n                    indexToSwap = leftChildIndex;\r\n                }\r\n            }\r\n            //if right child exists\r\n            if(rightChildIndex < length){\r\n                rightChildPriority = this.values[rightChildIndex].priority;\r\n\r\n                if(\r\n                    //if right child is greater than element and there are no plans to swap\r\n                    (rightChildPriority < elementPriority && indexToSwap === null) ||\r\n                    //OR if right child is greater than left child and there ARE plans to swap\r\n                    (rightChildPriority < leftChildPriority && indexToSwap !== null))\r\n                {\r\n                    //plan to swap with the right child\r\n                    indexToSwap = rightChildIndex\r\n                }\r\n            }\r\n            //if there are no plans to swap, break out of the loop\r\n            if(indexToSwap === null){\r\n                break;\r\n            } \r\n            //swap with planned element\r\n            this.swap(parentIndex, indexToSwap);\r\n            //starting index is now index that we swapped with\r\n            parentIndex = indexToSwap;\r\n        }  \r\n    }\r\n\r\n    dequeue(): PriorityNode<T>|undefined{\r\n        //swap first and last element\r\n        this.swap(0, this.values.length - 1);\r\n        //pop max value off of values\r\n        let poppedNode = this.values.pop();\r\n        //re-adjust heap if length is greater than 1\r\n        if(this.values.length > 1){\r\n            this.bubbleDown();\r\n        }\r\n        \r\n        return poppedNode;\r\n    }\r\n}","import { AnyAction } from \"@reduxjs/toolkit\";\r\nimport { IDifficulty } from \"../Game\";\r\nimport { MoverStoreInstance as MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { getRandomSlotOffset } from \"../petri-ui/Building\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { beanBePersuaded, beanBuy, beanCrime, beanEmote, beanHitDestination, beanRelax, beanWork, changeState } from \"../state/features/world.reducer\";\r\nimport { BeanPhysics, GoodIcon, JobToGood, TraitCommunity, TraitEmote, TraitEthno, TraitFaith, TraitFood, TraitGood, TraitHealth, TraitIdeals, TraitJob, TraitSanity, TraitStamina } from \"../World\";\r\nimport { Bean, BeanBelievesIn, BeanEmote, BeanGetRandomChat, BeanMaybeChat, BeanMaybeCrime, BeanMaybeParanoid, BeanMaybePersuaded, BeanMaybeScarcity } from \"./Bean\";\r\nimport { HedonExtremes, HedonReport, HedonSourceToVal, TraitBelief } from \"./Beliefs\";\r\nimport { CityGetNearestNeighbors, CityGetRandomBuildingOfType, CityGetRandomEntertainmentBuilding, ICity } from \"./City\";\r\nimport { EconomyCanBuy, IMarketReceipt, ISeller } from \"./Economy\";\r\nimport { accelerate_towards, BuildingTypes, Geography, GoodToBuilding, hex_linedraw, hex_to_pixel, IAccelerator, IBuilding, JobToBuilding, OriginAccelerator, pixel_to_hex, Point } from \"./Geography\";\r\nimport { DumbPriorityQueue, IPriorityQueue, PriorityNode } from \"./Priorities\";\r\nimport { IDate } from \"./Time\";\r\n\r\nexport type Act = 'travel'|'work'|'sleep'|'chat'|'soapbox'|'craze'|'idle'|'buy'|'crime'|'relax';\r\n\r\n/**\r\n * cruise == interruptible travel towards destination\r\n * \r\n * approach == uninterruptible travel into destination slot\r\n */\r\nexport type Travel = 'cruise'|'approach';\r\n\r\nexport interface IActListener{\r\n    onChat: (b: Bean, speech: IChatData) => void;\r\n    onEmote: (b: Bean, emote: TraitEmote) => void;\r\n}\r\n\r\nexport interface IActivityData {\r\n    act: Act;\r\n    elapsed?: number;\r\n    // location?: Point, //FROM Point\r\n    destinations?: Point[]; //point to travel to??\r\n    destinationIndex?: number; //which point are we heading towards\r\n    intent?: IActivityData; //when travelling, what do you intend to do next\r\n    good?: TraitGood; //good to buy or work\r\n    crimeGood?: 'food'|'medicine';\r\n    // travel?: Travel;\r\n    chat?: IChatData;\r\n    buyAttempts?: number;\r\n    buyReceipt?: IMarketReceipt\r\n}\r\n\r\nexport interface IChatData{\r\n    participation: 'speaker'|'listener';\r\n    type: 'praise'|'bully'|'preach'|'gift';\r\n    preachBelief?: TraitBelief;\r\n    /**\r\n     * strength of the preacher's persuasion\r\n     */\r\n    persuasionStrength?: number;\r\n    /**\r\n     * target key of the bean who is targeted for praise or bully\r\n     */\r\n    targetBeanKey?: number;\r\n}\r\n\r\nexport interface IBeanAgent{\r\n    key: number;\r\n    action: Act;\r\n    actionData: IActivityData;\r\n}\r\nexport interface StateFunctions {\r\n    enter: (agent: IBean) => AnyAction|undefined;\r\n    act: (agent: IBean, world: IWorldState, elapsed: number, deltaMS: number) => {action?: AnyAction|AnyAction[], newActivity?: IActivityData};\r\n    exit: (agent: IBean) => AnyAction|undefined;\r\n}\r\nconst RelaxationDurationMS = 1000;\r\nconst CrimeDurationMS = 1500;\r\nconst TransactMaximumDurationMS = 1100;\r\nconst ChatDurationMS = 1000;\r\nconst WorkDurationMS = 3000;\r\nconst SleepDurationMS = 3000;\r\n\r\nexport const BeanActions: {[act in Act]: StateFunctions} = {\r\n    'travel': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number, deltaMS: number) => {\r\n            const city = world.cities.byID[agent.cityKey];\r\n            const destinationTargetIndex = agent.actionData.destinationIndex || 0;\r\n            if (agent.actionData.destinations == null || \r\n                agent.actionData.destinations.length === 0 || \r\n                destinationTargetIndex >= agent.actionData.destinations.length){\r\n                if (agent.actionData.intent)\r\n                    return {\r\n                        newActivity: agent.actionData.intent\r\n                    }\r\n                else\r\n                    return {\r\n                        newActivity: {\r\n                            act: 'idle'\r\n                        }\r\n                    }\r\n            }\r\n            const target = agent.actionData.destinations[destinationTargetIndex];\r\n\r\n            if (isNaN(target.x) || isNaN(target.y)) {\r\n                //sanity check\r\n                console.warn('NaN destination, resetting to idle')\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                };\r\n            }\r\n            const newAccelerator = {\r\n                ...(MoverStoreInstance.Get('bean', agent.key).current || OriginAccelerator)\r\n            };\r\n\r\n            const collide = accelerate_towards(\r\n                newAccelerator,\r\n                target,\r\n                BeanPhysics.AccelerateS * deltaMS/1000, \r\n                BeanPhysics.MaxSpeed, \r\n                BeanPhysics.CollisionDistance,\r\n                BeanPhysics.Brake);\r\n\r\n            MoverStoreInstance.Get('bean', agent.key).publish(newAccelerator);\r\n            \r\n            if (collide){\r\n                return {\r\n                    action: beanHitDestination({beanKey: agent.key})\r\n                };\r\n            }\r\n            \r\n            if (city) {\r\n                const nearbyBeanKeys = CityGetNearestNeighbors(city, agent);\r\n                if (nearbyBeanKeys.length && BeanMaybeChat(agent)){\r\n                    const targets = nearbyBeanKeys.filter((bKey) => BeanMaybeChat(world.beans.byID[bKey]));\r\n                    if (targets.length < 1)\r\n                        return {};\r\n                    const chat: IChatData = BeanGetRandomChat(agent, () => {\r\n                        return targets.map(\r\n                                x => world.beans.byID[x]\r\n                            ).filter(\r\n                                x => x.cash <= agent.cash-1\r\n                            ).reduce(\r\n                                (least: IBean|undefined, bean) => {\r\n                                    if (least == null || (bean.cash < least.cash))\r\n                                        return bean;\r\n                                    return least;\r\n                        }, undefined);\r\n                    });\r\n                    return {\r\n                        newActivity: {\r\n                            act: 'chat',\r\n                            chat: chat,\r\n                            intent: agent.actionData \r\n                        },\r\n                        action: targets.map(t => changeState({beanKey: t, newState: {\r\n                            act: 'chat',\r\n                            chat: {\r\n                                ...chat,\r\n                                participation: 'listener'\r\n                            },\r\n                            intent: world.beans.byID[t].actionData\r\n                        }}))\r\n                    };\r\n                } else if (BeanBelievesIn(agent, 'Wanderlust') && Math.random() < WanderlustEmoteChance) {\r\n                    return {\r\n                        action: beanEmote({beanKey: agent.key, emote: 'happiness', source: 'Wanderlust'})\r\n                    };\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n            // if (agent instanceof Bean){\r\n            //     agent.velocity = {x: 0, y: 0};\r\n            // }\r\n        },\r\n    }, \r\n    'work': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (elapsed > WorkDurationMS && agent.actionData.good){\r\n                return {\r\n                    action: beanWork({beanKey: agent.key}),\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'sleep':{\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world, elapsed) => {\r\n            if (elapsed > SleepDurationMS){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'chat': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, state, elapsed: number) => {\r\n            if (elapsed > ChatDurationMS && agent.actionData.intent){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'travel',\r\n                        intent: agent.actionData.intent\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            if (agent.actionData.chat){\r\n                if (agent.actionData.chat.participation === 'listener'){\r\n                    switch(agent.actionData.chat.type){\r\n                        case 'bully':\r\n                            return beanEmote({beanKey: agent.key, emote: 'unhappiness', source: 'Antagonism'});\r\n                        case 'praise':\r\n                            return beanEmote({beanKey: agent.key, emote: 'happiness', source: 'Enthusiasm'});\r\n                        case 'preach':\r\n                            if (agent.actionData.chat.preachBelief && \r\n                                agent.actionData.chat.persuasionStrength && \r\n                                BeanMaybePersuaded(agent, agent.actionData.chat.preachBelief, agent.actionData.chat.persuasionStrength)){\r\n                                return beanBePersuaded({beanKey: agent.key, belief: agent.actionData.chat.preachBelief})\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        },\r\n    }, \r\n    'soapbox': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean) => {\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'craze': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean) => {\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'idle': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (elapsed < 200)\r\n                return {};\r\n            \r\n            const priorities = GetPriorities(agent, world.cities.byID[agent.cityKey], world.alien.difficulty);\r\n            let top = priorities.dequeue();\r\n            let travelState: IActivityData|undefined = undefined;\r\n            let sideEffect: AnyAction|undefined = undefined;\r\n\r\n            //loop through possible destinations\r\n            while (top && travelState == null){\r\n                const substitute = SubstituteIntent(agent, world, top.value);\r\n                if (substitute?.intent){\r\n                    travelState = CreateTravelFromIntent(agent, world.cities.byID[agent.cityKey], substitute.intent, world);\r\n                    if (travelState != null)\r\n                        return {\r\n                            newActivity: travelState,\r\n                            action: sideEffect\r\n                        };\r\n                } else if (substitute?.sideEffect){\r\n                    sideEffect = substitute.sideEffect;\r\n                }\r\n                top = priorities.dequeue();\r\n            }\r\n            return {\r\n                action: sideEffect\r\n            };\r\n        },\r\n        exit: (agent: IBean) => {\r\n            if (BeanMaybeParanoid(agent))\r\n                return beanEmote({beanKey: agent.key, emote: 'unhappiness', source:'Paranoia'});\r\n        },\r\n    }, \r\n    'buy': {\r\n        // static MaximumBuyDuration = 1100;\r\n        // private sinceLastAttemptMS: number = 0;\r\n        // tryBuy(agent: IAgent){\r\n        //     if (agent instanceof Bean && agent.actionData.good && agent.city?.economy)\r\n        //     {\r\n        //         this._bought = agent.buy[agent.actionData.good](agent.city.economy);\r\n        //     }\r\n        //     this.sinceLastAttemptMS = 0;\r\n        // }\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (agent.actionData.buyReceipt){\r\n                return {\r\n                    newActivity: {\r\n                        act: agent.actionData.good === 'shelter' ? 'sleep' : 'idle'\r\n                    }\r\n                }\r\n            }\r\n            if (elapsed > TransactMaximumDurationMS){\r\n                return {\r\n                    newActivity: {act:'idle'}\r\n                }\r\n            }\r\n            if ((agent.actionData.buyAttempts || 0) >= 3){\r\n                return {\r\n                    newActivity: {act:'idle'}\r\n                }\r\n            }\r\n            if (elapsed > 250 && agent.actionData.good){\r\n                return {\r\n                    action: beanBuy({beanKey: agent.key, good: agent.actionData.good})\r\n                };\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'crime': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed) => {\r\n            if (elapsed > CrimeDurationMS){\r\n                return {\r\n                    newActivity: {act: 'idle'},\r\n                    action: beanCrime({beanKey: agent.key, good: agent.actionData.crimeGood || 'food'})\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'relax': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            let durationMS = RelaxationDurationMS;\r\n            if (BeanBelievesIn(agent, 'Naturalism'))\r\n                durationMS *= 3;\r\n            if (elapsed > durationMS){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return beanRelax({beanKey: agent.key});\r\n        },\r\n    }\r\n}\r\n\r\nfunction SubstituteIntent(bean: IBean, world: IWorldState, intent: IActivityData): {\r\n    intent?: IActivityData,\r\n    sideEffect?: AnyAction\r\n}|undefined{\r\n    if (intent.act === 'buy' && intent.good != null){\r\n        const desiredGoodState = EconomyCanBuy(world.economy, world.law, bean, intent.good);\r\n        if (desiredGoodState != 'yes' && intent.good === 'fun') //if you can't buy happiness, go somewhere to relax\r\n            intent.act = 'relax'; //relaxing is free!\r\n        else if (desiredGoodState === 'pricedout') {\r\n            if ((intent.good == 'food' || intent.good == 'medicine') && BeanMaybeCrime(bean, intent.good)){\r\n                intent.act = 'crime';\r\n                intent.crimeGood = intent.good;\r\n            } else {\r\n                const isPhysical = intent.good === 'food' || intent.good === 'medicine' || intent.good === 'shelter';\r\n                if (isPhysical){\r\n                    return {\r\n                        sideEffect: beanEmote({beanKey: bean.key, emote: 'unhappiness', source: 'Poverty'})\r\n                    }\r\n                }\r\n                return undefined; //don't travel to buy something that you can't afford\r\n            }\r\n        } else if (desiredGoodState === 'nosupply'){\r\n            if (intent.good && BeanMaybeScarcity(bean, intent.good)){\r\n                return {\r\n                    sideEffect: beanEmote({beanKey: bean.key, emote: 'unhappiness', source:'Scarcity'}) \r\n                }\r\n            }\r\n            return undefined; //don't travel to buy something that doesn't exist\r\n        }\r\n        intent.buyAttempts = 0;\r\n    }\r\n    return {\r\n        intent: intent\r\n    };\r\n}\r\n\r\nexport function IntentToDestination(agent: IBean, city: ICity, intent: IActivityData, world: IWorldState): Point[]|null{\r\n    switch(intent.act){\r\n        case 'buy':\r\n            if (intent.good)\r\n                return RouteRandom(city, world, agent, GoodToBuilding[intent.good]);\r\n        case 'work':\r\n            return RouteRandom(city, world, agent, JobToBuilding[agent.job]);\r\n        case 'relax': {\r\n            const buildingDest = CityGetRandomEntertainmentBuilding(city, world);\r\n            if (buildingDest){\r\n                return Route(city, agent, buildingDest);\r\n            }\r\n        }\r\n    }\r\n    return [];\r\n}\r\n\r\nfunction CreateTravelFromIntent(agent: IBean, city: ICity, intent: IActivityData, world: IWorldState): IActivityData|undefined{\r\n    const destination = IntentToDestination(agent, city, intent, world);\r\n    \r\n    if (destination)\r\n        return {\r\n            act: 'travel',\r\n            destinations: destination,\r\n            destinationIndex: 0,\r\n            intent: intent\r\n        }\r\n    else\r\n        return undefined;\r\n}\r\n\r\nconst WanderlustEmoteChance = 0.002;\r\n\r\nexport const GetPriority = {\r\n    work: function(bean: IBean, city: ICity): number{\r\n        if (bean.job == 'jobless'){\r\n            return 9;\r\n        }\r\n        else if (city){\r\n            //beans with no inventory prioritize work higher\r\n            let inventory_priority = 99;\r\n            // if (city.economy){\r\n            //     const quant = bean.city.economy.market.getStakeListings(bean.key, bean.employerEnterpriseKey, JobToGood(bean.job))?.quantity || 0;\r\n            //     inventory_priority = quant;\r\n            // }\r\n            //beans with lots of cash prioritize work higher\r\n            const wealth_priority = bean.cash / city.costOfLiving / 2;\r\n            return 0.5 + Math.min(inventory_priority, wealth_priority);\r\n        } else {\r\n            return 0.5;\r\n        }\r\n    },\r\n    food: function(bean: IBean, difficulty: IDifficulty): number{\r\n        if ((bean.discrete_food <= difficulty.bean_life.vital_thresh.food.warning ))\r\n            return bean.discrete_food;\r\n        return 0.5 + (bean.discrete_food / difficulty.bean_life.vital_thresh.food.sufficient )\r\n    },\r\n    medicine:function(bean: IBean, difficulty: IDifficulty): number{\r\n        if ((bean.discrete_health <= difficulty.bean_life.vital_thresh.medicine.warning ))\r\n            return 0.25 + bean.discrete_health;\r\n        return 0.75 + (bean.discrete_health / difficulty.bean_life.vital_thresh.medicine.sufficient )\r\n    },\r\n    stamina: function(bean: IBean, difficulty: IDifficulty): number{\r\n        if ((bean.discrete_stamina <= difficulty.bean_life.vital_thresh.shelter.warning ))\r\n            return 0.50 + bean.discrete_stamina;\r\n        return 1 + (bean.discrete_stamina / difficulty.bean_life.vital_thresh.shelter.sufficient )\r\n    },\r\n    fun:function(bean: IBean, difficulty: IDifficulty): number{\r\n        return 3\r\n    }\r\n}\r\n\r\nexport function GetPriorities(bean: IBean, city: ICity, difficulty: IDifficulty): IPriorityQueue<IActivityData>{\r\n    const queue = new DumbPriorityQueue<IActivityData>([]);\r\n    let node = new PriorityNode<IActivityData>({act: 'work', good: JobToGood(bean.job)} as IActivityData, GetPriority.work(bean, city));\r\n    queue.enqueue(node);\r\n    node = new PriorityNode<IActivityData>({act: 'buy', good: 'food'} as IActivityData, GetPriority.food(bean, difficulty));\r\n    queue.enqueue(node);\r\n    node = new PriorityNode<IActivityData>({act: 'buy', good: 'shelter'} as IActivityData, GetPriority.stamina(bean, difficulty));\r\n    queue.enqueue(node);\r\n    node = new PriorityNode<IActivityData>({act: 'buy', good: 'medicine'} as IActivityData, GetPriority.medicine(bean, difficulty));\r\n    queue.enqueue(node);\r\n    node = new PriorityNode<IActivityData>({act: 'buy', good: 'fun'} as IActivityData, GetPriority.fun(bean, difficulty));\r\n    queue.enqueue(node);\r\n    return queue;\r\n}\r\n\r\nexport function ActivityIcon(data: IActivityData): string{\r\n    switch(data.act){\r\n        case 'sleep':\r\n            return '😴';\r\n        case 'work':\r\n            if (data.good)\r\n                return '💪 '+ GoodIcon[data.good];\r\n            else\r\n                return '💪';\r\n        case 'buy':\r\n            if (data.good)\r\n                return '💸 '+ GoodIcon[data.good];\r\n            else\r\n                return '💸';\r\n    }\r\n    return '';\r\n}\r\nexport function ActivityDisplay(data: IActivityData): string{    \r\n    switch(data.act){\r\n        case 'chat':\r\n            return `chatting`;\r\n        case 'crime':\r\n            return `commiting crime`;\r\n        case 'sleep':\r\n            return `sleeping 😴`;\r\n        case 'relax':\r\n            return `relaxing`;\r\n        case 'travel':\r\n            return `travelling to ` + data.intent?.act || '';\r\n        case 'work':\r\n            if (data.good)\r\n                return 'working to make '+ GoodIcon[data.good];\r\n            else\r\n                return 'working';\r\n        case 'buy':\r\n            if (data.good)\r\n                return 'buying '+ GoodIcon[data.good];\r\n            else\r\n                return 'buying';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * a bean is a citizen with preferences\r\n */\r\nexport interface IBean extends ISeller, IBeanAgent{    \r\n    key: number;\r\n    cityKey: number;\r\n    name: string;\r\n    community: TraitCommunity;\r\n    ideals: TraitIdeals;\r\n    ethnicity: TraitEthno;\r\n    faith: TraitFaith;\r\n    stamina: TraitStamina;\r\n    health: TraitHealth;\r\n    food: TraitFood;\r\n    discrete_food: number;\r\n    discrete_health: number;\r\n    discrete_sanity: number;\r\n    discrete_stamina: number;\r\n    discrete_fun: number;\r\n    graceTicks: number;\r\n    cash: number;\r\n    dob: IDate;\r\n    sanity: TraitSanity;\r\n    beliefs: TraitBelief[];\r\n    lifecycle: 'alive'|'dead'|'abducted',\r\n    hedonHistory: HedonSourceToVal[],\r\n    job: TraitJob,\r\n    happiness: HedonReport,\r\n    lastHappiness: number,\r\n    hedonFiveDayRecord: HedonExtremes,\r\n    fairGoodPrice: number,\r\n    employerEnterpriseKey?: number,\r\n    activity_duration: {[act in Act]: number},\r\n    bornInPetri: boolean,\r\n    ticksSinceLastRelax: number,\r\n    lastChatMS: number,\r\n    lastPoint?: Point\r\n}\r\n\r\n/**\r\n * fills out \"markers\" and \"destinationKey\" with random building of type\r\n * @param city \r\n * @param bean \r\n * @param buildingType \r\n */\r\nexport function RouteRandom(city: ICity, world: IWorldState, bean: IBean, buildingType: BuildingTypes): Point[]|null{\r\n    const destination: IBuilding|undefined = CityGetRandomBuildingOfType(city, world, buildingType);\r\n    if (destination === undefined) \r\n        return null;\r\n    return Route(city, bean, destination);\r\n}\r\n\r\n/**\r\n * fills out \"markers\" property with points to walk to destination\r\n * @param city \r\n * @param bean \r\n * @param buildingType \r\n */\r\nexport function Route(city: ICity, bean: IBean, destination: IBuilding): Point[]{\r\n    const start = MoverStoreInstance.Get('bean', bean.key).current || {...OriginAccelerator};\r\n    const nearestHex = pixel_to_hex(city.hex_size, city.petriOrigin, start.point);\r\n    return hex_linedraw(nearestHex, destination.address).map(\r\n        (h) => hex_to_pixel(city.hex_size, city.petriOrigin, h)\r\n        ).map((x, i, a) => {\r\n        if (i === a.length-1){\r\n            const offset = getRandomSlotOffset();\r\n            return {\r\n                x: x.x + offset.x,\r\n                y: x.y + offset.y\r\n            }\r\n        } else {\r\n            return x;\r\n        }\r\n    });\r\n}\r\nexport function Approach(geo: Geography, bean: IBean){\r\n\r\n}","import { PlayerResources } from \"../Game\";\r\nimport { GetRandom, GetRandomNumber } from \"../WorldGen\";\r\nimport { BeliefCommonality, RandomBeliefBucket, SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\n\r\nexport interface MarketTraitListing {\r\n    cost: PlayerResources;\r\n    trait: TraitBelief;\r\n}\r\nexport const CommonalityBaseCost: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 5,\r\n    'rare': 7\r\n};\r\nexport const CommonalityRandomMaxCost: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 5,\r\n    'rare': 7\r\n};\r\n\r\nexport function GetMarketTraits(): MarketTraitListing[]{\r\n    const newTraits: MarketTraitListing[] = [];\r\n    for (let i = 0; i < 3; i++) {\r\n        const b = GetRandom(RandomBeliefBucket);\r\n        newTraits.push(getMarketTraitListing(b));\r\n    }\r\n    return newTraits;\r\n}\r\n\r\nfunction getMarketTraitListing(b: TraitBelief): MarketTraitListing{\r\n    const rare = SecondaryBeliefData[b].rarity;\r\n    return {\r\n        trait: b,\r\n        cost: {\r\n            hedons: CommonalityBaseCost[rare] + GetRandomNumber(0, CommonalityRandomMaxCost[rare])\r\n        }\r\n    }\r\n}","import { IWorldState } from \"../state/features/world\";\r\n\r\nexport enum Season {Spring, Summer, Fall, Winter}\r\nexport const TicksPerHour = 2;\r\nexport const TicksPerDay = TicksPerHour * 4;\r\nexport enum PartOfDay {Midnight = 0, Morning = TicksPerHour, Noon = TicksPerHour*2, Evening = TicksPerHour*3}\r\n\r\nexport interface IDate{\r\n    day: number;\r\n    season: Season;\r\n    year: number;\r\n    /**\r\n     * analogous to ticks\r\n     * \r\n     * zero based, ranges from 0 to `HoursPerDay -1`\r\n     */\r\n    hour: number;\r\n}\r\n\r\nexport function Now(world: IWorldState): IDate{\r\n    return {year: world.date.year, season: world.date.season, day: world.date.day, hour: world.date.hour};\r\n}\r\n\r\nexport function withinLastYear(current: IDate, last: IDate): boolean{\r\n    return last.year > -1 && (\r\n        last.year == current.year || (\r\n            last.year == current.year - 1 &&\r\n            last.season > current.season\r\n        )\r\n    )\r\n}","import { AnyAction } from \"redux\";\r\nimport { IEvent } from \"../events/Events\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { SignalStoreInstance } from \"../SignalStore\";\r\nimport { EntityAddToSlice } from \"../state/entity.state\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { changeState, pickUpPickup, remove_ufo, selectBeansByCity } from \"../state/features/world.reducer\";\r\nimport { MaxHedonHistory, PickupPhysics, WorldInflate } from \"../World\";\r\nimport { GenerateBean } from \"../WorldGen\";\r\nimport { WorldSfxInstance } from \"../WorldSound\";\r\nimport { BeanActions, IBean } from \"./Agent\";\r\nimport { AgentDurationStoreInstance } from \"./AgentDurationInstance\";\r\nimport { BeanAge, BeanMaybeBaby, BeanCalculateBeliefs, BeanEmote } from \"./Bean\";\r\nimport { BeanTryFindJob } from \"./BeanAndCity\";\r\nimport { GetHedonReport } from \"./Beliefs\";\r\nimport { CalculateCityComputed } from \"./City\";\r\nimport { GetCostOfLiving } from \"./Economy\";\r\nimport { accelerate_towards, accelerator_coast, OriginAccelerator } from \"./Geography\";\r\nimport { IsLaw, MaybeRebate, PollTaxWeeklyAmount } from \"./Government\";\r\nimport { GetMarketTraits } from \"./MarketTraits\";\r\nimport { GenerateEmoteFromBean } from \"./Pickup\";\r\nimport { CheckGoals, CheckReportCard, HasResearched, TechData } from \"./Player\";\r\nimport { TicksPerDay } from \"./Time\";\r\n\r\nconst OwnerProfitPercentage = 0.25;\r\n\r\nexport function simulate_world(world: IWorldState){\r\n    world.date.hour++\r\n    if (world.date.hour >= TicksPerDay){\r\n        world.date.hour = 0;\r\n        world.date.day++;\r\n        simulate_every_day(world);\r\n        if (world.date.day % 7 === 0){\r\n            simulate_every_week(world);\r\n        }\r\n    }\r\n    if (world.date.day > 30){\r\n        world.date.day = 1;\r\n        simulate_every_month(world)\r\n        world.date.season++;\r\n    }\r\n    if (world.date.season > 3){\r\n        world.date.year++;\r\n        simulate_every_year(world);\r\n        world.date.season = 0;\r\n    }\r\n\r\n    world.alien.bots.amount += world.alien.bots.income;\r\n    world.alien.energy.amount += world.alien.energy.income;\r\n    if (HasResearched(world.alien.techProgress, 'fast_resources')){\r\n        world.alien.bots.amount += world.alien.bots.income*0.5;\r\n        world.alien.energy.amount += world.alien.energy.income*0.5;\r\n    }\r\n    if (world.alien.currentlyResearchingTech){\r\n        const tech = world.alien.currentlyResearchingTech;\r\n        if(world.alien.techProgress[tech] == null){\r\n            world.alien.techProgress[tech] = {\r\n                researchPoints: 0\r\n            }\r\n        }\r\n        const max = TechData[tech].techPoints;\r\n        const current = world.alien.techProgress[tech].researchPoints;\r\n        if (current < max)\r\n            world.alien.techProgress[tech].researchPoints += world.alien.abductedBeanKeys.length;\r\n        if (current >= max){\r\n            if (world.alien.currentlyResearchingTech === 'neural_duplicator')\r\n                world.alien.beliefInventory.forEach((x) => x.charges += 1);\r\n            world.alien.currentlyResearchingTech = undefined;\r\n\r\n        }\r\n    }\r\n\r\n    const CoL = GetCostOfLiving(world.economy);\r\n    world.beans.allIDs.forEach((bKey: number, i: number) => {\r\n        const b = world.beans.byID[bKey];\r\n        if (b.lifecycle != 'alive')\r\n            return;\r\n        \r\n        const ageResult = BeanAge(b, world.alien.difficulty);\r\n        if (ageResult?.emotes){\r\n            ageResult.emotes.map(x => EntityAddToSlice(world.pickups, x));\r\n        }\r\n        if (ageResult?.death){\r\n            EntityAddToSlice(world.events, ageResult.death);\r\n        }\r\n        // todo: on bean death\r\n        const e = BeanMaybeBaby(b, CoL);\r\n        if (e) {\r\n            const newBean = GenerateBean(world, world.cities.byID[b.cityKey], b);\r\n            if (b.lastPoint){\r\n                newBean.lastPoint = b.lastPoint;\r\n                MoverStoreInstance.Get('bean', newBean.key).publish({point: {x: b.lastPoint.x, y: b.lastPoint.y}, velocity: {x: 0, y: 0}});\r\n            }\r\n            world.beans.byID[newBean.key] = newBean;\r\n            world.beans.allIDs.push(newBean.key);\r\n            world.cities.byID[b.cityKey].beanKeys.push(newBean.key);\r\n            WorldAddEvent(world, e);\r\n            WorldSfxInstance.play('squeak');\r\n        }\r\n        if (b.job === 'jobless'){\r\n            const gotJob = BeanTryFindJob(world, b);\r\n            if (!gotJob){\r\n                WorldAddEvent(world, {icon: '🏚️', trigger: 'nojobslots', message: `A subject cannot find a job; build or upgrade more buildings.`, key: 0});\r\n            }\r\n        }\r\n        \r\n        b.happiness = GetHedonReport(b.hedonHistory);\r\n    });\r\n    world.cities.allIDs.forEach(cityID => {\r\n        const c = world.cities.byID[cityID];\r\n        CalculateCityComputed(c, world.economy);\r\n    });\r\n    world.beans.allIDs.forEach((k: number) => {\r\n        const b = world.beans.byID[k];\r\n        if (!b || b.lifecycle != 'alive')\r\n            return;\r\n        BeanCalculateBeliefs(b, world.economy, world.alien.difficulty, world.law);\r\n    });\r\n    CheckGoals(world, world.alien);\r\n    CheckReportCard(world, world.alien);\r\n    return world;\r\n}\r\nexport function simulate_every_year(world: IWorldState){\r\n    WorldInflate(world);\r\n}\r\nexport function simulate_every_month(world: IWorldState){\r\n    //resetMonthlyDemand\r\n    world.economy.unfulfilledMonthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n    world.economy.monthlyDemand = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n    world.economy.monthlySupply = { food: 0, shelter: 0, medicine: 0, fun: 0, };\r\n}\r\nexport function simulate_every_week(world: IWorldState){\r\n    world.marketTraitsForSale = GetMarketTraits();\r\n    WorldAddEvent(world, {key: 0, message: 'New traits in the Emotion Market!', icon: '🛍️', trigger: 'marketrefresh'});\r\n    if (IsLaw(world.law, 'poll_tax')){\r\n        let collected = 0;\r\n        world.cities.allIDs.forEach((cityID: number) => {\r\n            selectBeansByCity(world, cityID).forEach((y: IBean) => {\r\n                if (y.cash >= PollTaxWeeklyAmount){\r\n                    y.cash -= PollTaxWeeklyAmount;\r\n                    collected += PollTaxWeeklyAmount;\r\n                }\r\n            });\r\n        });\r\n        world.law.cash = (world.law.cash + collected);\r\n    }\r\n    MaybeRebate(world.law, Object.values(world.beans.byID));\r\n}\r\nexport function simulate_every_day(world: IWorldState){\r\n    world.beans.allIDs.forEach((beanKey) => {\r\n        const x = world.beans.byID[beanKey];\r\n        if (x.hedonHistory.length >= MaxHedonHistory) {\r\n            x.hedonHistory.pop();\r\n        }\r\n        x.hedonHistory.unshift({});\r\n    });\r\n    //pay beans\r\n    world.enterprises.allIDs.forEach((eKey) => {\r\n        const enterprise = world.enterprises.byID[eKey];\r\n        const building = world.buildings.byID[eKey];\r\n        const workers = building.jobs.map(x => world.beans.byID[x]);\r\n        //distribute cash\r\n        switch(enterprise.enterpriseType){\r\n            case 'company':\r\n                if (workers.length < 1) {\r\n                    //noop;\r\n                } else if (workers.length === 1){\r\n                    workers[0].cash += enterprise.cash;\r\n                    if (enterprise.cash > 0)\r\n                        workers[0].ticksSinceLastSale = 0;\r\n                    enterprise.cash = 0;\r\n                }\r\n                else {\r\n                    const share = enterprise.cash / (workers.length + OwnerProfitPercentage);\r\n                    enterprise.cash = 0;\r\n                    let owner = workers.find(x => x.key === enterprise.ownerBeanKey);\r\n                    if (owner == null){\r\n                        owner = workers[0];\r\n                        enterprise.ownerBeanKey = owner.key;\r\n                    }\r\n                    workers.forEach(bean => {\r\n                        const pay = (bean === owner) ? share * (1+OwnerProfitPercentage) : share;\r\n                        bean.cash += pay;\r\n                        if (pay > 0)\r\n                            bean.ticksSinceLastSale = 0;\r\n                    });\r\n                }\r\n                break;\r\n            case 'co-op':\r\n                const share = enterprise.cash / workers.length;\r\n                enterprise.cash = 0;\r\n                workers.forEach(bean => {\r\n                    bean.cash += share;\r\n                    if (share > 0)\r\n                        bean.ticksSinceLastSale = 0;\r\n                });\r\n                break;\r\n            case 'commune':\r\n                const commShare = enterprise.cash / workers.length;\r\n                enterprise.cash = 0;\r\n                workers.forEach(bean => {\r\n                    bean.cash += commShare;\r\n                    if (commShare > 0)\r\n                        bean.ticksSinceLastSale = 0;\r\n                });\r\n                break;\r\n        }\r\n    })\r\n}\r\nexport function WorldAddEvent(world: IWorldState, e: IEvent){\r\n    e.key = world.events.nextID++;\r\n    world.events.byID[e.key] = e;\r\n    world.events.allIDs.push(e.key);\r\n    SignalStoreInstance.events.publish(e);\r\n}\r\nexport function animate_ufos(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const actions: AnyAction[] = [];\r\n    world.ufos.allIDs.forEach((ufoKey) => {\r\n        const ufo = world.ufos.byID[ufoKey];\r\n        AgentDurationStoreInstance.Get('ufo', ufoKey).elapsed += deltaMS;\r\n\r\n        if (AgentDurationStoreInstance.Get('ufo', ufoKey).elapsed > 4000)\r\n        {\r\n            actions.push(remove_ufo({ufoKey}))\r\n        }\r\n    });\r\n    return actions;\r\n}\r\nexport function animate_beans(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const actions: AnyAction[] = [];\r\n    world.beans.allIDs.forEach((beanKey) => {\r\n        const bean = world.beans.byID[beanKey];\r\n\r\n        if (bean.lifecycle != 'alive')\r\n            return;\r\n        \r\n        const ADS = AgentDurationStoreInstance.Get('bean', bean.key); \r\n        ADS.elapsed += deltaMS;\r\n        const actResult = BeanActions[bean.action].act(bean, world, ADS.elapsed, deltaMS);\r\n        if (Array.isArray(actResult.action)){\r\n            actions.push(...actResult.action);\r\n        } else if (actResult.action){\r\n            actions.push(actResult.action);\r\n        }\r\n        if (actResult.newActivity){\r\n            const exitAction = BeanActions[bean.action].exit(bean);\r\n            if (exitAction)\r\n                actions.push(exitAction);\r\n            actions.push(changeState({beanKey: beanKey, newState: actResult.newActivity}));\r\n            const enterAction = BeanActions[actResult.newActivity.act].enter(bean);\r\n            if (enterAction)\r\n                actions.push(enterAction);\r\n        }\r\n        //TODO: fix on chat\r\n        // if (result.data.act === 'chat' && result.data.chat?.participation === 'speaker'){\r\n        //     listener.onChat(agent as Bean, result.data.chat);\r\n        // }\r\n    });\r\n    return actions;\r\n}\r\nexport function animate_pickups(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const pickupIDs = world.pickups.allIDs;\r\n    const city = world.cities.byID[0];\r\n    const actions: AnyAction[] = [];\r\n    //go backwards because we'll modify the array as we go\r\n    for(let i = pickupIDs.length - 1; i >= 0; i--) {\r\n        const pickupID = pickupIDs[i];\r\n        let collide = false;\r\n        const magnet = city.pickupMagnetPoint;\r\n        const newAccelerator = {\r\n            ...(MoverStoreInstance.Get('pickup', pickupID).current || OriginAccelerator)\r\n        };\r\n        if (magnet){\r\n            const collide = accelerate_towards(\r\n                newAccelerator,\r\n                magnet,\r\n                PickupPhysics.AccelerateS * deltaMS/1000, \r\n                PickupPhysics.MaxSpeed, \r\n                PickupPhysics.CollisionDistance,\r\n                PickupPhysics.Brake);\r\n            if (collide){\r\n                actions.push(pickUpPickup({cityKey: city.key, pickupKey: pickupID}));\r\n            }\r\n        } else {\r\n            accelerator_coast(newAccelerator, PickupPhysics.Brake);\r\n        }\r\n        if (!collide)\r\n            MoverStoreInstance.Get('pickup', pickupID).publish(newAccelerator);\r\n    }\r\n    return actions;\r\n}","import { BeliefCommonality } from \"./simulation/Beliefs\";\r\nimport { BuildingTypes } from \"./simulation/Geography\";\r\nimport { RubricKeys } from \"./simulation/Player\";\r\nimport { TicksPerDay } from \"./simulation/Time\";\r\nimport { IThreshold, TraitGood } from \"./World\";\r\n\r\nexport type PlayerEmptyHexAction = 'build';\r\nexport type PlayerHexAction = 'beam'|'upgrade';\r\nexport type PlayerBeanAction = 'scan'|'abduct'|'vaporize'|'siphon'|'empower'|'gift';\r\nexport type PlayerBeanBrainAction = 'brainwash_ideal'|'brainimplant_secondary'|'brainwash_secondary';\r\nexport type PlayerMarketAction = 'energy'|'bots';\r\nexport type PlayerGovernmentAction = '';\r\nexport type PlayerAction = PlayerHexAction|PlayerBeanAction;\r\n\r\nexport interface PlayerResources{\r\n    energy?: number;\r\n    bots?: number;\r\n    hedons?: number;\r\n    tortrons?: number;\r\n}\r\nexport interface BeanResources{\r\n    sanity?: number;\r\n}\r\nexport type BeanDeathCause = 'vaporization'|'exposure'|'starvation'|'sickness';\r\nexport function triadToString(cost: PlayerResources, sign: '+'|''|'-', qty: number = 1){\r\n    const costs = [];\r\n    if (cost.energy){\r\n        costs.push(sign+(cost.energy*qty)+' Energy');\r\n    }\r\n    if (cost.bots){\r\n        costs.push(sign+(cost.bots*qty)+' Bots');\r\n    }\r\n    if (cost.hedons){\r\n        costs.push(sign+(cost.hedons*qty)+' Hedons');\r\n    }\r\n    if (cost.tortrons){\r\n        costs.push(sign+(cost.tortrons*qty)+' Antihedons');\r\n    }\r\n    return costs.join(' ');\r\n}\r\nexport interface SecondaryResources{\r\n    research?: number;\r\n    leadership?: number;\r\n}\r\nexport interface IDifficulty{\r\n    cost: {\r\n        emptyHex: {[key in PlayerEmptyHexAction]: {\r\n            [key in BuildingTypes]: PlayerResources}\r\n        },\r\n        hex: {[key in PlayerHexAction]: PlayerResources} \r\n        bean: {[key in PlayerBeanAction]: PlayerResources},\r\n        bean_brain: {[key in PlayerBeanBrainAction]: BeanResources}\r\n        market: {\r\n            scrubHedons: PlayerResources,\r\n            resource: {[key in PlayerMarketAction]: PlayerResources},\r\n            beliefs: {[key in BeliefCommonality]: PlayerResources}\r\n        }\r\n    },\r\n    bean_life: {\r\n        vital_thresh: {[key in TraitGood]: IThreshold},\r\n        degrade_per_tick: {\r\n            food: number,\r\n            health: number,\r\n            stamina: number,\r\n            fun: number\r\n        },\r\n        penalty: {\r\n            homeless_health: number,\r\n            starving_health: number\r\n        },\r\n        death_chance: {\r\n            [cause in BeanDeathCause]: number\r\n        }\r\n    },\r\n    report_card_progression: RubricKeys[]\r\n}\r\nexport const DefaultDifficulty: IDifficulty = {\r\n    cost: {\r\n        emptyHex: {\r\n            build: {\r\n                house: {\r\n                    energy: 1,\r\n                    bots: 3\r\n                },\r\n                farm: {\r\n                    energy: 1,\r\n                    bots: 3\r\n                },\r\n                theater: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                hospital: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                church: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                courthouse: {\r\n                    energy: 999,\r\n                    bots: 999\r\n                },\r\n                park: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                nature: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                }\r\n            }\r\n        },\r\n        hex: {\r\n            beam: {\r\n                energy: 3\r\n            },\r\n            upgrade: {\r\n                energy: 1,\r\n                bots: 4,\r\n            }\r\n        },\r\n        bean_brain: {\r\n            brainwash_ideal: { sanity: 4},\r\n            brainimplant_secondary: { sanity: 1},\r\n            brainwash_secondary: {sanity: 2},\r\n        },\r\n        bean: {\r\n            scan: {\r\n                energy: 1\r\n            },\r\n            abduct: {\r\n                bots: 3\r\n            },\r\n            gift: {},\r\n            empower: {},\r\n            vaporize: {\r\n                energy: 2,\r\n                bots: 4\r\n            },\r\n            siphon: {},\r\n        },\r\n        market: {\r\n            scrubHedons: {\r\n                energy: 5\r\n            },\r\n            resource: {\r\n                bots: {\r\n                    hedons: 6\r\n                },\r\n                energy: {\r\n                    hedons: 5\r\n                }\r\n            },\r\n            beliefs: {\r\n                common: {},\r\n                uncommon: {},\r\n                rare: {}\r\n            },\r\n        }\r\n    },\r\n    bean_life: {\r\n        vital_thresh: {\r\n            'food': {warning: 0.6, sufficient: 1, abundant: 3},\r\n            'shelter': {warning: 0.6, sufficient: 1, abundant: 7},\r\n            'medicine': {warning: 0.6, sufficient: 1, abundant: 3},\r\n            'fun': {warning: 0.1, sufficient: 1, abundant: 3},\r\n        },\r\n        degrade_per_tick: {\r\n            food: 1/(TicksPerDay*3),\r\n            health: 1/(TicksPerDay*5),\r\n            stamina: 1,\r\n            fun: 1/(TicksPerDay*5)\r\n        },\r\n        penalty: {\r\n            homeless_health: 1/(TicksPerDay*7),\r\n            starving_health: 1/(TicksPerDay*7)\r\n        },\r\n        death_chance: {\r\n            starvation: 1/8,\r\n            sickness: 1/8,\r\n            exposure: 1/8,\r\n            vaporization: 1\r\n        }\r\n    },\r\n    report_card_progression: []\r\n};","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { PlayerResources } from '../../Game'\r\nimport { MoverStoreInstance } from '../../MoverStoreSingleton'\r\nimport { SignalStoreInstance } from '../../SignalStore'\r\nimport { Act, IActivityData, IBean } from '../../simulation/Agent'\r\nimport { AgentDurationStoreInstance } from '../../simulation/AgentDurationInstance'\r\nimport { BeanBelievesIn, BeanCanPurchase, BeanDie, BeanLoseSanity, CosmopolitanHappyChance, DiligenceHappyChance, GermophobiaHospitalWorkChance, HedonismExtraChance, HedonismHateWorkChance, LibertarianTaxUnhappyChance, ParochialHappyChance, ProgressivismTaxHappyChance } from '../../simulation/Bean'\r\nimport { BeanTrySetJob } from '../../simulation/BeanAndCity'\r\nimport { BeliefsAll, SecondaryBeliefData, TraitBelief } from '../../simulation/Beliefs'\r\nimport { BuildingUnsetJob } from '../../simulation/City'\r\nimport { EconomyEmployAndPrice, EconomyMostInDemandJob, EconomyProduceAndPrice, EconomyTryTransact, IListing, IMarketReceipt, MarketListingSubtract } from '../../simulation/Economy'\r\nimport { BuildingTypes, HexPoint, hex_to_pixel, IBuilding, OriginAccelerator, Point } from '../../simulation/Geography'\r\nimport { LawData, LawKey } from '../../simulation/Government'\r\nimport { EnterpriseType } from '../../simulation/Institutions'\r\nimport { MarketTraitListing } from '../../simulation/MarketTraits'\r\nimport { IPickup } from '../../simulation/Pickup'\r\nimport { HasResearched, PlayerCanAfford, PlayerPurchase, PlayerTryPurchase, PlayerUseCharge, Tech } from '../../simulation/Player'\r\nimport { BuildingTryFreeBean, GenerateIBuilding } from '../../simulation/RealEstate'\r\nimport { IUFO } from '../../simulation/Ufo'\r\nimport { MathClamp } from '../../simulation/Utils'\r\nimport { simulate_world, WorldAddEvent } from '../../simulation/WorldSim'\r\nimport { EmotionSanity, EmotionWorth, GoodToThreshold, JobToGood, TraitEmote, TraitFaith, TraitGood } from '../../World'\r\nimport { GenerateBean, GetRandom, GetRandomCityName, GetRandomNumber } from '../../WorldGen'\r\nimport { WorldSfxInstance } from '../../WorldSound'\r\nimport { EntityAddToSlice } from '../entity.state'\r\nimport { GetBlankWorldState, IWorldState } from './world'\r\n\r\nconst ChargePerMarket = 3;\r\nconst ChargePerWash = 2;\r\n\r\nconst UnderemploymentThresholdTicks = 8\r\nexport const worldSlice = createSlice({\r\n    name: 'world',\r\n    initialState: GetBlankWorldState(),\r\n    reducers: {\r\n      refreshMarket: state => {\r\n          \r\n      },\r\n      magnetChange: (state, action: PayloadAction<{cityKey: number, px?: Point}>) => {\r\n        state.cities.byID[action.payload.cityKey].pickupMagnetPoint = action.payload.px;\r\n      },\r\n      worldTick: state => {\r\n        simulate_world(state);\r\n      },\r\n      newGame: state => {\r\n        const city = state.cities.byID[0];\r\n        city.name = GetRandomCityName();\r\n        GenerateIBuilding(state, city, 'courthouse', {q: 0, r: 0}, state.economy);\r\n        GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(15, 20)], state.economy);\r\n        GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(21, 25)], state.economy);\r\n        GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(26, 60)], state.economy);\r\n      },\r\n      loadGame: (state, action:PayloadAction<{newState: IWorldState}>) => {\r\n        action.payload.newState.beans.allIDs.map(k => {\r\n          const bean = action.payload.newState.beans.byID[k];\r\n          if (bean){\r\n            MoverStoreInstance.Get('bean', k).publish({\r\n              point: {\r\n                x: bean.lastPoint?.x || 0,\r\n                y: bean.lastPoint?.y || 0\r\n              }, velocity: {x: 0, y: 0}\r\n            })\r\n          }\r\n        })\r\n        return action.payload.newState\r\n      },\r\n      build: (state, action: PayloadAction<{city: number, where: HexPoint, what: BuildingTypes}>) => {\r\n        const cost: PlayerResources = state.alien.difficulty.cost.emptyHex.build[action.payload.what];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          GenerateIBuilding(state, state.cities.byID[action.payload.city], action.payload.what, action.payload.where, state.economy);\r\n        }\r\n      },\r\n      changeEnterprise: (state, action: PayloadAction<{enterpriseKey: number, newType: EnterpriseType}>) => {\r\n        state.enterprises.byID[action.payload.enterpriseKey].enterpriseType = action.payload.newType;\r\n      },\r\n      fireBean: (state, action: PayloadAction<{cityKey: number, beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.employerEnterpriseKey){\r\n          const building = state.buildings.byID[bean.employerEnterpriseKey];\r\n          const enterprise = state.enterprises.byID[bean.employerEnterpriseKey];\r\n          if (enterprise.ownerBeanKey == bean.key){\r\n            enterprise.ownerBeanKey = building.jobs.find(x => x != bean.key);\r\n          }\r\n          BuildingUnsetJob(building, bean);\r\n        }\r\n      },\r\n      upgrade: (state, action: PayloadAction<{buildingKey: number}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.upgrade;\r\n        const what = state.buildings.byID[action.payload.buildingKey];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          what.upgraded = true;\r\n        }\r\n      },\r\n      beam: (state, action: PayloadAction<{cityKey: number, where: HexPoint}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.beam;\r\n        if (PlayerCanAfford(state.alien, cost)) {\r\n          PlayerPurchase(state.alien, cost);\r\n          const ufo: IUFO = {\r\n            key: state.ufos.nextID++,\r\n            action: 'beam-in',\r\n            duration: 0,\r\n            point: {...action.payload.where},\r\n            cityKey: action.payload.cityKey\r\n          };\r\n          state.ufos.allIDs.push(ufo.key);\r\n          state.ufos.byID[ufo.key] = ufo;\r\n          state.cities.byID[action.payload.cityKey].ufoKeys.push(ufo.key);\r\n        }\r\n      },\r\n      remove_ufo: (state, action: PayloadAction<{ufoKey: number}>) => {\r\n        const ufo = state.ufos.byID[action.payload.ufoKey];\r\n        const newBean = GenerateBean(state, state.cities.byID[0], undefined, ufo.point);\r\n        delete state.ufos.byID[action.payload.ufoKey];\r\n        state.ufos.allIDs = state.ufos.allIDs.filter(x => x != action.payload.ufoKey);\r\n        state.cities.byID[ufo.cityKey].ufoKeys = state.cities.byID[ufo.cityKey].ufoKeys.filter(x => x != action.payload.ufoKey);\r\n        \r\n        state.beans.byID[newBean.key] = newBean;\r\n        state.beans.allIDs.push(newBean.key);\r\n        state.cities.byID[ufo.cityKey].beanKeys.push(newBean.key);\r\n        MoverStoreInstance.Get('bean', newBean.key).current = {\r\n          point: hex_to_pixel(state.cities.byID[ufo.cityKey].hex_size, state.cities.byID[ufo.cityKey].petriOrigin, ufo.point), \r\n          velocity: {x: 0, y: 0}\r\n        };\r\n      },\r\n      abduct: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.abduct)) {\r\n          const bean = state.beans.byID[action.payload.beanKey];\r\n          bean.lifecycle = 'abducted';\r\n          if (bean.employerEnterpriseKey){\r\n            const building = state.buildings.byID[bean.employerEnterpriseKey];\r\n            BuildingUnsetJob(building, bean);\r\n          }\r\n          state.cities.byID[bean.cityKey].beanKeys = state.cities.byID[bean.cityKey].beanKeys.filter(x => x != bean.key);\r\n          state.alien.abductedBeanKeys.push(bean.key);\r\n        }\r\n      },\r\n      cheatAdd: (state) => {\r\n        state.alien.energy.amount += 10;\r\n        state.alien.bots.amount += 10;\r\n        state.alien.hedons.amount += 10;\r\n      },\r\n      release: (state) => {\r\n        if (state.alien.abductedBeanKeys.length > 0) {\r\n          const lucky_bean_key = state.alien.abductedBeanKeys.shift();\r\n          if (lucky_bean_key != null){\r\n            const luckyBean = state.beans.byID[lucky_bean_key];\r\n            luckyBean.lifecycle = 'alive';\r\n            state.cities.byID[luckyBean.cityKey].beanKeys.push(lucky_bean_key);\r\n          }\r\n        }\r\n\r\n      },\r\n      washCommunity: (state, action: PayloadAction<{beanKey: number, faith: TraitFaith}>) => {\r\n        // if (bean.canPurchase(state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n        //   bean.loseSanity(state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n        //   if (bean.community === 'ego')\r\n        //     bean.community = 'state';\r\n        //   else bean.community = 'ego';\r\n        //   return true;\r\n        // }\r\n      },\r\n      washMotive: () => {\r\n\r\n        // if (bean.canPurchase(state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n        //   bean.loseSanity(state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n        //   if (bean.ideals === 'prog')\r\n        //     bean.ideals = 'trad';\r\n        //   else bean.ideals = 'prog';\r\n        //   this.setState({ world: state });\r\n        //   return true;\r\n        // }\r\n      },\r\n      washNarrative: (state, action: PayloadAction<{beanKey: number, faith: TraitFaith}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n          const oldFaith = bean.faith;\r\n          while (bean.faith === oldFaith)\r\n            bean.faith = GetRandom(['rocket', 'dragon', 'music', 'noFaith']);\r\n        }\r\n      },\r\n      washBelief: (state, action: PayloadAction<{beanKey: number, trait: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const sanityCostBonus = HasResearched(state.alien.techProgress, 'sanity_bonus') ? -1 : 0;\r\n      if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary, sanityCostBonus)) {\r\n        BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary.sanity || 0);\r\n        bean.beliefs.splice(\r\n          bean.beliefs.indexOf(action.payload.trait), 1\r\n        );\r\n        const existing = state.alien.beliefInventory.find((x) => x.trait === action.payload.trait);\r\n        const chargeBonus = HasResearched(state.alien.techProgress, 'neural_duplicator') ? 1 : 0;\r\n        if (existing) {\r\n          existing.charges += ChargePerWash + chargeBonus;\r\n        } else\r\n          state.alien.beliefInventory.push({trait: action.payload.trait, charges: ChargePerWash + chargeBonus});\r\n        WorldSfxInstance.play('wash_out');\r\n      }\r\n      },\r\n      setResearch: (state, action: PayloadAction<{t: Tech}>) => {\r\n        state.alien.currentlyResearchingTech = action.payload.t;\r\n      },\r\n      implant: (state, action: PayloadAction<{beanKey: number, trait: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const sanityCostBonus = HasResearched(state.alien.techProgress, 'sanity_bonus') ? -1 : 0;\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainimplant_secondary, sanityCostBonus) && \r\n          state.alien.beliefInventory.filter(x => x.trait == action.payload.trait && x.charges > 0)) {\r\n          bean.beliefs.push(action.payload.trait);\r\n          PlayerUseCharge(state.alien, action.payload.trait);\r\n          WorldSfxInstance.play('wash_in');\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainimplant_secondary.sanity || 0); \r\n        }\r\n      },\r\n      scan: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.scan)) {\r\n          state.alien.scanned_bean[bean.key] = true;\r\n          bean.beliefs.forEach((b) => {\r\n            if (!state.alien.seenBeliefs[b]){\r\n              state.alien.seenBeliefs[b] = true;\r\n              SignalStoreInstance.newTraitSeen.publish({k: SecondaryBeliefData[b].noun, v: true});\r\n            }\r\n          });\r\n          WorldSfxInstance.play('scan');\r\n        }\r\n      },\r\n      vaporize: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.vaporize)) {\r\n          const d = BeanDie(state.beans.byID[action.payload.beanKey], 'vaporization');\r\n          EntityAddToSlice(state.events, d.death);\r\n          d.emotes.map(e => EntityAddToSlice(state.pickups, e));\r\n        }\r\n      },\r\n      pickUpPickup: (state, action: PayloadAction<{cityKey: number, pickupKey: number}>) => {\r\n        const pickup = state.pickups.byID[action.payload.pickupKey];\r\n\r\n        const amt = EmotionWorth[pickup.type];\r\n        state.alien.hedons.amount += amt;\r\n        state.cities.byID[action.payload.cityKey].pickupKeys = state.cities.byID[action.payload.cityKey].pickupKeys.filter(x => x != action.payload.pickupKey);\r\n        state.pickups.allIDs = state.pickups.allIDs.filter(x => x != action.payload.pickupKey);\r\n        delete state.pickups.byID[action.payload.pickupKey];\r\n        \r\n        SignalStoreInstance.alienHedons.publish({change: amt});\r\n        WorldSfxInstance.play(pickup.type);\r\n      },\r\n      changeState: (state, action: PayloadAction<{beanKey: number, newState: IActivityData}>) => {\r\n        const oldAct = state.beans.byID[action.payload.beanKey].action;\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const ADS = AgentDurationStoreInstance.Get('bean', bean.key);\r\n        if (oldAct === 'chat')\r\n          bean.lastChatMS = Date.now();\r\n        bean.activity_duration[oldAct] += ADS.elapsed;\r\n        bean.action = action.payload.newState.act;\r\n        bean.actionData = action.payload.newState;\r\n        const p = MoverStoreInstance.Get('bean', bean.key).current?.point;\r\n        if (p) {\r\n          bean.lastPoint = {\r\n            ...p\r\n          };\r\n        }\r\n        ADS.elapsed = 0;\r\n      },\r\n      beanHitDestination: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.actionData.destinationIndex != null){\r\n          bean.actionData.destinationIndex++;\r\n        }\r\n      },\r\n      beanBePersuaded: (state, action: PayloadAction<{beanKey: number, belief: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        bean.beliefs.push(action.payload.belief);\r\n        WorldAddEvent(state, {\r\n            key: 0,\r\n            icon: '🗣️', \r\n            trigger: 'persuasion', \r\n            message: `${bean.name} now believes in ${SecondaryBeliefData[action.payload.belief].icon} ${SecondaryBeliefData[action.payload.belief].noun}!`, \r\n            beanKey: bean.key, cityKey: bean.cityKey,\r\n            point: bean.lastPoint\r\n        });\r\n        WorldSfxInstance.play('mhmm')\r\n      },\r\n      beanGiveCharity: (state, action: PayloadAction<{senderBeanKey: number, needyBeanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.senderBeanKey];\r\n        bean.cash -= 0.5;\r\n        _emote(bean, state, {emote: 'happiness', source: 'Charity'});\r\n        const needy = state.beans.byID[action.payload.needyBeanKey];\r\n        needy.cash += 0.5;\r\n        _emote(needy, state, {emote: 'happiness', source: 'Charity'});\r\n      },\r\n      beanWork: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.job === 'jobless'){\r\n        } else {\r\n            switch(bean.job){\r\n                case 'farmer':\r\n                    bean.discrete_food = Math.min(bean.discrete_food+1, GoodToThreshold.food.sufficient*2);\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Parochialism', 'happiness', ParochialHappyChance);\r\n                    break;\r\n                case 'doc':\r\n                    bean.discrete_health = Math.min(bean.discrete_health+1, GoodToThreshold.medicine.sufficient*2);\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Germophobia', 'unhappiness', GermophobiaHospitalWorkChance);\r\n                    break;\r\n                case 'builder': \r\n                    bean.stamina = 'awake';\r\n                    bean.discrete_stamina = 7;\r\n                    break;\r\n                case 'entertainer':\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Cosmopolitanism', 'happiness', CosmopolitanHappyChance);\r\n                break;\r\n            }\r\n            _ifBelievesInMaybeEmote(state, bean, 'Diligence', 'happiness', DiligenceHappyChance);\r\n            _ifBelievesInMaybeEmote(state, bean, 'Hedonism', 'unhappiness', HedonismHateWorkChance);\r\n            bean.ticksSinceLastSale++;\r\n            if (bean.ticksSinceLastSale > UnderemploymentThresholdTicks && bean.employerEnterpriseKey != null){\r\n                // const cityHasOtherWorkers = state.cities.byID[bean.cityKey].beans.get.filter(x => x.job === bean.job).length > 1 : false;\r\n                // cityHasOtherWorkers &&\r\n                const employer = state.enterprises.byID[bean.employerEnterpriseKey];\r\n                // underemployment\r\n                if (employer.ownerBeanKey != bean.key && Math.random() > 0.5) {\r\n                    const newJob = EconomyMostInDemandJob(state.economy);\r\n                    if (newJob){\r\n                      BuildingUnsetJob(state.buildings.byID[bean.employerEnterpriseKey], bean);\r\n                      BeanTrySetJob(state, bean, newJob);\r\n                    }\r\n                }\r\n            }\r\n            let workedForEmployer = false;\r\n            if (bean.employerEnterpriseKey){\r\n                const employer = state.enterprises.byID[bean.employerEnterpriseKey];\r\n                if (employer){\r\n                    EconomyEmployAndPrice(state.economy, employer, JobToGood(bean.job), 4, bean.fairGoodPrice);\r\n                    workedForEmployer = true;\r\n                    switch(employer.enterpriseType){\r\n                        case 'company':\r\n                            _ifBelievesInMaybeEmote(state, bean, 'Communism', 'unhappiness', 0.1);\r\n                            if (employer.ownerBeanKey === bean.key)\r\n                              _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'co-op':                            \r\n                            _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'unhappiness', 0.1);\r\n                                \r\n                            _ifBelievesInMaybeEmote(state, bean, 'Socialism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'commune':                            \r\n                          _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'unhappiness', 0.1);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (!workedForEmployer)\r\n              EconomyProduceAndPrice(state.economy, bean, JobToGood(bean.job), 4, bean.fairGoodPrice);\r\n        }\r\n      },\r\n      beanEmote: (state, action: PayloadAction<{beanKey: number, emote: TraitEmote, source: string}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        _emote(bean, state, action.payload);\r\n        if (BeanBelievesIn(bean, 'Hedonism') && (\r\n          action.payload.emote === 'happiness' || action.payload.emote === 'love'\r\n          ) && Math.random() < HedonismExtraChance){\r\n            _emote(bean, state, {emote: 'happiness', source: 'Hedonism'});\r\n        }\r\n      },\r\n      beanCrime: (state, action: PayloadAction<{beanKey: number, good: 'food'|'medicine'}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        const listing = GetRandom(state.economy.market.listings[action.payload.good]);\r\n        if (listing == null){\r\n        } else {\r\n          const stolen = Math.min(listing.quantity, 3);\r\n          MarketListingSubtract(state.economy.market, listing, action.payload.good, stolen);\r\n          if (stolen != null){\r\n              switch(action.payload.good){\r\n                  case 'food':\r\n                      bean.discrete_food += stolen;\r\n                      break;\r\n                  case 'medicine':\r\n                      bean.discrete_health += stolen;\r\n                      break;\r\n              }\r\n          }\r\n        }\r\n      },\r\n      beanRelax: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        bean.discrete_fun += 1;\r\n        _emote(bean, state, {emote: 'happiness', source: 'Relaxation'});\r\n        if (BeanBelievesIn(bean, 'Naturalism'))\r\n          _emote(bean, state, {emote: 'happiness', source: 'Naturalism'});\r\n      },\r\n      enactLaw: (state, action: PayloadAction<{lawKey: LawKey}>) => {\r\n        const data = LawData[action.payload.lawKey];\r\n        state.law.lawTree[data.axis] = data;\r\n      },\r\n      repealLaw: (state, action: PayloadAction<{lawKey: LawKey}>) => {\r\n        const data = LawData[action.payload.lawKey];\r\n        delete state.law.lawTree[data.axis];\r\n      },\r\n      \r\n    buyBots: (state, action: PayloadAction<{amount: number}>) => {\r\n      const cost = state.alien.difficulty.cost.market.resource.bots;\r\n      if (PlayerTryPurchase(state.alien, cost, action.payload.amount)) {\r\n        state.alien.bots.amount += action.payload.amount;\r\n      }\r\n    },\r\n    buyEnergy: (state, action: PayloadAction<{amount: number}>) => {\r\n      const cost = state.alien.difficulty.cost.market.resource.bots;\r\n      if (PlayerTryPurchase(state.alien, cost, action.payload.amount)) {\r\n        state.alien.energy.amount += action.payload.amount;\r\n      }\r\n    },\r\n    scrubHedons: (state) => {\r\n      const cost = state.alien.difficulty.cost.market.scrubHedons;\r\n      if (PlayerTryPurchase(state.alien, cost)) {\r\n        const old = state.alien.hedons.amount;\r\n        state.alien.hedons.amount = 0;\r\n      }\r\n    },\r\n    buyTrait: (state, action: PayloadAction<{l: MarketTraitListing}>) => {\r\n      if (PlayerTryPurchase(state.alien, action.payload.l.cost)) {\r\n        const existing = state.alien.beliefInventory.find((x) => x.trait === action.payload.l.trait);\r\n        if (existing) {\r\n          existing.charges += ChargePerMarket;\r\n        } else\r\n          state.alien.beliefInventory.push({trait: action.payload.l.trait, charges: ChargePerMarket});\r\n      }\r\n    },\r\n      beanBuy: (state, action: PayloadAction<{beanKey: number, good: TraitGood}>) =>{\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const getSeller = (l: IListing) => {\r\n          if (l.sellerEnterpriseKey != null)\r\n            return state.enterprises.byID[l.sellerEnterpriseKey];\r\n          else if (l.sellerBeanKey)\r\n            return state.beans.byID[l.sellerBeanKey];\r\n          else\r\n            return state.law;\r\n        }\r\n        let receipt: IMarketReceipt|undefined;\r\n        switch(action.payload.good){\r\n          case 'food':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'food', getSeller, 0.5, 3);\r\n            if (receipt?.bought) {\r\n                bean.discrete_food += receipt.bought;\r\n                if (bean.food === 'stuffed'){\r\n                    _emote(bean, state, {emote:'happiness', source: 'Stuffed'});\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Gluttony', 'happiness', 1);\r\n                }\r\n            }\r\n            break;\r\n          case 'shelter':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'shelter', getSeller);\r\n            if (receipt?.bought) {\r\n                bean.discrete_stamina = 10;\r\n                bean.stamina = 'awake';\r\n            } else if (bean.discrete_stamina <= 0){\r\n                bean.stamina = 'homeless';\r\n            }\r\n            break;\r\n          case 'medicine':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'medicine', getSeller, 0.5, 3);\r\n            if (receipt?.bought){\r\n                bean.discrete_health += receipt.bought;\r\n                if (bean.health === 'fresh')\r\n                    _emote(bean, state, {emote:'happiness', source: 'Robust'});\r\n            }\r\n            break;\r\n          case 'fun':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'fun', getSeller);\r\n            if (receipt?.bought) {\r\n                bean.discrete_fun = 1;\r\n                _emote(bean, state, {emote:'happiness', source:'Entertainment'});\r\n                _emote(bean, state, {emote:'happiness', source:'Entertainment'});\r\n            }\r\n            break;\r\n        }\r\n        bean.actionData.buyAttempts = (bean.actionData.buyAttempts || 0) + 1;\r\n        if (receipt){\r\n          if (receipt.tax){\r\n            _ifBelievesInMaybeEmote(state, bean, 'Libertarianism', 'unhappiness', LibertarianTaxUnhappyChance);\r\n            _ifBelievesInMaybeEmote(state, bean, 'Progressivism', 'happiness', ProgressivismTaxHappyChance);\r\n          }\r\n          bean.actionData.buyReceipt = receipt;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  function _ifBelievesInMaybeEmote(state: IWorldState, bean: IBean, source: TraitBelief, emote: TraitEmote, chance: number){\r\n    if (BeanBelievesIn(bean, source) && Math.random() < chance){\r\n      _emote(bean, state, {emote: emote, source: source});\r\n    }\r\n  }\r\n  function _emote(bean: IBean, state: IWorldState, payload: {emote: TraitEmote, source: string}){\r\n    bean.discrete_sanity = MathClamp(bean.discrete_sanity + EmotionSanity[payload.emote], 0, 10);\r\n    bean.hedonHistory[0][payload.source] = (bean.hedonHistory[0][payload.source] || 0) + EmotionWorth[payload.emote];\r\n    \r\n    const beanPosition = MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator;\r\n\r\n    const pickup: IPickup = {\r\n        key: state.pickups.nextID++,\r\n        point: {\r\n          x: beanPosition.point.x,\r\n          y: beanPosition.point.y\r\n        },\r\n        type: payload.emote,\r\n        velocity: {x: 0, y: 0}\r\n    };\r\n    state.cities.byID[bean.cityKey].pickupKeys.push(pickup.key);\r\n    state.pickups.byID[pickup.key] = pickup; \r\n    state.pickups.allIDs.push(pickup.key);\r\n    MoverStoreInstance.Get('pickup', pickup.key).publish({\r\n      point: {\r\n        x: beanPosition.point.x,\r\n        y: beanPosition.point.y\r\n      },\r\n      velocity: {x: 0, y: 0}\r\n    });\r\n  }\r\n  \r\n  export const { \r\n    refreshMarket, magnetChange, worldTick, \r\n    remove_ufo,\r\n    newGame, loadGame, build, changeEnterprise, fireBean, upgrade, beam,\r\n    abduct, release, scan, vaporize, pickUpPickup,\r\n    implant, washBelief, washNarrative, washCommunity, washMotive,\r\n    changeState, beanEmote, beanGiveCharity, beanHitDestination, beanWork, beanRelax, beanBuy, beanCrime,\r\n    beanBePersuaded, cheatAdd,\r\n    enactLaw, repealLaw, setResearch, buyBots, buyEnergy, buyTrait, scrubHedons\r\n  } = worldSlice.actions\r\n  \r\n  export const selectCityBeanIDs = (state: IWorldState, cityKey: number) => state.cities.byID[cityKey].beanKeys;\r\n  export const selectBeans = (state: IWorldState) => state.beans.byID;\r\n  export const selectBeansByCity = createSelector(\r\n    selectCityBeanIDs,\r\n    selectBeans,\r\n    (cityBeanIDs, beansByID) => cityBeanIDs.reduce((all, cityBeanKey) => {\r\n      all.push(beansByID[cityBeanKey])\r\n      return all;\r\n    }, [] as IBean[])\r\n  );\r\n  export const selectCity = (state: IWorldState, cityKey: number) => state.cities.byID[cityKey];\r\n  export const selectBuilding = (state: IWorldState, buildingKey: number) => state.buildings.byID[buildingKey];\r\n  export const selectCityBuildingByHex = (state: IWorldState, cityKey: number, hexKey: string) => {\r\n    const buildingKey = state.cities.byID[cityKey].buildingMap[hexKey];\r\n    if (buildingKey != null)\r\n      return selectBuilding(state, buildingKey);\r\n    else\r\n      return undefined;\r\n  }\r\n  export const selectBuildingKeysByCity = (state: IWorldState, cityKey: number) => {\r\n    return state.cities.byID[cityKey].buildingKeys;\r\n  }\r\n  export const selectBuildingsByCity = (state: IWorldState, cityKey: number) => {\r\n    return selectBuildingKeysByCity(state, cityKey).reduce((x: IBuilding[], id) => {\r\n      x.push(state.buildings.byID[id]);\r\n      return x;\r\n    }, [] as IBuilding[]);\r\n  }\r\n  \r\n  export const selectMajorityEthnicity = createSelector(selectBeansByCity, (cityBeans) => {\r\n    const c = cityBeans.reduce((count: {circle: number, square: number, triangle: number}, bean) => {\r\n        switch(bean.ethnicity){\r\n            case 'circle': count.circle++;break;\r\n            case 'square': count.square++;break;\r\n            case 'triangle': count.triangle++;break;\r\n        }\r\n        return count;\r\n    }, {circle: 0, square: 0, triangle: 0});\r\n    if (c.circle > c.square && c.circle > c.triangle){\r\n      return 'circle';\r\n    } else if (c.square > c.circle && c.square > c.triangle){\r\n      return 'square';\r\n    } else {\r\n      return 'triangle';\r\n    }\r\n  });\r\n  \r\n  export default worldSlice.reducer;\r\n  ","import { IEvent } from '../../events/Events'\r\nimport { DefaultDifficulty } from '../../Game'\r\nimport { IBean } from '../../simulation/Agent'\r\nimport { ICity } from '../../simulation/City'\r\nimport { IEconomy } from '../../simulation/Economy'\r\nimport { GenerateGeography, IBuilding } from '../../simulation/Geography'\r\nimport { IGovernment, ILaw, LawAxis } from '../../simulation/Government'\r\nimport { IEnterprise } from '../../simulation/Institutions'\r\nimport { MarketTraitListing } from '../../simulation/MarketTraits'\r\nimport { IPickup } from '../../simulation/Pickup'\r\nimport { IPlayerData } from '../../simulation/Player'\r\nimport { IDate, Season } from '../../simulation/Time'\r\nimport { IUFO } from '../../simulation/Ufo'\r\nimport { CreateEmptyEntitySlice, CreateEntitySlice, IEntitySlice } from '../entity.state'\r\n\r\nexport interface IWorldState {\r\n  buildings: IEntitySlice<IBuilding>,\r\n  enterprises: IEntitySlice<IEnterprise>,\r\n  cities: IEntitySlice<ICity>,\r\n  beans: IEntitySlice<IBean>,\r\n  ufos: IEntitySlice<IUFO>,\r\n  events: IEntitySlice<IEvent>,\r\n  pickups: IEntitySlice<IPickup>,\r\n  economy: IEconomy,\r\n  law: IGovernment,\r\n  marketTraitsForSale: MarketTraitListing[],\r\n  date: IDate,\r\n  alien: IPlayerData,\r\n  spotlightEvent: IEvent | undefined,\r\n  /**\r\n   * 1-based ID of save slot (1-3)\r\n   */\r\n  saveSlot: number\r\n}\r\n\r\nexport function GetBlankWorldState(): IWorldState{\r\n  return {\r\n    buildings: CreateEmptyEntitySlice<IBuilding>(),\r\n    enterprises: CreateEmptyEntitySlice<IEnterprise>(),\r\n    cities: CreateEntitySlice<ICity>([\r\n      {\r\n        ...GenerateGeography(),\r\n        key: 0,\r\n        name: 'string',\r\n        deadBeanKeys: [],\r\n        beanKeys: [],\r\n        ufoKeys: [],\r\n        pickupKeys: [],\r\n        buildingKeys: [],\r\n        pickupMagnetPoint: undefined,\r\n        costOfLiving: 0,\r\n        buildingMap: {}\r\n      }\r\n    ]),\r\n    beans: CreateEmptyEntitySlice<IBean>(),\r\n    ufos: CreateEmptyEntitySlice<IUFO>(),\r\n    events: CreateEmptyEntitySlice<IEvent>(),\r\n    pickups: CreateEmptyEntitySlice<IPickup>(),\r\n    economy: {\r\n      unfulfilledMonthlyDemand: { food: 0, shelter: 0, medicine: 0, fun: 0, },\r\n      monthlyDemand: { food: 0, shelter: 0, medicine: 0, fun: 0, },\r\n      monthlySupply: { food: 0, shelter: 0, medicine: 0, fun: 0, },\r\n      market: {\r\n        listings: {food: [], fun: [], medicine: [], shelter: []}\r\n      }\r\n    },\r\n    law: {\r\n      cash: 0,\r\n      lawTree: {} as {[key in LawAxis]: ILaw|undefined},\r\n      laws: [] as ILaw[],\r\n      ticksSinceLastSale: 0\r\n    },\r\n    date: {year: 1, season: Season.Spring, day: 1, hour: 1},\r\n    marketTraitsForSale: [],\r\n    alien: {\r\n      scanned_bean: {},\r\n      seenBeliefs: {},\r\n      beliefInventory: [],\r\n      speechcrimes: {},\r\n      abductedBeanKeys: [],\r\n      energy: { amount: 16, income: 2/30},\r\n      bots: { amount: 10, income: 2/30},\r\n      hedons: { amount: 0, income: 0},\r\n      // tortrons: { amount: 0, income: 0},\r\n      next_grade: { year: 1, season: 3, day: 1, hour: 0 },\r\n      difficulty: {...DefaultDifficulty},\r\n      goals: ['found_utopia', 'build_house_n_farm',  'beam_3', 'scan', 'brainwash', 'set_policy', 'c+_grade'],\r\n      goalProgress: {},\r\n      pastReportCards: [],\r\n      workingReportCard: {\r\n          Happiness: 'D',\r\n          Prosperity: 'D',\r\n          Stability: 'D',\r\n          Dogma: 'D',\r\n      },\r\n      techProgress: {},\r\n      currentlyResearchingTech: undefined\r\n    },\r\n    spotlightEvent: undefined,\r\n    saveSlot: 1\r\n  }\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './state'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { HexPoint } from \"../../simulation/Geography\"\r\n\r\nexport interface ISelectedSlice{\r\n    selectedCityKey: number|undefined;\r\n    selectedHexKey: string|undefined;\r\n    selectedBeanKey: number|undefined;\r\n    selectedBuildingKey: number|undefined;\r\n}\r\nexport const selectedSlice = createSlice({\r\n    name: 'selected',\r\n    initialState: {\r\n        selectedHexKey: undefined,\r\n        selectedCityKey: undefined,\r\n        selectedBeanKey: undefined\r\n    } as ISelectedSlice,\r\n    reducers: {\r\n      doSelectCity: (state, action: PayloadAction<{cityKey: number}>) => {\r\n        return {\r\n            selectedHexKey: undefined,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n      doSelectHex: (state, action: PayloadAction<{cityKey: number, hex: HexPoint}>) => {\r\n        return {\r\n            selectedHexKey: `${action.payload.hex.q},${action.payload.hex.r}`,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n      doSelectBuilding: (state, action: PayloadAction<{cityKey: number, hex: HexPoint, buildingKey: number}>) => {\r\n        return {\r\n            selectedHexKey: `${action.payload.hex.q},${action.payload.hex.r}`,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: action.payload.buildingKey\r\n        }\r\n      },\r\n      doSelectBean: (state, action: PayloadAction<{cityKey: number, beanKey: number}>) => {\r\n        return {\r\n            selectedHexKey: undefined,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: action.payload.beanKey,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n      doSelectNone: (state) => {\r\n        return {\r\n            selectedBeanKey: undefined, \r\n            selectedCityKey: undefined,\r\n            selectedHexKey: undefined,\r\n            selectedBuildingKey: undefined\r\n        }\r\n      },\r\n    }\r\n  })\r\n  \r\n  export const { doSelectHex, doSelectNone, doSelectBean, doSelectCity, doSelectBuilding  } = selectedSlice.actions;","import { combineReducers, configureStore, createSelector, getDefaultMiddleware, Middleware } from '@reduxjs/toolkit';\r\nimport { GameStorageInstance } from '../GameStorage';\r\nimport { ISelectedSlice, selectedSlice } from './features/selected.reducer';\r\nimport { IWorldState } from './features/world';\r\nimport { selectBeans, worldSlice } from './features/world.reducer';\r\n\r\n// export type RootState = ReturnType<typeof store.getState>;\r\nexport type RootState = {\r\n  world: IWorldState,\r\n  selected: ISelectedSlice\r\n};\r\nexport const autosaveSignalMiddleware: Middleware<\r\n  {}, // Most middleware do not modify the dispatch return value\r\n  RootState\r\n> = storeApi => next => action => {\r\n  \r\n  switch (action.type){\r\n    case 'world/magnetChange':\r\n      break;\r\n    default:\r\n      if (!action.type.startsWith('selected')){\r\n        GameStorageInstance.Dirty.publish(true);\r\n      }\r\n  }\r\n  \r\n  return next(action)\r\n}\r\nexport const store = configureStore({\r\n  reducer: {\r\n    world: worldSlice.reducer,\r\n    selected: selectedSlice.reducer\r\n  },\r\n  middleware: getDefaultMiddleware().concat([autosaveSignalMiddleware])\r\n})\r\n\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const selectBeanById = (state: RootState, beanKey: number) => state.world.beans.byID[beanKey];\r\nexport const selectCityById = (state: RootState, cityKey: number) => state.world.cities.byID[cityKey];\r\nexport const selectSelectedCity = (state: RootState) => {\r\n  return state.selected.selectedCityKey != null ? state.world.cities.byID[state.selected.selectedCityKey] : undefined;\r\n}\r\nexport const selectSelectedBean = (state: RootState) => {\r\n  return state.selected.selectedBeanKey != null ? state.world.beans.byID[state.selected.selectedBeanKey] : undefined;\r\n}\r\nexport const selectSelectedBuilding = (state: RootState) => {\r\n  const city = state.selected.selectedCityKey != null && state.world.cities.byID[state.selected.selectedCityKey];\r\n  if (city && state.selected.selectedHexKey != null)\r\n  {\r\n    const buildingID = city.buildingMap[state.selected.selectedHexKey];\r\n    return state.world.buildings.byID[buildingID];\r\n\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\nexport const selectEventIDs = (state: RootState) => {\r\n  return state.world.events.allIDs.map(y => state.world.events.byID[y]);\r\n};","import React from \"react\";\r\n\r\nexport class ConfirmButton extends React.Component<{\r\n    confirmText: string,\r\n    onConfirm: () => void,\r\n    disabled?: boolean,\r\n    className?: string\r\n}, {\r\n    confirming: boolean\r\n}> {\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            confirming: false\r\n        }\r\n    }\r\n    click(){\r\n        if (this.state.confirming){\r\n            this.props.onConfirm();\r\n            this.setState({confirming: false});\r\n        } else {\r\n            this.setState({confirming: true});\r\n        }\r\n    }\r\n    render(){\r\n        return <button className={this.props.className} onClick={() => this.click()} disabled={this.props.disabled}>\r\n            { this.state.confirming ? this.props.confirmText : this.props.children}\r\n        </button>\r\n    }\r\n}","import React, { ChangeEvent } from \"react\";\r\n\r\nexport interface StringDropdownPS{\r\n    options: Array<string>,\r\n    onChange: (key: any) => void,\r\n    hint?: string,\r\n    value?: any,\r\n    titleCase?: boolean\r\n}\r\ninterface StringDropdownS{\r\n    key: any;\r\n}\r\n\r\nexport class StringDropdown extends React.Component<StringDropdownPS, StringDropdownS> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            key: props.value || null\r\n        }\r\n    }\r\n    onChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        this.props.onChange(e.target.value);\r\n        this.setState({key: e.target.value})\r\n    }\r\n    hint(){\r\n        if (this.props.hint){\r\n            return <option value=\"\" disabled selected hidden>{this.props.hint}</option>\r\n        } \r\n        return undefined;\r\n    }\r\n    protected getTextForOption(data: string): string{\r\n        if (this.props.titleCase){\r\n            data = data[0].toUpperCase()+data.slice(1);\r\n        }\r\n        return data;\r\n    }\r\n    options(){\r\n        return this.props.options.map((str) => {\r\n            return <option value={str} key={str} title={this.getTitleForOption(str)}>\r\n                {this.getTextForOption(str)}\r\n            </option>\r\n        })\r\n    }\r\n    render(){\r\n        return <select onChange={this.onChange} value={this.state.key} required={this.props.hint != null}>\r\n            {this.hint()}\r\n            {this.options()}\r\n        </select>\r\n    }\r\n    protected getTitleForOption(data: string): string|undefined{\r\n        return undefined;\r\n    }\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport { BeliefsAll, IBeliefData, SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { StringDropdown } from \"../widgets/StringDropdown\";\r\nimport { TraitIcon } from \"../World\";\r\nimport './beliefs.css';\r\n\r\n\r\n\r\nexport const BeliefWidget: React.FC<{\r\n    data: IBeliefData,\r\n    cost?: number,\r\n    leftButton?: ReactElement,\r\n    titleView: ReactElement,\r\n    bottomView: ReactElement\r\n}> = (props) => {\r\n    return <div className=\"belief\">\r\n        <div className=\"horizontal badger\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {props.data.icon}\r\n                </div>\r\n                {\r\n                    props.leftButton\r\n                }\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">\r\n                    {\r\n                        props.titleView\r\n                    }\r\n                    {\r\n                        props.cost ? \r\n                        <span className=\"pull-r\">{props.cost}🧠</span>\r\n                        : null\r\n                    }\r\n                </div>\r\n                {\r\n                props.data.description ? props.data.description.split(';').map((x, i) => \r\n                    <small className=\"marg-b-6\" key={i}> {x}\r\n                    </small>\r\n                    ) : null\r\n                }\r\n                <div className=\"grow-1 text-center\">\r\n                    {\r\n                       props.bottomView\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport class EditBeliefInput extends React.Component<{\r\n    data: IBeliefData,\r\n    frozen?: boolean,\r\n    divergent?: boolean,\r\n    available: number,\r\n    cost: number,\r\n    wash: () => void\r\n}, {\r\n\r\n}>{\r\n\r\n    render(){\r\n        return <div className=\"belief\"><div className=\"horizontal badger\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {this.props.data.icon}\r\n                </div>\r\n                {\r\n                    this.props.frozen ? null : <ConfirmButton className=\"callout pad-4 marg-0\"\r\n                        confirmText={'-'+this.props.cost.toString()+'🧠?'} disabled={this.props.available < this.props.cost} onConfirm={this.props.wash}>\r\n                    🚿 <small>Wash</small>\r\n                    </ConfirmButton>\r\n                }\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">\r\n                    <strong title={this.props.data.description} className={this.props.divergent ? 'divergent marg-r-6': 'marg-r-6'}>\r\n                        {this.props.data.noun}\r\n                    </strong>\r\n                    <span className=\"pull-r\">{this.props.cost}🧠</span>\r\n                </div>\r\n                <small className=\"marg-b-6\">{this.props.data.description}</small>\r\n                <div className=\"grow-1 text-center\">\r\n                    {/* {\r\n                        RenderIdealBadges(this.props.data.idealPro || [], 'pos')\r\n                    }\r\n                    {\r\n                        RenderIdealBadges(this.props.data.idealCon || [], 'neg')\r\n                    }  */}\r\n                </div>\r\n            </div>\r\n        </div></div>\r\n    }\r\n}\r\n\r\nconst SortedBeliefs = BeliefsAll.slice().sort((a, b) => a.localeCompare(b));\r\nexport class AddBeliefInput extends React.Component<{\r\n    available: number,\r\n    cost: number,\r\n    add: (b: TraitBelief) => void\r\n}, {\r\n    belief: TraitBelief,\r\n}>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            belief: 'Neuroticism'\r\n        }\r\n    }\r\n    render(){\r\n        const data = SecondaryBeliefData[this.state.belief]\r\n        return <div className=\"belief\"><div className=\"horizontal badger add\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {data.icon}\r\n                </div>\r\n                <ConfirmButton className=\"callout grow-0 pad-4 marg-0\" disabled={this.props.available < this.props.cost} \r\n                    confirmText={'-'+this.props.cost.toString()+'🧠?'} onConfirm={() => this.props.add(this.state.belief)}>\r\n                    💉 <small>Implant</small>\r\n                </ConfirmButton>\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">                    \r\n                    <StringDropdown titleCase={true}\r\n                    options={SortedBeliefs} \r\n                    value={this.state.belief}\r\n                    onChange={(a: string) => {\r\n                        console.log(a);\r\n                        this.setState({belief: a as TraitBelief})\r\n                    }}\r\n                    ></StringDropdown>\r\n                    <span className=\"pull-r\">{this.props.cost}🧠</span>\r\n                </div>\r\n                <small className=\"marg-b-6\">{data.description}</small>\r\n                <div className=\"grow-1 text-center\">\r\n                    {\r\n                        (data.idealPro || []).map((x) => <span className=\"pos badge align-mid\" key={x}>+{TraitIcon[x]}</span>)\r\n                    }\r\n                    {\r\n                        (data.idealCon || []).map((x) => <span className=\"neg badge align-mid\" key={x}>-{TraitIcon[x]}</span>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div></div>\r\n    }\r\n}","import React from \"react\";\r\nimport { BeanBelievesIn } from \"../simulation/Bean\";\r\nimport { NarrativeBeliefData, SecondaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { HasResearched } from \"../simulation/Player\";\r\nimport { implant, washBelief, washNarrative } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean } from \"../state/state\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { EmoteIcon } from \"../World\";\r\nimport { BeliefWidget, EditBeliefInput } from \"./BeliefRow\";\r\nimport './modals.css';\r\n\r\nexport const TraitInventoryList: React.FC<{\r\n    dogmatic: boolean,\r\n    beanKey: number\r\n}> = (props) => {\r\n    const beliefInventory = useAppSelector(x => x.world.alien.beliefInventory);\r\n    const dispatch = useAppDispatch();\r\n    return <>\r\n        {beliefInventory.map((x) => <BeliefWidget \r\n        key={x.trait} data={SecondaryBeliefData[x.trait]} titleView={<strong>{SecondaryBeliefData[x.trait].noun}</strong>}\r\n        leftButton={\r\n            <ConfirmButton onConfirm={() => dispatch(implant({beanKey: props.beanKey, trait: x.trait}))} className=\"callout marg-0\" confirmText=\"-1 🧠?\" disabled={x.charges < 1 || props.dogmatic}>\r\n                Implant\r\n            </ConfirmButton>\r\n        }\r\n        bottomView={<span>{x.charges} 🧠</span>}>\r\n        </BeliefWidget>)}\r\n    </>\r\n};\r\n\r\nexport const BrainwashingContent: React.FC<{\r\n}> = () => {\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const isScanned = useAppSelector(s => bean?.key != null && s.world.alien.scanned_bean[bean.key]);\r\n    const difficulty = useAppSelector(s => s.world.alien.difficulty);\r\n    const techProgress = useAppSelector(s => s.world.alien.techProgress);\r\n    const dispatch = useAppDispatch();\r\n    const sanityCostBonus = HasResearched(techProgress, 'sanity_bonus') ? -1 : 0;\r\n    if (bean == null) return <div></div>;\r\n    const dogmatic = BeanBelievesIn(bean, 'Dogmatism');\r\n    return <div>\r\n        <div className=\"horizontal fancy-header\">\r\n            <div>\r\n                BRAIN\r\n            </div>\r\n            <div className=\"emoji-3\">\r\n            🧠🚿\r\n            </div>\r\n            <div>\r\n                WASH\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <p className=\"pad-4p\">\r\n                <strong>{bean.name}</strong> has {bean.discrete_sanity.toFixed(0)} sanity 🧠. \r\n                {\r\n                    bean.sanity === 'stressed' || bean.sanity === 'disturbed' ?\r\n                        <small className=\"pull-r\">(Low sanity 🧠 causes {EmoteIcon['unhappiness']}; Negative sanity 🧠 causes extremely negative traits)</small>\r\n                    : null\r\n                }\r\n            </p>\r\n            {\r\n                dogmatic ? <div className=\"text-center\">\r\n                    🐶 Dogmatic subjects cannot change their minds\r\n                </div> : null\r\n            }\r\n            { isScanned ? <div className=\"horizontal scroll\">\r\n                {/* <EditBeliefInput\r\n                    available={bean.discrete_sanity} frozen={dogmatic}\r\n                    wash={() => this.props.washCommunity(bean, bean.community)} \r\n                    cost={this.props.world.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0}\r\n                    data={PrimaryBeliefData[bean.community]}\r\n                ></EditBeliefInput>\r\n                <EditBeliefInput\r\n                    available={bean.discrete_sanity}  frozen={dogmatic}\r\n                    wash={() => this.props.washMotive(bean, bean.ideals)} \r\n                    cost={this.props.world.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0}\r\n                    data={PrimaryBeliefData[bean.ideals]}\r\n                ></EditBeliefInput> */}\r\n                <EditBeliefInput\r\n                    available={bean.discrete_sanity} frozen={dogmatic}\r\n                    wash={() => dispatch(washNarrative({beanKey: bean.key, faith:bean.faith}))} \r\n                    cost={difficulty.cost.bean_brain.brainwash_ideal.sanity || 0}\r\n                    data={NarrativeBeliefData[bean.faith]}\r\n                ></EditBeliefInput>\r\n                {/* IsBeliefDivergent(b, this.props.world.party.ideals, this.props.world.party.community) */}\r\n                {\r\n                    bean.beliefs.map((b) => <EditBeliefInput key={b}\r\n                    available={bean.discrete_sanity} frozen={dogmatic && b != 'Dogmatism'}\r\n                    divergent={false}\r\n                    wash={() => dispatch(washBelief({beanKey: bean.key, trait: b}))} \r\n                        cost={(difficulty.cost.bean_brain.brainwash_secondary.sanity || 0) + sanityCostBonus}\r\n                        data={SecondaryBeliefData[b]}\r\n                    >\r\n                    </EditBeliefInput>)\r\n                }\r\n                {/* {\r\n                    dogmatic ? null : <AddBeliefInput\r\n                        available={bean.discrete_sanity}\r\n                        add={(b) => this.props.implantBelief(bean, b)} \r\n                        cost={this.props.world.alien.difficulty.cost.bean_brain.brainimplant_secondary.sanity || 0}\r\n                    ></AddBeliefInput>\r\n                } */}\r\n            </div> : <div className=\"text-center\">🛰️ Scan this subject to reveal its Traits! </div>}\r\n            <h3 className=\"pad-4p\">\r\n                🧠 Trait Inventory\r\n            </h3>\r\n            <div className=\"horizontal scroll\">\r\n                <TraitInventoryList beanKey={bean.key}\r\n                    dogmatic={dogmatic}></TraitInventoryList>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport class CampaignsPanel extends React.Component<{\r\n\r\n}>{\r\n    render(){\r\n        return <div className=\"pad-4p\">\r\n        <div className=\"subheader\">\r\n            <h3>Propaganda</h3>\r\n            <button type=\"button\" className=\"callout\" onClick={() => void(0)} >🎙️ Buy Propaganda</button>\r\n        </div>\r\n        <span>\r\n          Propaganda changes beans' feelings on a wide variety of topics.\r\n        </span>\r\n        <div className=\"card-parent\">\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              📺 Broadcast Campaign\r\n            </span>\r\n            <small>Approval+ Cash-</small>\r\n            <span className=\"p\">\r\n              Small chance to increase Approval among all beans\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              👋 Canvassing\r\n            </span>\r\n            <small>Approval+ Labor-</small>\r\n            <span className=\"p\">\r\n              Chance to increase Approval on a few random beans\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              🗞️ Print Campaign\r\n            </span>\r\n            <small>Approval+ Cash-</small>\r\n            <span className=\"p\">\r\n              Chance to increase Approval on wealthy beans\r\n            </span>\r\n          </button>\r\n        </div>\r\n        <div className=\"subheader\">\r\n            <h3>Appearances</h3>\r\n            <button type=\"button\" className=\"callout\" onClick={() => void(0)} >💬 Schedule Appearance</button>\r\n        </div>\r\n        <span>\r\n          Appearances have limited reach, but have powerful effects.\r\n        </span>\r\n        <div className=\"card-parent\">\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n            🤔 Debating\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Chance to gain or lose Influence\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n            📸 Photo Op\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Increases Approval within one Social Group\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n              🎤 Speechmaking\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Increases chance of Donations in a single City\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"card button\">\r\n            <span className=\"h\">\r\n            🙋 Town Hall\r\n            </span>\r\n            <small>\r\n              Labor-\r\n            </small>\r\n            <span className=\"p\">\r\n              Suppresses negative Approval in a single city                     \r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    }\r\n}","import { BuildingTypes } from \"../simulation/Geography\";\r\nimport { Trait } from \"../World\";\r\n\r\nexport const keyToName: { [key in Trait | BuildingTypes]: string } = {\r\n    state: 'Collectivist', ego: 'Independent',\r\n    trad: 'Elitist', prog: 'Progressive',\r\n    circle: 'Brunette', square: 'Blonde', triangle: 'Redhead',\r\n    rocket: 'Futuristic', dragon: 'Mythical', music: 'Dramatic', noFaith: 'Nihilistic',\r\n    starving: 'Starving', hungry: 'Hungry', sated: 'Sated', stuffed: 'Stuffed',\r\n    homeless: 'Homeless', sleepy: 'Sleepy', awake: 'Awake', rested: 'Rested',\r\n    sick: 'Sick', sickly: 'Sickly', bruised: 'Bruised', fresh: 'Robust',\r\n    sane: 'Sane', stressed: 'Confused', disturbed: 'Disturbed', 'psychotic': 'Psychotic',\r\n    house: 'House', hospital: 'Hospital', farm: 'Farm', theater: 'Theater', church: 'Church', courthouse: 'Courthouse', park: 'Park', nature: 'Elysian Scenery'\r\n  };","import React from \"react\";\r\nimport { Bean } from \"../simulation/Bean\";\r\nimport { Trait } from \"../World\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { IBean } from \"../simulation/Agent\";\r\n\r\nexport class NeedReadout extends React.Component<{\r\n    beans: IBean[], \r\n    need: (b: IBean) => Trait, \r\n    dire: Trait, \r\n    abundant: Trait,\r\n    className?: string}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    header(){\r\n        if (this.props.children){\r\n            return <b>{this.props.children}</b>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    render(){\r\n        const dire = this.props.beans.filter(b => this.props.need(b) == this.props.dire).length;\r\n        const dire_style = {\r\n            width: Math.floor((dire / this.props.beans.length)*100)+'%'\r\n        }\r\n        const full = this.props.beans.filter(b => this.props.need(b) == this.props.abundant).length;\r\n        const full_style = {\r\n            width: Math.floor((full / this.props.beans.length)*100)+'%'\r\n        }\r\n        return (                \r\n        <div className={this.props.className}>\r\n            {this.header()}\r\n            {/* <span>{keyToName[this.props.report.winner]}</span> */}\r\n            <div className=\"bar\">\r\n                <div className=\"bar-inner dire\" style={dire_style}>\r\n                    {(dire > 0 ? `${dire} ${keyToName[this.props.dire]}`: '')}\r\n                </div>\r\n                <div className=\"bar-inner abundant\" style={full_style}>\r\n                    {full > 0 ? full : ''}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","\r\nimport React from \"react\";\r\nimport { TraitJob } from \"../World\";\r\nimport { NeedReadout } from \"../widgets/NeedReadout\";\r\nimport { GetCostOfLiving, IListing } from \"../simulation/Economy\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { selectBeansByCity } from \"../state/features/world.reducer\";\r\n\r\nfunction median(values: Array<number>){\r\n  if(values.length ===0) return 0;\r\n\r\n  values.sort(function(a,b){\r\n    return a-b;\r\n  });\r\n\r\n  var half = Math.floor(values.length / 2);\r\n\r\n  if (values.length % 2)\r\n    return values[half];\r\n\r\n  return (values[half - 1] + values[half]) / 2.0;\r\n}\r\n\r\nexport const EconomyReport: React.FC<{}> = () => {\r\n    const beans = useAppSelector(s => selectBeansByCity(s.world, 0));\r\n    const economy = useAppSelector(s => s.world.economy);\r\n    const food_median = median(beans.map(x => x.discrete_food));\r\n    const health_median = median(beans.map(x => x.discrete_health)).toFixed(1);\r\n    const shelter_median = median(beans.map(x => x.discrete_stamina)).toFixed(1);\r\n    const wealth_total = beans.reduce((sum, y) => sum + y.cash, 0);\r\n    const wealth_avg = wealth_total / (beans.length || 1);\r\n    const wealth_median = median(beans.map(x => x.cash));\r\n    const wealth_dire = beans.filter(x => x.cash < 1).length;\r\n    const wealth_marker = Math.max(wealth_avg, wealth_median);\r\n    const wealthy = beans.filter(x => x.cash > wealth_marker);\r\n    const wealthy_percentage = (wealthy.length / (beans.length || 1)) * 100;\r\n    const wealthy_ownership = (wealthy.reduce((s, x) => s+x.cash, 0) / wealth_total)*100;\r\n    const jobs = beans.reduce((obj, b) => {\r\n      obj[b.job] = (obj[b.job] || 0)+1;\r\n      return obj;\r\n    }, {} as {[key in TraitJob]: number});\r\n    const unemployed = (((jobs.jobless || 0) / beans.length)*100).toFixed(1);\r\n    function reducer(obj:  {supply: number, price: number, avg: number, count: number}, l: IListing){\r\n      obj.supply += l.quantity;\r\n      obj.price += l.price;\r\n      obj.count++;\r\n      obj.avg = obj.price / obj.count;\r\n      return obj;\r\n    }\r\n    const food = economy.market.listings['food'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    const meds = economy.market.listings['medicine'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    const houses = economy.market.listings['shelter'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    return (\r\n      <div>\r\n        <div className=\"pad-4p\">\r\n          <h2>State of the Utopia</h2>\r\n        </div>\r\n        {/* <div className=\"pad-4p\">\r\n          <h3>Subject's Health</h3>\r\n        </div> */}\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>🍞 Food Security</strong>\r\n            <NeedReadout beans={beans} need={(b) => b.food} dire=\"hungry\" abundant=\"stuffed\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {food_median.toFixed(1)} 🍞</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {food.supply} 🍞 @ ${food.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.food} 🍞\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div>\r\n            <strong>🩺 Healthcare</strong>\r\n            <NeedReadout beans={beans} need={(b) => b.health} dire=\"sick\" abundant=\"fresh\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {health_median} 🩺</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {meds.supply} 🩺 @ ${meds.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.medicine} 🩺\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>🏡 Housing</strong> <br/>\r\n            <NeedReadout beans={beans} need={(b) => b.stamina} dire=\"homeless\" abundant=\"rested\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {shelter_median} 🏡</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {houses.supply} 🏡 @ ${houses.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.shelter} 🏡\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"pad-4p\">\r\n          <h3>Economic Health</h3>\r\n        </div> */}\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>💰 Wealth</strong> <br/>\r\n            {wealth_dire} penniless citizens &nbsp; &nbsp; Cost of Living: ${GetCostOfLiving(economy).toFixed(2)} <br/>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Total ${wealth_total.toFixed(2)}</td>\r\n                  <td className=\"text-center\">\r\n                    Median: ${wealth_median.toFixed(2)} \r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Avg: ${wealth_avg.toFixed(2)}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            Top {wealthy_percentage.toFixed(1)}% of subjects own {wealthy_ownership.toFixed(1)}% of the wealth\r\n          </div>\r\n          <span>\r\n            <strong>Unemployment</strong> {unemployed}% ({jobs.jobless})<br/>\r\n            <ul className=\"boxes\">\r\n              <li>{jobs.farmer || 0} farmers</li>\r\n              <li>{jobs.builder || 0} builders</li>\r\n              <li>{jobs.doc || 0} doctors</li>\r\n              <li>{jobs.entertainer || 0} entertainers</li>\r\n            </ul>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }","import React from 'react';\r\n\r\nexport const EscapeMenu: React.FC<{}> = (props) => {\r\n    return <div>\r\n        \r\n    </div>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Live } from \"../events/Events\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nexport const TreasuryReport: React.FC<{\r\n\r\n}> = (props) => {\r\n    const coin = useAppSelector(s => s.world.law.cash);\r\n\r\n    return <div className=\"pad-4p\">\r\n        <div>\r\n            <strong>💰 Treasury: {coin.toFixed(2)}</strong>\r\n        </div>\r\n    </div>\r\n}","import React, { useState } from \"react\";\r\nimport { SecondaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { IsLaw, LawData, LawGroup, LawKey, PlayerCanSeePrereqs, PlayerKnowsPrereq, PlayerMeetsPrereqs, PrereqKey, PrereqString } from \"../simulation/Government\";\r\nimport { BeliefInventory } from \"../simulation/Player\";\r\nimport { enactLaw, repealLaw } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { TreasuryReport } from \"../widgets/TreasuryReport\";\r\n\r\nexport const GovernmentPanel: React.FC<{\r\n}> = (props) => {\r\n    const [view, setView] = useState<LawGroup|'funds'>('Welfare');\r\n    return <div>\r\n        <div className=\"col-2\">\r\n            <h2 className=\"marg-b-0\">Utopia Government</h2>\r\n            <div>\r\n                <div className=\"horizontal blue-orange cylinder f-size-125em marg-t-20\">\r\n                    <button type=\"button\" onClick={() => setView('Welfare')} className={view === 'Welfare' ? 'active' : ''}>\r\n                        🤲 Welfare\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('Crime')} className={view === 'Crime' ? 'active' : ''}>\r\n                        🚨 Crime\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('Taxation')} className={view === 'Taxation' ? 'active' : ''}>\r\n                        💰 Taxes\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('funds')} className={view === 'funds' ? 'active' : ''}>\r\n                        💸 Funds\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {\r\n            view === 'funds' ? <div className=\"col-2\">\r\n                <div>\r\n                    <TreasuryReport></TreasuryReport>\r\n                </div>\r\n                <div>\r\n                </div>\r\n            </div> : <LawDetailList \r\n                group={view}\r\n            ></LawDetailList>\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\nexport const LawDetailList: React.FC<{\r\n    group: LawGroup\r\n}> = (props) => {\r\n    const laws = Object.values(LawData).filter(x => x.group === props.group);\r\n    const seenBeliefs = useAppSelector(s => s.world.alien.seenBeliefs);\r\n    const beliefs = useAppSelector(s => s.world.alien.beliefInventory);\r\n    const law = useAppSelector(s => s.world.law);\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"pad-4p\">\r\n        <strong>{props.group} Laws</strong>\r\n        <div className=\"horizontal scroll\">\r\n        {\r\n            laws.map((x) => <LawFormula seenBeliefs={seenBeliefs} id={x.key} beliefs={beliefs} key={x.key} enacted={IsLaw(law, x.key)}\r\n                enactLaw={(lKey) => dispatch(enactLaw({lawKey: lKey}))} revokeLaw={(l) => dispatch(repealLaw({lawKey: l}))}>\r\n            </LawFormula>)\r\n        }\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport const LawFormula: React.FC<{\r\n    id: LawKey,\r\n    seenBeliefs: {[belief: string]: boolean},\r\n    beliefs: BeliefInventory[],\r\n    enacted: boolean,\r\n    enactLaw: (l: LawKey) => void\r\n    revokeLaw: (l: LawKey) => void\r\n}> = (props) => {\r\n    const law = LawData[props.id];\r\n    const canSeeName = PlayerCanSeePrereqs(law.prereqs, props.seenBeliefs);\r\n    const unlocked = PlayerMeetsPrereqs(law.prereqs, props.seenBeliefs);\r\n    return <div className=\"vertical law-formula\">\r\n        <div className=\"horizontal\">\r\n            <div className=\"circular\">\r\n                {canSeeName ? law.icon : '❔'}\r\n            </div>\r\n            <div>\r\n                <strong>\r\n                    {canSeeName ? law.name : 'Unknown'}\r\n                </strong>\r\n                <div>\r\n                    {\r\n                        canSeeName ? <small> {law.description} </small> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"vertical\">\r\n            {\r\n                law.prereqs.map((x) => {\r\n                    const has = PlayerKnowsPrereq(x, props.seenBeliefs);\r\n                    const key = PrereqKey(x);\r\n                    return !has ? <span className=\"law-formula-ingredient unknown\" key={key}>\r\n                        ❔ Unknown\r\n                    </span> : <span className=\"law-formula-ingredient\" key={key}>\r\n                        {PrereqString(x)}\r\n                    </span>\r\n                })\r\n            }\r\n        </div>\r\n        {\r\n            props.enacted ? <button className=\"callout\"  onClick={() => props.revokeLaw(props.id)}>\r\n                🗑️&nbsp;Revoke Active Law\r\n            </button> : <button className=\"callout\" disabled={!unlocked} onClick={() => props.enactLaw(props.id)}>\r\n                {\r\n                    unlocked ? '✒️' : <span className=\"grey\">🔒</span>\r\n                }\r\n                &nbsp;Enact\r\n            </button>\r\n        }\r\n        {props.children}\r\n    </div>;\r\n}","import React from 'react';\r\nimport { EmoteIcon } from '../World';\r\n\r\nexport const GreetingPanel: React.FC = (props) => {\r\n    return <div>\r\n        <div className=\"col-2\">\r\n            <div>\r\n                <h3>Welcome to the</h3>\r\n                <h2>👽 Alien 🌍 Utopia 🔬 Laboratory</h2>\r\n                <div>\r\n                    Thank you for joining the <select><option>Human</option></select> Cultivation Division of the <strong>🌌 Galactic Xenosensation Federation!</strong> Your interdimensional petri dish is ready for farming.\r\n                </div>\r\n                <p>\r\n                    As a <select><option>Human Emotion Farmer</option></select>, you are required to execute the following duties:\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        Construct <strong>🏠 Buildings</strong> for your <select><option>Human</option></select> subjects.\r\n                    </li>\r\n                    <li>\r\n                        <strong>🛸 Beam In</strong> <select><option>Human</option></select> subjects for cultivation.\r\n                    </li>\r\n                    <li>\r\n                        Harvest your subject's positive <strong>{EmoteIcon['happiness']} Hedons</strong>.\r\n                    </li>\r\n                    <li>\r\n                        Sell the Hedons on the <br/><strong>🌌 Galactic 😨 Emotion 💰 Market</strong>.\r\n                    </li>\r\n                </ul>\r\n                <div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <p>\r\n                    The GXF's records indicate <select><option>Humans</option></select> are a<br/><u>mentally malleable</u> and <u>physically fragile</u> species. Try the following cultivation methods:\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        <strong>🛰️ Scan</strong> your subject's primitive minds for information on what pleases them.\r\n                    </li>\r\n                    <li>\r\n                        <strong>🚿 Brainwash</strong> subjects to change their <strong>🧠&nbsp;Traits</strong>. Try to add Traits that emit more <strong>{EmoteIcon['happiness']}&nbsp;Hedons</strong>.\r\n                    </li>\r\n                    <li>\r\n                        Avoid letting your subjects die or endure pain; this makes <strong>{EmoteIcon['unhappiness']}&nbsp;Antihedons</strong> which are less profitable.\r\n                    </li>\r\n                    <li>\r\n                        Use your knowledge of Traits to modify the farm's <strong>🗳️&nbsp;Government</strong> to maximize Hedon generation.\r\n                    </li>\r\n                    <li>\r\n                        Use the GXF's <strong>🧪 Research Lab</strong> to upgrade your farm, when stocked with <strong>👾 Abducted</strong> subjects.\r\n                    </li>\r\n                </ul>\r\n                <h3>\r\n                    🌌 Galactic Xenosensation Federation <br/>\r\n                    <div className=\"text-right\">\r\n                        <small>\r\n                        {/* <i>THE market leader in corporeal sensations.</i> */}\r\n                        <i>1 trillion sensations. 100% organic. 100% gourmet.</i>\r\n                        </small>\r\n                    </div>\r\n                </h3>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nexport const LoadGameMenu: React.FC<{}> = (props) => {\r\n    return <div>\r\n        \r\n    </div>\r\n}","import React, { useState } from 'react';\r\nimport { GameStorageInstance } from '../GameStorage';\r\n\r\nexport const MainMenu: React.FC<{\r\n    startGame: () => void,\r\n    loadGame: (slot:number) => void\r\n}> = (props) => {\r\n    const [view, setView] = useState<'main'|'showslots'>('main');\r\n    const continueID = GameStorageInstance.HasContinueGame();\r\n    const slots = GameStorageInstance.GetGameSlots();\r\n    return <div>\r\n        <h1 className=\"text-center\">👽 Alien 🌍 Utopia 🔬 Lab</h1>\r\n        {\r\n            (view === 'main') ? <div>\r\n                {\r\n                    continueID != null ? <div className=\"text-center\">\r\n                        <button className=\"callout button f-size-15em\" onClick={() => props.loadGame(continueID)}>\r\n                        🧫 Continue Game\r\n                        </button>\r\n                    </div>: null\r\n                }\r\n                <div className=\"text-center\">\r\n                    <button className=\"callout button f-size-15em\" onClick={() => props.startGame()}>\r\n                    🛸 Start New Game\r\n                    </button>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <button className=\"callout button f-size-15em\" onClick={() => setView('showslots')} disabled={slots.every(x => x.brief == null)}>\r\n                    🗂️ Load Game\r\n                    </button>\r\n                </div>\r\n            </div> : <div className=\"card-parent vertical load-menu pad-4p\">\r\n                {\r\n                    slots.map(x => <div key={x.id} className=\"card marg-b-20\">\r\n                        <button disabled={x.brief == null} className=\"\" onClick={() => {\r\n                            if (x.brief)\r\n                                props.loadGame(x.id);\r\n                        }}>\r\n                        {\r\n                            x.brief ? <span className=\"f-size-125em\">\r\n                                <strong>{x.brief.Name}</strong>\r\n                                &nbsp;<span>Year {x.brief.Age.year}</span>\r\n                                &nbsp;<span>{x.brief.Population} 😐</span>\r\n                            </span> : <span className=\"f-size-125em\">\r\n                                Slot {x.id}\r\n                            </span> \r\n                        }\r\n                        </button>\r\n                    </div>)\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport class RobotArm extends React.Component<{\r\n    tool: string,\r\n    classN: string\r\n}, {\r\n\r\n}> {\r\n    render(){\r\n        const style = {};\r\n        return <svg width=\"100\" height=\"300\" xmlns=\"http://www.w3.org/2000/svg\" style={style} className={this.props.classN+\" robot-arm\"}>\r\n        <g>\r\n         <title>robotarm</title>\r\n         <rect fill=\"transparent\" id=\"canvas_background\" height=\"302\" width=\"102\" y=\"-1\" x=\"-1\"/>\r\n         <g display=\"none\" overflow=\"visible\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" id=\"canvasGrid\">\r\n          <rect fill=\"url(#gridpattern)\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\"/>\r\n         </g>\r\n        </g>\r\n        <g>\r\n         <title>Layer 1</title>\r\n         <rect id=\"svg_2\" height=\"200\" width=\"48\" y=\"91.63545\" x=\"25\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#BBBBBB\"/>\r\n         <ellipse ry=\"48\" rx=\"48\" id=\"svg_1\" cy=\"50\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#999999\"/>\r\n         <ellipse ry=\"20\" rx=\"20\" id=\"svg_3\" cy=\"50\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#444444\"/>\r\n         <ellipse ry=\"48\" rx=\"48\" id=\"svg_4\" cy=\"250\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#999999\"/>\r\n        <ellipse ry=\"20\" rx=\"20\" id=\"svg_5\" cy=\"250\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#444444\">{this.props.tool}</ellipse>\r\n            \r\n        </g><text y=\"250\" x=\"-20\" fontSize=\"4em\">{this.props.tool}</text>\r\n       </svg>\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { IPlayerData, IPlayerTechProgress, ITechInfo, Tech, TechData, TechProgress } from \"../simulation/Player\";\r\nimport { release, setResearch } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { RobotArm } from \"../widgets/RobotArm\";\r\nimport './research.css';\r\n\r\nfunction renderTech(tech: ITechInfo, techProgress: TechProgress, currentlyResearchingTech: Tech|undefined, setResearch: (t: Tech) => void){\r\n  const unstarted = techProgress[tech.tech] == null;\r\n  const progress = unstarted ? 0 : techProgress[tech.tech].researchPoints;\r\n  const total = tech.techPoints;\r\n  const style = {width: (Math.min(progress/total*100, 100))+'%'};\r\n  const complete = progress >= total;\r\n  const isCurrent = currentlyResearchingTech === tech.tech;\r\n  const state: '⭕️'|'✅'|'🔬' = complete ? '✅' : isCurrent ? '🔬' : '⭕️';\r\n  const rootClassName = isCurrent ? 'active': 'inactive';\r\n  return <div className={\"card-parent \"+rootClassName} key={tech.tech}>\r\n    <button className=\"card button\" onClick={() => setResearch(tech.tech)}>\r\n      <strong>{tech.name}</strong>\r\n      <strong className=\"pull-r f-size-125em\">{state}</strong>\r\n      <div>\r\n        {tech.description}\r\n      </div>      \r\n      <div className=\"bar f-size-12 h-12\">\r\n          <div className=\"bar-inner text-center\" style={style}>\r\n          </div>\r\n          {progress}/{total} tech\r\n      </div>\r\n    </button>\r\n  </div>\r\n}\r\n\r\nconst tools = [\r\n'📡',\r\n'🗜️',\r\n'🔬',\r\n'💉',\r\n'🔎',\r\n'🧼',\r\n'🧲',\r\n'🎥',\r\n'🔧',\r\n];\r\nfunction loop(lastI: number){\r\n  let i = lastI + 1;\r\n  if (i === tools.length)\r\n    i = 0;\r\n  return i;\r\n}\r\nexport const ResearchPanel: React.FC<{}> = () => {\r\n  const abductedBeanKeys = useAppSelector(x => x.world.alien.abductedBeanKeys);\r\n  const techProgress = useAppSelector(x => x.world.alien.techProgress);\r\n  const currentTech = useAppSelector(x => x.world.alien.currentlyResearchingTech);\r\n  const dispatch = useAppDispatch();\r\n  const [tool1, setTool1] = useState(0);\r\n  const [tool2, setTool2] = useState(3);\r\n  const [tool3, setTool3] = useState(2);\r\n  const [tool4, setTool4] = useState(1);\r\n  useEffect(() => {\r\n    const interval = window.setInterval(() => {\r\n      if (Math.random() < .51)\r\n        setTool1(loop(tool1));\r\n      if (Math.random() < .51)\r\n        setTool2(loop(tool2));\r\n      if (Math.random() < .51)\r\n        setTool3(loop(tool3));\r\n      if (Math.random() < .51)\r\n        setTool4(loop(tool4));\r\n    }, 1000);\r\n    return () => {\r\n      window.clearInterval(interval);\r\n    }\r\n  });\r\n  const techs = Object.values(TechData);\r\n  return <div>\r\n      <div className=\"col-2\">\r\n        <div>\r\n          <h2>Research 🧪 Lab</h2>\r\n          <div className=\"vertical\">\r\n            {\r\n              techs.map((t) => renderTech(t, techProgress, currentTech, (t) => dispatch(setResearch({t: t}))))\r\n            }\r\n          </div>\r\n        </div>\r\n      <div className=\"vertical\">\r\n        <div>\r\n          <div className=\"robot\">\r\n            🤖\r\n            <RobotArm classN=\"far-left\" tool={tools[tool1]}></RobotArm>\r\n            <RobotArm classN=\"left\" tool={tools[tool2]}></RobotArm>\r\n            <RobotArm classN=\"near-right\" tool={tools[tool3]}></RobotArm>\r\n            <RobotArm classN=\"far-right\" tool={tools[tool4]}></RobotArm>\r\n          </div>\r\n        </div>\r\n        <div className=\"h-42em\">\r\n          {\r\n            abductedBeanKeys.map((b) => {\r\n              return <span key={b} className=\"victim bean triangle shake\">😨</span>\r\n            })\r\n          }\r\n        </div>\r\n\r\n        <div className=\"text-center\">\r\n          Currently probing {abductedBeanKeys.length} beings for {abductedBeanKeys.length} tech a day\r\n          <p>\r\n            <small>1 tech per research subject per day</small>\r\n          </p>\r\n        </div>\r\n        {\r\n          abductedBeanKeys.length > 0 ? <div className=\"text-right\">\r\n            <ConfirmButton className=\"callout\" onConfirm={() => {dispatch(release())}} confirmText=\"-1 Research Subject?\">\r\n            🎈 Release Research Subject\r\n            </ConfirmButton>\r\n          </div> : null\r\n        }\r\n      </div>\r\n    </div>\r\n    <div>\r\n\r\n    </div>\r\n  </div>\r\n}","import { Bean } from \"../simulation/Bean\";\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport { BeliefsAll, IBeliefData, SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { BeliefWidget } from \"./BeliefRow\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\nexport const TraitsReport: React.FC = () => {\r\n  const beliefInventory = useAppSelector(x => x.world.alien.beliefInventory);\r\n  const seenBeliefs = useAppSelector(x => x.world.alien.seenBeliefs);\r\n  const [hoveredBelief, setHoveredBelief] = useState<TraitBelief>();\r\n  const beliefs: IBeliefData[] = [];\r\n  Object.keys(seenBeliefs).forEach((key) => {\r\n    if (SecondaryBeliefData[key as TraitBelief] != null){\r\n      beliefs.push(SecondaryBeliefData[key as TraitBelief]);\r\n    }\r\n  });\r\n  beliefs.sort((a, b) => a.noun.localeCompare(b.noun));\r\n  return (\r\n    <div className=\"vertical\">\r\n      <div className=\"pad-4p\">\r\n        <h2>Subject 🧠 Traits</h2>\r\n      </div>\r\n      <div className=\"col-2-30-60\">\r\n        <div>\r\n          <div className=\"scroll\">\r\n            <div className=\"scoll-sticky-h\">\r\n              <strong>Trait Inventory</strong>\r\n            </div>\r\n            {\r\n              beliefInventory.length < 1 ? <div>\r\n                No Traits! <br/>\r\n                😵 Brainwash your subjects  <br/>\r\n                or buy from the 🛍️ Market\r\n                </div> : beliefInventory.map((x) => <div key={x.trait}>\r\n                      <div>\r\n                        <strong>\r\n                          {SecondaryBeliefData[x.trait].icon} {SecondaryBeliefData[x.trait].noun}\r\n                        </strong>\r\n                      </div>\r\n                      <div>\r\n                        This can be implanted {x.charges} more times\r\n                      </div>\r\n                    </div>)\r\n            }\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"modal-scroll-v\">\r\n            <div className=\"sticky-t-0\">\r\n              <strong>Discovered {beliefs.length} of {BeliefsAll.length} Traits</strong>\r\n            </div>\r\n            {\r\n              beliefs.length < 1 ? <div>\r\n                No Traits! <br/>\r\n                🛰️ Scan some of your subjects.\r\n              </div> : beliefs.map((x) => <BeliefWidget key={x.noun} data={x} cost={0}\r\n              titleView={<strong>{x.noun}</strong>}\r\n              bottomView={<span></span>}\r\n            ></BeliefWidget>)\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { BeanGetFace, BeanGetSpeech } from \"../simulation/Bean\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { RootState } from \"../state/state\";\r\nimport { GoodIcon } from \"../World\";\r\n\r\ninterface AnimatedBeanP {\r\n  cityKey: number;\r\n  beanKey: number;\r\n  sitStill?: boolean;\r\n  static?: boolean;\r\n}\r\n\r\nfunction BeanIsBuying(bean: IBean){\r\n  return bean.actionData.act == 'buy' && bean.actionData.good != 'shelter';\r\n}\r\n\r\nexport const selectBeanAnimation = (state: RootState, beanKey: number) => {\r\n  const bean = state.world.beans.byID[beanKey];\r\n  const working = bean.actionData.act === 'work';\r\n  return {\r\n    speech: BeanGetSpeech(bean),\r\n    face: BeanGetFace(bean),\r\n    good: BeanIsBuying(bean) ? GoodIcon[bean.actionData.good || 'food'] : undefined,\r\n    classes: [bean.job, bean.ethnicity, bean.actionData.act != 'travel' || bean.lifecycle === 'dead' ? 'paused' : '', ].join(' '),\r\n    animationClasses: ['bean-walker', working ? 'spin' : '', ].join(' ')\r\n  }\r\n}\r\n\r\nexport const AnimatedBean: React.FC<AnimatedBeanP> = (props) => {\r\n  const state = useAppSelector(st => selectBeanAnimation(st, props.beanKey));\r\n  const isSelected = useAppSelector(st => st.selected.selectedBeanKey === props.beanKey);\r\n  const classes = ['bean interactable', state.classes, props.sitStill ? '' : state.animationClasses, isSelected ? 'selected' : ''].join(' ');\r\n\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <span className={classes}\r\n      onClick={(e) => {e.stopPropagation(); dispatch(doSelectBean({cityKey: props.cityKey, beanKey: props.beanKey})) }}\r\n    >\r\n      {state.face} {state.good ? <span className=\"purchase\">\r\n        <span className=\"money\">💸</span>\r\n        <span className=\"purchase-good\">{state.good}</span>\r\n      </span>: null} {state.speech ? <span className=\"speech\">\r\n        <span className=\"\">{state.speech}</span>\r\n      </span>: null}\r\n    </span>\r\n  )\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { SfxContext } from \"../App\";\r\nimport { UFO, City, Pickup } from \"../simulation/City\";\r\nimport { transformPoint, hex_to_pixel } from \"../simulation/Geography\";\r\nimport { IPickup } from \"../simulation/Pickup\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { EmoteIcon } from \"../World\";\r\n\r\nexport const AnimatedPickup: React.FC<{\r\n    pickupKey: number\r\n}> = (props) => {\r\n    const [played, setPlayed] = useState(false);\r\n    const pickup = useAppSelector(state => state.world.pickups.byID[props.pickupKey]);\r\n    const sfx = React.useContext(SfxContext);\r\n    useEffect(() => {\r\n        if (!played && sfx){\r\n            sfx.play('drop');\r\n            setPlayed(true);\r\n        }\r\n    })\r\n    return <span className=\"pickup bob\">\r\n        {EmoteIcon[pickup.type]}\r\n    </span>\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { MoverContext } from \"../App\";\r\nimport { LiveList } from \"../events/Events\";\r\nimport { Pickup } from \"../simulation/City\";\r\nimport { IAccelerator } from \"../simulation/Geography\";\r\nimport { MoverType } from \"../simulation/MoverBus\";\r\nimport { selectCityBeanIDs } from \"../state/features/world.reducer\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { AnimatedBean } from \"./AnimatedBean\";\r\nimport { AnimatedPickup } from \"./AnimatedPickup\";\r\n\r\nexport const Mover: React.FC<{\r\n    moverType: MoverType,\r\n    moverKey: number,\r\n}> = (props) => {\r\n    const mover = React.useContext(MoverContext);\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const onMove = (p: IAccelerator) => {\r\n        if (el.current && p)\r\n            el.current.style.transform = `translate(${p.point.x}px, ${p.point.y}px)`;\r\n    }\r\n    useEffect(() => {\r\n        const pubsub = mover.Get(props.moverType, props.moverKey);\r\n        pubsub.subscribe(onMove);\r\n        if (pubsub.current)\r\n            onMove(pubsub.current);\r\n        return () => mover.Get(props.moverType, props.moverKey).unsubscribe(onMove)\r\n    }, []);\r\n    return <div ref={el}>\r\n        {props.children}\r\n    </div>\r\n}\r\n\r\nexport const PetriBeanList: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const beanKeys = useAppSelector(state => selectCityBeanIDs(state.world, props.cityKey));\r\n    return <>\r\n        {\r\n            beanKeys.map((beanKey: number) => {\r\n                return <Mover moverKey={beanKey} key={beanKey} moverType='bean'>\r\n                    <AnimatedBean cityKey={props.cityKey} beanKey={beanKey}></AnimatedBean>\r\n                </Mover>\r\n            })\r\n        }\r\n    </>;\r\n}\r\n\r\n\r\nexport const PickupList2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const list = useAppSelector(state => state.world.cities.byID[props.cityKey].pickupKeys);\r\n    return <>\r\n        {\r\n            list.map((pKey: number) => {\r\n                return <Mover moverKey={pKey} key={pKey} moverType='pickup'>\r\n                    <AnimatedPickup pickupKey={pKey}></AnimatedPickup>\r\n                </Mover>\r\n            })\r\n        }\r\n    </>;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { City, ICity } from \"../simulation/City\";\r\nimport { CityBook, HexPoint, hex_to_pixel, IBuilding, Point, transformPoint } from \"../simulation/Geography\";\r\nimport { doSelectBuilding, doSelectHex } from \"../state/features/selected.reducer\";\r\nimport { magnetChange, selectBuildingsByCity, selectCity, selectCityBuildingByHex } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { PetriBuilding, UIBuilding } from \"./Building\";\r\nimport { hex_style } from \"./WorldTile\";\r\n\r\n/**\r\n * redux building selector\r\n * @param props \r\n * @returns \r\n */\r\nexport const HexPetriBuilding2: React.FC<{\r\n    cityKey: number,\r\n    hex: HexPoint\r\n}> = (props) => {\r\n    const building = useAppSelector(state => selectCityBuildingByHex(state.world, props.cityKey, `${props.hex.q},${props.hex.r}`));\r\n    const city = useAppSelector(state => selectCity(state.world, props.cityKey));\r\n    if (building)\r\n        return <PetriBuilding city={city} building={building}></PetriBuilding>\r\n    else return null;\r\n}\r\n\r\nexport const PetriHex: React.FC<{\r\n    cityKey: number,\r\n    buildingKey: number|undefined,\r\n    hex: HexPoint,\r\n    hexString: string,\r\n    xy: Point,\r\n    i: number\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const selected = useAppSelector(state => state.selected.selectedHexKey === props.hexString);\r\n    const extraClasses = selected ? 'hex-selected' : ''; \r\n    return <div className={\"hex \"+extraClasses}\r\n        key={props.i}\r\n        style={{ ...hex_style, ...transformPoint(props.xy) }}\r\n        onMouseEnter={(e) => { dispatch(magnetChange({cityKey: props.cityKey, px: props.xy})) }}\r\n        onClick={(e) => {\r\n            if (props.buildingKey != null)\r\n                dispatch(doSelectBuilding({cityKey: props.cityKey, buildingKey: props.buildingKey, hex: props.hex}));\r\n            else \r\n                dispatch(doSelectHex({cityKey: props.cityKey, hex: props.hex})); \r\n            e.stopPropagation(); \r\n            return false; }}>\r\n            {props.children}\r\n    </div>\r\n\r\n}\r\n\r\nexport const PetriHexes2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n    const hexes = useAppSelector(state => state.world.cities.byID[props.cityKey]?.hexes);\r\n    return <>{hexes.map((hex, i) => {\r\n        const xy = hex_to_pixel(city.hex_size, city.petriOrigin, hex);\r\n        const hexStr = hex.q+','+hex.r;\r\n        const buildingKey: number|undefined = city.buildingMap[hexStr];\r\n        return <PetriHex i={i} hex={hex} xy={xy} hexString={hexStr} cityKey={props.cityKey} buildingKey={buildingKey}>\r\n            <HexPetriBuilding2 cityKey={props.cityKey} hex={hex}></HexPetriBuilding2>\r\n        </PetriHex>\r\n    })}</>\r\n}\r\nexport const SocialBuildings: React.FC<{\r\n    city: ICity,\r\n    onClickBuilding: (b: IBuilding) => void;\r\n}> = (props) => {\r\n    const buildings = useAppSelector(state => selectBuildingsByCity(state.world, props.city.key));\r\n    return <>\r\n        {\r\n            buildings.map((x) => <div key={x.key} className=\"building-node\" onClick={() => props.onClickBuilding(x)}>\r\n                <UIBuilding cityName={props.city.name} building={x} style={{}} getStyle={() => {return{}}}></UIBuilding>\r\n            </div> )\r\n        }\r\n    </>\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Live } from \"../events/Events\";\r\nimport { HexPoint, Point } from \"../simulation/Geography\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nexport const Magnet: React.FC<{\r\n    pickupMagnetPoint: Live<Point|undefined>\r\n}> = (props) => {\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const [point, setPoint] = useState(props.pickupMagnetPoint.get);\r\n    const updatePoint = (p: Point|undefined) => {\r\n        setPoint(p);\r\n        if (el.current && p)\r\n            el.current.style.transform = `translate(${p.x}px, ${p.y}px)`;\r\n    }\r\n    useEffect(() => {\r\n        props.pickupMagnetPoint.onChange.subscribe(updatePoint);\r\n        updatePoint(props.pickupMagnetPoint.get);\r\n        return () => props.pickupMagnetPoint.onChange.unsubscribe(updatePoint)\r\n    });\r\n\r\n    if (point){\r\n        return <div className=\"magnet\" ref={el}>🧲</div>\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const Magnet2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const magnetPoint = useAppSelector(state => state.world.cities.byID[props.cityKey].pickupMagnetPoint);\r\n\r\n    if (magnetPoint){\r\n        return <div className=\"magnet\" style={{transform: `translate(${magnetPoint.x}px, ${magnetPoint.y}px)`}}>🧲</div>\r\n    } else {\r\n        return null;\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { City, UFO } from \"../simulation/City\";\r\nimport { hex_to_pixel, origin_point, transformPoint } from \"../simulation/Geography\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nexport const AnimatedUFO2:  React.FC<{\r\n    ufoKey: number,\r\n    cityKey: number\r\n}> = (props) => {\r\n    const [showBeam, setShowBeam] = useState(false);\r\n    const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n    const ufo = useAppSelector(state => state.world.ufos.byID[props.ufoKey]);\r\n    setTimeout(() => {\r\n        setShowBeam(true);\r\n        setTimeout(() => {\r\n            setShowBeam(false)\r\n        }, 1800);\r\n    }, 1800);\r\n    let style = {\r\n        ...transformPoint(hex_to_pixel(city.hex_size, city.petriOrigin, ufo.point))\r\n    };\r\n    return <span style={style} className=\"ufo\">\r\n        🛸\r\n        {showBeam ? <span className=\"beam\"></span> : null}\r\n    </span>\r\n}","import { ITile } from \"../World\";\r\nimport { Bean } from \"../simulation/Bean\";\r\nimport { AnimatedBean } from \"./AnimatedBean\";\r\nimport React from \"react\";\r\nimport { IBuilding, BuildingIcon, BuildingTypes, hex_to_pixel, MatterTypes, PolarPoint, polarToPoint, transformPoint, HexPoint, Point, HexSizeR } from \"../simulation/Geography\";\r\nimport { PetriBuilding } from \"./Building\";\r\nimport { PI2 } from \"../WorldGen\";\r\nimport { City, Pickup, UFO } from \"../simulation/City\";\r\nimport { AnimatedUFO } from \"./AnimatedUFO\";\r\nimport { IEvent } from \"../events/Events\";\r\nimport { AnimatedSpotlight } from \"./AnimatedSpotlight\";\r\nimport { PetriBeanList, PickupList2 } from \"./Mover\";\r\nimport { PetriHexes2 } from \"./Buildings\";\r\nimport { Magnet, Magnet2 } from \"./Magnet\";\r\nimport { magnetChange } from \"../state/features/world.reducer\";\r\nimport { useAppSelector, useAppDispatch } from \"../state/hooks\";\r\nimport { AnimatedUFO2 } from \"./AnimatedUFO2\";\r\n\r\nexport const hex_style = {\r\n  width: HexSizeR + 'px', \r\n  height: HexSizeR + 'px', \r\n  top: (-HexSizeR/2)+'px',\r\n  left: (-HexSizeR/2)+'px'\r\n}\r\n\r\ninterface WorldTilePs {\r\n  // tileKey: number;\r\n  cityKey: number;\r\n  onClick: () => void;\r\n}\r\nexport const WorldTile2: React.FC<WorldTilePs> = (props) => {\r\n\r\n  // const tile = useAppSelector(state => state.world.tiles.byID[props.tileKey]);\r\n  const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n  const ufos = useAppSelector(state => state.world.cities.byID[props.cityKey].ufoKeys);\r\n  const spotlight = useAppSelector(state => state.world.spotlightEvent);\r\n  const spotlightBean = useAppSelector(state => {\r\n    if (state.world.spotlightEvent && state.world.spotlightEvent.beanKey)\r\n      return state.world.beans.byID[state.world.spotlightEvent.beanKey];\r\n    return undefined;\r\n  });\r\n\r\n  const dispatch = useAppDispatch()\r\n  const mtn_transforms: { transform: string }[] = [];\r\n\r\n  const mtnRadius = city.petriRadius - 20;\r\n  for (let i = 0; i < 360 / 5; i++) {\r\n    const az = i * 5 * Math.PI / 180;\r\n    const pt = polarToPoint({ r: mtnRadius, az: az });\r\n    pt.x += city.petriRadius; pt.y += city.petriRadius;\r\n    mtn_transforms.push(transformPoint(pt));\r\n  }\r\n  const deaths = city.deadBeanKeys.map((bk: number, i) => {\r\n    return (\r\n      <span key={i} className=\"dead\" style={{ left: (i * 10) + 'px' }}>⚰️</span>\r\n    )\r\n  });\r\n  const style = {\r\n    height: (city.petriRadius * 2) + 'px',\r\n    width: (city.petriRadius * 2) + 'px',\r\n  }\r\n  return (\r\n    <div className=\"tile\" onClick={() => props.onClick()} onMouseLeave={() => { dispatch(magnetChange({ cityKey: city.key })) }} style={style}>\r\n      <svg style={{ width: '100%', height: '100%' }} className=\"petri-base\">\r\n        <circle cx=\"50%\" cy=\"50%\" r=\"50%\" stroke=\"grey\" fill=\"rgba(255, 255, 255, 1)\" />\r\n      </svg>\r\n      <PetriHexes2 cityKey={city.key}></PetriHexes2>\r\n      {mtn_transforms.map((x, i) => {\r\n        return <span key={i} style={x} className=\"mtn\">⛰️</span>\r\n      })}\r\n      <PickupList2 cityKey={props.cityKey}></PickupList2>\r\n      <PetriBeanList cityKey={props.cityKey}></PetriBeanList>\r\n      {ufos.map((uK: number, i: number) => {\r\n        return <AnimatedUFO2 ufoKey={uK} key={uK} cityKey={city.key}></AnimatedUFO2>\r\n      })}\r\n      <Magnet2 cityKey={props.cityKey}></Magnet2>\r\n      <svg style={{ width: '100%', height: '100%' }} className=\"petri-lid\">\r\n        <circle cx=\"50%\" cy=\"50%\" r=\"50%\" stroke=\"grey\" fill=\"rgba(255, 255, 255, 0.2)\" />\r\n      </svg>\r\n      {/* {\r\n        (spotlight && spotlightBean && spotlight.point) ? <AnimatedSpotlight event={spotlight} bean={bean}></AnimatedSpotlight>: null\r\n      } */}\r\n    </div>\r\n  )\r\n}","import { ReactComponent } from \"*.svg\";\r\nimport React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { Bean } from \"../simulation/Bean\";\r\nimport { NarrativeBeliefData, PrimaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { Trait, TraitIcon } from \"../World\";\r\n\r\nexport class CardButton extends React.Component<{\r\n    icon: string,\r\n    name: string,\r\n    onClick?: () => void,\r\n    title?: string,\r\n    subtext?: string,\r\n    thin?: boolean,\r\n    singleLine?: boolean,\r\n    disabled?: boolean\r\n}>{\r\n    render(){\r\n        let classes = \"card button\";\r\n        if (this.props.thin) classes += ' thin';\r\n        if (this.props.singleLine) classes += ' single';\r\n        return <button className={classes} title={this.props.title} onClick={() => {\r\n            if (this.props.onClick) this.props.onClick()\r\n        }} type=\"button\" disabled={this.props.disabled}>\r\n            {this.props.icon} {this.props.name}\r\n            {\r\n                (this.props.subtext != null) ? <small>{this.props.subtext}</small> : null\r\n            }\r\n        </button>\r\n    }\r\n}\r\n\r\nexport function TraitToCard(bean: IBean, trait: Trait, onClick?: () => void){\r\n    switch(trait){\r\n        case 'trad':\r\n        case 'prog':\r\n        case 'ego':\r\n        case 'state':\r\n            return <CardButton icon={TraitIcon[trait]} title={PrimaryBeliefData[trait].description} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        case 'fresh':\r\n        case 'sick':\r\n        case 'hungry':\r\n        case 'starving':\r\n        case 'stuffed':\r\n        case 'homeless':\r\n        case 'rested':\r\n        case 'circle':\r\n        case 'square':\r\n        case 'triangle':\r\n        case 'sane':\r\n        case 'disturbed':\r\n        case 'stressed':\r\n            return <CardButton icon={TraitIcon[trait]} title={keyToName[trait]} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        case 'noFaith':\r\n        case 'rocket':\r\n        case 'dragon':\r\n        case 'music':\r\n            return <CardButton icon={TraitIcon[trait]} title={NarrativeBeliefData[trait].description} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        default:\r\n            return null;\r\n    }\r\n} ","import React from \"react\";\r\nimport { PlayerResources, triadToString } from \"../Game\";\r\n\r\nexport class CostSmall extends React.Component<{\r\n    cost: PlayerResources,\r\n    rider?: string,\r\n    qty?: number\r\n}>{\r\n\r\n    render(){\r\n        return <small>\r\n            {triadToString(this.props.cost, '-', this.props.qty)} {this.props.rider}\r\n        </small>\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { Act, ActivityDisplay, ActivityIcon, GetPriorities, IBean } from \"../simulation/Agent\";\r\nimport { BeanGetFace } from \"../simulation/Bean\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { IPlayerData, PlayerCanAfford } from \"../simulation/Player\";\r\nimport { doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { abduct, scan, vaporize } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean, selectSelectedCity } from \"../state/state\";\r\nimport { CardButton, TraitToCard } from \"../widgets/CardButton\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { EmoteIcon, IHappinessModifier, TraitIcon } from \"../World\";\r\nimport './BeanPanel.css';\r\n\r\n\r\ninterface BeanPanelP{\r\n    city: ICity,\r\n    bean: IBean,\r\n    alien: IPlayerData;\r\n    brainwash: () => void;\r\n}\r\nfunction happyTable(mods: IHappinessModifier[]){\r\n    return mods.filter((y) => y.mod != 0).map((x, i) => {\r\n        return <tr key={i}>\r\n            <td className=\"small text-right\">{x.reason}</td>\r\n            <td className=\"small\">{Math.round(x.mod * 100)}%</td>\r\n        </tr>\r\n    });\r\n}\r\nfunction hedonTable(bean: IBean){\r\n    return Object.keys(bean.happiness.all).map((x, i) => {\r\n        return <tr key={i}>\r\n            <td className=\"small text-right\">{bean.happiness.all[x]} {bean.happiness.all[x] >= 0 ? EmoteIcon['happiness'] : EmoteIcon['unhappiness']} from </td>\r\n            <td className=\"small\">{x}</td>\r\n        </tr>\r\n    });\r\n}\r\nfunction actDurations(bean: IBean){\r\n    const acts = Object.keys(bean.activity_duration).map((x) => x as Act);\r\n    acts.sort((a, b) => bean.activity_duration[b] - bean.activity_duration[a]);\r\n    return acts;\r\n}\r\nfunction beliefTable(beliefs: TraitBelief[]): React.ReactNode {\r\n    return beliefs.map((b, i) => {\r\n        const classes = 'belief-name shadow text-left '+SecondaryBeliefData[b].rarity;\r\n        return <table className=\"width-100p\" key={b+i}><tbody><tr>\r\n        <th className={classes}>\r\n            {SecondaryBeliefData[b].icon} {SecondaryBeliefData[b].adj}\r\n        </th>\r\n        <td className=\"text-right\">\r\n            {(SecondaryBeliefData[b].idealPro || []).map(y => <span key={y}>+{TraitIcon[y]}</span>)}\r\n            {(SecondaryBeliefData[b].idealCon || []).map(y => <span key={y}>-{TraitIcon[y]}</span>)}\r\n        </td>\r\n    </tr><tr><td className=\"small text-center\" colSpan={2}>{\r\n        SecondaryBeliefData[b].description ? SecondaryBeliefData[b].description?.split(';').map((x, i) => <div key={i}>{x}</div>) : null\r\n    }</td></tr></tbody></table>});\r\n}\r\nfunction renderInner(scanned: boolean, innerView: string, bean: IBean, city: ICity, alien: IPlayerData){\r\n    if (!scanned){\r\n        return <div className=\"width-100p text-center\">\r\n            <small>\r\n                Subject needs a Scan to reveal their thoughts\r\n            </small>\r\n        </div>\r\n    }\r\n    switch(innerView){\r\n        case 'beliefs':\r\n            return scanned ? beliefTable(bean.beliefs) : null\r\n        case 'feelings':\r\n            return <table className=\"width-100p\"><tbody>\r\n                {scanned ? hedonTable(bean) : null}\r\n                </tbody>\r\n            </table>\r\n        default:\r\n        case 'priorities':\r\n            return <table className=\"width-100p\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            Currently {ActivityDisplay(bean.actionData)}\r\n                        </td>\r\n                    </tr>\r\n                    {\r\n                        GetPriorities(bean, city, alien.difficulty).values.map((x) => {\r\n                            return <tr key={`p-${x.value.act}-${x.value.good}`}>\r\n                                <td>\r\n                                {x.priority.toFixed(1)} {ActivityIcon(x.value)}\r\n                                </td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                    {\r\n                        actDurations(bean).filter((x) => bean.activity_duration[x] > 0).map((x) => {\r\n                            const act = x as Act;\r\n                            return <tr key={act}>\r\n                                <td>{x}</td>\r\n                                <td>\r\n                                    {\r\n                                        (bean.activity_duration[act] / 1000).toFixed(1)\r\n                                    }s\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n    }\r\n}\r\nfunction renderTraits(scanned: boolean, bean: IBean, alien: IPlayerData, brainwash: () => void, scan: () => void){\r\n    if (scanned){\r\n        return <div>\r\n            <div className=\"card-parent\">\r\n                {TraitToCard(bean, bean.ethnicity, undefined)}\r\n                {TraitToCard(bean, bean.faith, brainwash)}\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                {\r\n                    bean.beliefs.map((b) => <CardButton key={b} icon={SecondaryBeliefData[b].icon} title={SecondaryBeliefData[b].adj} name='' thin={true} singleLine={true} onClick={() => {}}></CardButton>)\r\n                }\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                {TraitToCard(bean, bean.food, undefined)}\r\n                {TraitToCard(bean, bean.stamina, undefined)}\r\n                {TraitToCard(bean, bean.health, undefined)}\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <div className=\"card-parent\">\r\n            <CardButton icon=\"🛰️\" name=\"Scan\" subtext=\"-Energy +Info\" onClick={scan} disabled={!PlayerCanAfford(alien, alien.difficulty.cost.bean.scan)}></CardButton>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport const BeanPanel: React.FC<BeanPanelP> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const [faceOverride, setFaceOverride] = useState<string|undefined>(undefined);\r\n    const [innerView, setInnerView] = useState<'priorities'|'feelings'|'beliefs'>('beliefs');\r\n    const alien = useAppSelector(state => state.world.alien);\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const city = useAppSelector(selectSelectedCity);\r\n    function _resetFace(){\r\n        setTimeout(() => {\r\n            setFaceOverride(undefined);\r\n        }, 5000);\r\n    }\r\n    if (!bean || !city) \r\n        return null;\r\n    const classes = bean.job + ' ' + bean.ethnicity;\r\n    return (                \r\n    <div className=\"vertical bean-panel\">\r\n        <div className=\"bean-panel-header\">\r\n            <div>\r\n                <b>{bean.name}&nbsp;\r\n                {\r\n                    city ? <small> of {city.name} </small>\r\n                    : null\r\n                }\r\n                </b>\r\n                <button type=\"button\" className=\"pull-r\" onClick={() => {\r\n                    dispatch(doSelectNone())\r\n                }} >❌</button>\r\n            </div>\r\n            <div className=\"bean-view\">                \r\n                <span className={classes+\" bean\"}>\r\n                    {\r\n                        faceOverride === undefined ? BeanGetFace(bean) : faceOverride\r\n                    }\r\n                </span>\r\n            </div>\r\n            <div className=\"horizontal\">\r\n                <span className=\"text-center\">\r\n                    💰 ${bean.cash.toFixed(2)}\r\n                </span>\r\n                <span className=\"text-center\">\r\n                    🙂 {Math.round(bean.lastHappiness)}%\r\n                </span>\r\n                <span className=\"text-center\">\r\n                    {Math.round(bean.happiness.flatAverage)} {EmoteIcon['happiness']} /day\r\n                </span>\r\n            </div>\r\n            {renderTraits(alien.scanned_bean[bean.key], bean, alien, () => {\r\n                dispatch(brainwash())\r\n            }, () => {\r\n                dispatch(scan({beanKey: bean.key}));\r\n                setFaceOverride('😨');\r\n                _resetFace();\r\n            })}\r\n        </div>\r\n        <div className=\"grow-1 pad-4 bean-panel-content\">\r\n            <div className=\"cylinder blue-orange horizontal\">\r\n                <button type=\"button\" className={innerView=='beliefs'?'active':''} onClick={()=>setInnerView('beliefs')}>\r\n                    😇 Traits\r\n                </button>\r\n                <button type=\"button\" className={innerView=='feelings'?'active':''} onClick={()=>setInnerView('feelings')}>\r\n                    😐 Feelings\r\n                </button>\r\n                <button type=\"button\" className={innerView=='priorities'?'active':''} onClick={()=>setInnerView('priorities')}>\r\n                    💪 Priorities\r\n                </button>\r\n            </div>\r\n            {renderInner(alien.scanned_bean[bean.key], innerView, bean, city, alien)}\r\n        </div>\r\n        <div className=\"bean-action-card-parent\">\r\n            <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\" onClick={() => {\r\n                    props.brainwash()\r\n                }}\r\n                    title=\"Rewrite one of this being's traits\"\r\n                >😵 Brainwash\r\n                    <small>-Sanity +-Trait</small>\r\n                </button>\r\n            </div>\r\n            {/* <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\"  onClick={() => brainwash()}  disabled={true}\r\n                    title=\"Give this being food or meds or cash\">\r\n                    🎁 Gift\r\n                    <small>-Energy +Things</small>\r\n                </button>\r\n            </div> */}\r\n            <div className=\"card-parent\">\r\n                {/* <button type=\"button\" className=\"button card\" onClick={scan} disabled={true}\r\n                    title=\"Steal a bit of this being's mind\">\r\n                    🤪 Braindrain\r\n                    <small>-Energy -Sanity</small>\r\n                </button> */}\r\n                <button type=\"button\" className=\"button card\" onClick={() => {\r\n                    dispatch(vaporize({beanKey: bean.key}));\r\n                    setFaceOverride('😨');\r\n                    _resetFace();\r\n                }}\r\n                    disabled={!PlayerCanAfford(alien, alien.difficulty.cost.bean.vaporize)}\r\n                    title=\"Delete this being from the experiment\"\r\n                >\r\n                    ☠️ Vaporize\r\n                    <CostSmall cost={alien.difficulty.cost.bean.vaporize}></CostSmall>\r\n                </button>\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\"\r\n                    disabled={!PlayerCanAfford(alien, alien.difficulty.cost.bean.abduct)}\r\n                    onClick={() => dispatch(abduct({beanKey: bean.key}))}\r\n                    title=\"Remove this being for study\"\r\n                >\r\n                    👾 Abduct for Research\r\n                    <CostSmall cost={alien.difficulty.cost.bean.abduct} rider=\"+Tech\"></CostSmall>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nfunction brainwash(): any {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n","import React from 'react';\r\n\r\nexport const Subtabs: React.FC<{\r\n    additionalClasses?: string,\r\n    active: string,\r\n    options: {icon: string, value: string, text: string, onClick: () => void}[]    \r\n}> = (props) => {\r\n\r\n    return <div className={'horizontal blue-orange cylinder f-size-125em marg-t-20'+(props.additionalClasses||'')}>\r\n        {\r\n            props.options.map((x) => <button type=\"button\" key={x.value} onClick={() => x.onClick()}  className={props.active === x.value ? 'active': ''}>\r\n                {x.icon} {x.text}\r\n            </button>)\r\n        }\r\n    </div>\r\n}","import { ISeller, Economy } from \"./Economy\";\r\nimport { TraitGood, GoodToJob } from \"../World\";\r\nimport { Policy } from \"./Politics\";\r\nimport { Government } from \"./Government\";\r\n\r\nexport type EnterpriseType = 'company'|'co-op'|'commune';\r\nexport const EnterpriseTypes: EnterpriseType[] = ['company','co-op','commune'];\r\nexport const EnterpriseTypeIcon: {[e in EnterpriseType]: string} = {\r\n    'company': '🎩', \r\n    'co-op': '🤝', \r\n    'commune': '⚒️'\r\n};\r\n\r\nexport interface IEnterprise extends ISeller{\r\n    key: number;\r\n    cityKey: number;\r\n    enterpriseType: EnterpriseType;\r\n    ownerBeanKey?: number;\r\n}\r\n\r\nexport interface IInstitution{\r\n    key: number;\r\n    playerKey: number;\r\n    name: string;\r\n\r\n    organizations: IOrganization[];\r\n}\r\n\r\nexport interface IOrganization extends ISeller{\r\n    work(law: Government, economy: Economy): void;\r\n    key: number;\r\n    institutionKey: number;\r\n    seasonalBudget: number;\r\n    parentInstitution: IInstitution|null;\r\n    cash: number;\r\n}\r\n\r\nexport class Charity implements IOrganization, ISeller{\r\n    key = 0;\r\n    name: string = '';\r\n    institutionKey = 1;\r\n    cash = 0;\r\n    ticksSinceLastSale = 0;\r\n    seasonalBudget = 0;\r\n    good: TraitGood = 'food';\r\n    parentInstitution: IInstitution|null = null;\r\n    beansHelped: number = 0;\r\n    inventory: number = 0;\r\n    \r\n    work(law: Government, economy: Economy): void{\r\n        while(this.cash > 0 && this.inventory < 10) {\r\n            const groceries = economy.tryTransact(this, this.good);\r\n            if (groceries){\r\n                //economy.addCharity(this, this.good, groceries.bought);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n} ","import React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { Subtabs } from \"../chrome/Subtab\";\r\nimport { IDifficulty } from \"../Game\";\r\nimport { City, ICity } from \"../simulation/City\";\r\nimport { BuildingIcon, BuildingJobIcon, BuildingToGood, BuildingTypes, HexPoint, IBuilding } from \"../simulation/Geography\";\r\nimport { EnterpriseType, EnterpriseTypeIcon, EnterpriseTypes, IEnterprise } from \"../simulation/Institutions\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { BuildingOpenSlots, BuildingUsedSlots } from \"../simulation/RealEstate\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState, selectSelectedBuilding, selectSelectedCity } from \"../state/state\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { beam, build, changeEnterprise, fireBean, selectCity, upgrade } from \"../state/features/world.reducer\";\r\nimport { doSelectCity, doSelectHex, doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { BuildingJobSlot } from \"../simulation/Occupation\";\r\nimport { GoodIcon, TraitGood } from \"../World\";\r\n\r\nexport const BeamButton: React.FC<{\r\n    city: number,\r\n    hex: string,\r\n    difficulty: IDifficulty\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"card-parent\">\r\n    <button className=\"card button\" type=\"button\" onClick={() => dispatch(beam({cityKey: props.city, where: HexStringToHex(props.hex)}))}>\r\n        🛸 Beam In New Subject\r\n        <CostSmall cost={props.difficulty.cost.hex.beam} rider=\"+Subject\"></CostSmall>\r\n    </button>\r\n</div>\r\n}\r\n\r\nexport const HexPanel: React.FC<{\r\n    difficulty: IDifficulty\r\n}> = (props) => {\r\n    const hex = useSelector((state: RootState) => state.selected.selectedHexKey);\r\n    const building = useSelector(selectSelectedBuilding);\r\n    const city = useSelector(selectSelectedCity);\r\n    const dispatch = useAppDispatch();\r\n    if (city && building){\r\n        return <HexBuildingPanel building={building} city={city} difficulty={props.difficulty}></HexBuildingPanel>\r\n    } else if (city && hex){\r\n        const eHex = props.difficulty.cost.emptyHex;\r\n        return <div>\r\n        <div>\r\n            <strong>Empty Lot</strong> in <strong>{city.name}</strong>\r\n            <button type=\"button\" className=\"pull-r\" onClick={() => dispatch(doSelectCity({cityKey: city.key}))} >❌</button>\r\n        </div>\r\n        {/* <div>\r\n            {hex.q}x\r\n            {hex.r}\r\n        </div> */}\r\n        <h3>Build:</h3>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'house'}))}>\r\n                {BuildingIcon['house']} House\r\n                <CostSmall cost={eHex.build.house}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'farm'}))}>\r\n                {BuildingIcon['farm']} Farm\r\n                <CostSmall cost={eHex.build.farm}></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'hospital'}))}>\r\n                {BuildingIcon['hospital']} Hospital\r\n                <CostSmall cost={eHex.build.hospital}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'theater'}))}>\r\n                {BuildingIcon['theater']} Theater\r\n                <CostSmall cost={eHex.build.theater}></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: city.key, where: HexStringToHex(hex), what: 'park'}))}>\r\n                {BuildingIcon['park']} Park\r\n                <CostSmall cost={eHex.build.park}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <h3>Beings:</h3>\r\n        <BeamButton difficulty={props.difficulty} hex={hex} city={city.key}></BeamButton>\r\n    </div>\r\n    } else {\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nexport const HexBuildingPanel: React.FC<{\r\n    building: IBuilding,\r\n    difficulty: IDifficulty,\r\n    city: ICity\r\n}> = (props) => {\r\n    const b = props.building;\r\n    const e = useAppSelector(s => b.enterpriseKey != null ? s.world.enterprises.byID[b.enterpriseKey]: undefined);\r\n    const dispatch = useAppDispatch();\r\n    const free = BuildingOpenSlots(b);\r\n    const hasJobs = b.type != 'park' && b.type != 'nature';\r\n    const hex = `${b.address.q},${b.address.r}`;\r\n    return <div>\r\n        <div>\r\n            <strong>{b.upgraded && hasJobs ? 'Dense ': 'Small '}{keyToName[b.type]}</strong>\r\n            <button type=\"button\" className=\"pull-r\" onClick={() => dispatch(doSelectNone())}>❌</button>\r\n        </div>\r\n        <div className=\"text-right\">\r\n            <small>\r\n            in&nbsp;<strong>{props.city.name}</strong>\r\n            </small>\r\n        </div>\r\n    {\r\n        e != null ? <div>\r\n            <small>\r\n                ${e.cash?.toFixed(2)} from sales today\r\n            </small>\r\n            <EnterpriseListings enterpriseKey={e.key} good={BuildingToGood[b.type]}></EnterpriseListings>\r\n        </div> : null\r\n    }\r\n    {\r\n        b.upgraded && hasJobs ? <div>\r\n            {renderDensityWarning(b.type)}\r\n        </div> : null\r\n    }\r\n    {\r\n        e != null ?  <EnterpriseTypePicker \r\n            enter={e} \r\n            changeEnterprise={(t) => dispatch(changeEnterprise({enterpriseKey: b.key, newType: t}))}>\r\n            </EnterpriseTypePicker> : null\r\n    }\r\n    {\r\n        <WorkerList cityKey={props.city.key} building={b}></WorkerList>\r\n    }\r\n    {\r\n        !hasJobs ? null : <div>\r\n            This {keyToName[b.type]} can support {free.length} more jobs.\r\n            {\r\n                b.upgraded ? null : <span><br/>Upgrade it to add 3 more job slots.</span>\r\n            }\r\n        </div>\r\n    }\r\n    {\r\n        b.upgraded || !hasJobs ? null : <div><div className=\"card-parent\">\r\n                <button className=\"card button\" type=\"button\" onClick={() => dispatch(upgrade({buildingKey: b.key}))}>\r\n                    🛠️ Upgrade\r\n                    <CostSmall cost={props.difficulty.cost.hex.upgrade}></CostSmall>\r\n                </button>\r\n            </div>\r\n            {renderDensityWarning(b.type)}\r\n        </div>\r\n    }\r\n    <BeamButton city={props.city.key} difficulty={props.difficulty} hex={hex}></BeamButton>\r\n    </div>\r\n}\r\n\r\nconst renderDensityWarning = (typ: BuildingTypes) => {\r\n    if (typ === 'house')\r\n    return <>\r\n        <div className=\"text-center\">\r\n        <small>\r\n        🐮 Parochial subjects may emit 👎<br/>when living in dense buildings\r\n        </small>\r\n    </div> \r\n    <div className=\"text-center\">\r\n        <small>\r\n        🍸 Cosmopolitan subjects may emit 👎<br/>when living in small buildings\r\n        </small>\r\n    </div>\r\n    </>;\r\n    else return <div>\r\n\r\n    </div>\r\n}\r\n\r\nexport const WorkerList: React.FC<{\r\n    cityKey: number,\r\n    building: IBuilding\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const beans = useAppSelector(x => props.building.jobs.map((k) => x.world.beans.byID[k]));\r\n    const enterprise = useAppSelector(s => s.world.enterprises.byID[props.building.key]);\r\n    if (beans.length < 0) {\r\n        return <div>No Workers</div>\r\n    }\r\n    return <div>\r\n    <strong>Workers:</strong>\r\n    {\r\n        beans.map((x) => <div key={x.key}>\r\n            {BuildingJobIcon[props.building.type]} {x.name} {enterprise && enterprise.enterpriseType === 'company' && x.key === enterprise.ownerBeanKey ? '🎩' : ''}\r\n            <button title=\"Fire\" className=\"callout marg-0\" onClick={() => x ? dispatch(fireBean({cityKey: props.cityKey, beanKey: x.key})) : null}>\r\n                🔥\r\n            </button>\r\n        </div>)\r\n    }\r\n</div>\r\n}\r\nexport const EnterpriseTypePicker: React.FC<{\r\n    enter: IEnterprise,\r\n    changeEnterprise: (newType: EnterpriseType) => void,\r\n}> = (props) => {\r\n    const options = EnterpriseTypes.map((x) => {\r\n        return {\r\n            icon: EnterpriseTypeIcon[x],\r\n            text: x[0].toUpperCase()+x.substring(1),\r\n            value: x,\r\n            onClick: () => {\r\n                props.changeEnterprise(x);\r\n            }\r\n        }\r\n    }); \r\n    return <Subtabs active={props.enter.enterpriseType} options={options}></Subtabs>\r\n}\r\n\r\nexport const EnterpriseListings: React.FC<{\r\n    enterpriseKey: number,\r\n    good: TraitGood\r\n}> = (props) => {\r\n    const listings = useAppSelector(s => s.world.economy.market.listings[props.good])\r\n    return <div>\r\n        {\r\n            listings.filter(y => y.sellerEnterpriseKey === props.enterpriseKey).map((x,i) => <div key={i}>\r\n                {x.quantity} {GoodIcon[props.good]} @ ${x.price.toFixed(2)}\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nfunction HexStringToHex(hex: string): HexPoint {\r\n    const split = hex.split(',');\r\n    return {\r\n        q: +split[0],\r\n        r: +split[1]\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { CityGetPopulationTraitsList, ICity } from \"../simulation/City\";\r\nimport { IPlayerData } from \"../simulation/Player\";\r\nimport { selectBeansByCity } from \"../state/features/world.reducer\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { CardButton } from \"../widgets/CardButton\";\r\nimport { NeedReadout } from \"../widgets/NeedReadout\";\r\nimport { Trait } from \"../World\";\r\n\r\ninterface OverviewPanelP {\r\n    city: ICity,\r\n    alien: IPlayerData,\r\n    clearCity: () => void;\r\n}\r\n\r\nexport const OverviewPanel: React.FC<OverviewPanelP> = (props) => {\r\n    const beans = useAppSelector(x => selectBeansByCity(x.world, props.city.key));\r\n    let header = <div>\r\n        Human Emotion Farm\r\n        <div>\r\n            <small>Part of the 🌌 Galactic Xenosensation Federation</small>\r\n        </div>\r\n    </div>;\r\n    if (props.city) {\r\n        header = <div>\r\n            <div>\r\n                <b>{props.city.name}</b>\r\n                <button type=\"button\" className=\"pull-r\" onClick={() => props.clearCity()} >❌</button>\r\n            </div>\r\n        </div>;\r\n    }\r\n    const avg_happy = beans.reduce((sum, x) => sum + x.lastHappiness, 0) / (beans.length || 1);\r\n    const avg_cash = beans.reduce((sum, x) => sum + x.cash, 0) / (beans.length || 1);\r\n    return (\r\n        <div>\r\n            {header}\r\n            {/* <div className=\"header\"><b>Demographics</b></div> */}\r\n            <div className=\"header\"><b>👥 Subjects</b></div>\r\n            <div>\r\n                <b>Population</b>&nbsp;\r\n                <span>{beans.length}</span>\r\n            </div>\r\n            {/* <AxisReadout report={reportEthno(beans)}>Ethnicity</AxisReadout> */}\r\n            <NeedReadout beans={beans} need={(b) => b.food} dire=\"starving\" abundant=\"stuffed\">Food Security</NeedReadout>\r\n            <NeedReadout beans={beans} need={(b) => b.stamina} dire=\"homeless\" abundant=\"rested\">Housing</NeedReadout>\r\n            <NeedReadout beans={beans} need={(b) => b.health} dire=\"sick\" abundant=\"fresh\">Healthcare</NeedReadout>\r\n            <b>Avg. Money</b> ${avg_cash.toFixed(2)} &nbsp;\r\n            <b>Avg. Happiness</b> {Math.round(avg_happy)}%\r\n            {\r\n                beans && beans.length ? <>\r\n                    <div className=\"header\"><b>🧠 Traits</b></div>\r\n                    <div className=\"max-w-300\">\r\n                        { \r\n                            CityGetPopulationTraitsList(props.alien.scanned_bean, beans).map((v) => \r\n                                <span key={v.noun} className=\"overview-belief\">\r\n                                    {v.icon}&nbsp;{v.noun}&nbsp;x{v.count}\r\n                                </span>)\r\n                        }\r\n                    </div>\r\n                </> : null\r\n            }\r\n            {\r\n                beans.length || 0 > 7 ? <div className=\"card-parent\">\r\n                    <CardButton icon=\"🛰️\" name=\"Scan All\" disabled={true} subtext=\"-Energy +Info\" onClick={() => {}}></CardButton>\r\n                </div> : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport class AxisReadout extends React.Component<{ report: { avg: number, winner: Trait } }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n        let maj = 'Leaning';\r\n        if (this.props.report.avg >= .51)\r\n            maj = 'Major'\r\n        if (this.props.report.avg >= .8)\r\n            maj = 'Extreme'\r\n        const percent = Math.floor(this.props.report.avg * 100);\r\n        const style = {\r\n            width: percent + '%'\r\n        }\r\n        return (\r\n            <div>\r\n                <b>\r\n                    {this.props.children}\r\n                </b>&nbsp;&nbsp;\r\n                <span>{maj} {keyToName[this.props.report.winner]}</span>\r\n                <div className=\"bar\">\r\n                    <div className=\"bar-inner\" style={style}>\r\n                        {percent}%\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { abduct } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean, selectSelectedCity } from \"../state/state\";\r\nimport { BeanPanel } from \"./BeanPanel\";\r\nimport { HexPanel } from \"./HexPanel\";\r\nimport { OverviewPanel } from \"./OverviewPanel\";\r\n\r\nexport const DetailPanel: React.FC<{\r\n    openBrainwash: () => void\r\n}> = (props) => {\r\n    const city = useAppSelector(selectSelectedCity);\r\n    const hex = useAppSelector((x) => x.selected.selectedHexKey);\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const alien = useAppSelector((x) => x.world.alien);\r\n    const dispatch = useAppDispatch();\r\n    if (bean && city){\r\n        return <BeanPanel bean={bean} city={city} alien={alien}\r\n        brainwash={() => props.openBrainwash()}\r\n        ></BeanPanel>\r\n    }\r\n    if (hex) {\r\n        return <HexPanel difficulty={alien.difficulty}></HexPanel>\r\n    }\r\n    if (city) {\r\n        return <OverviewPanel city={city} clearCity={() => dispatch(doSelectNone())} alien={alien}></OverviewPanel>\r\n    }\r\n    return <div></div>\r\n}","import React from \"react\";\r\nimport { IEvent } from \"../events/Events\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectEventIDs } from \"../state/state\";\r\n\r\nfunction shouldEventJumpToBean(e: IEvent): boolean{\r\n    return e.beanKey != null && (\r\n        e.trigger === 'speechcrime' ||\r\n        e.trigger === 'birth');\r\n}\r\n\r\nexport const EventsPanel: React.FC<{\r\n    \r\n}> = (props) => {\r\n    const events = useAppSelector(selectEventIDs);\r\n    const dispatch = useAppDispatch();\r\n    let elements = events.map((e, i) => {\r\n        const alert = e.icon === '🚨';\r\n        const tallTrigger = e.trigger === 'nojobslots' || e.trigger === 'persuasion';\r\n        return <div key={i} className={alert||tallTrigger ? 'tall': ''}>\r\n            <span className={alert ? 'police-siren': ''}>{e.icon}</span>&nbsp;\r\n            {\r\n                shouldEventJumpToBean(e) ? <a onClick={() => {\r\n                    if (e.beanKey && e.cityKey) {\r\n                        dispatch(doSelectBean({beanKey: e.beanKey, cityKey: e.cityKey}));\r\n                    }\r\n            }} href=\"javascript:void(0)\">{e.message}</a> : <span>{e.message}</span>\r\n            }\r\n        </div>\r\n    });\r\n    if (events.length === 0){\r\n        elements = [<div key={0}>\r\n            <small>No events yet</small>\r\n        </div>]\r\n    }\r\n    return (                \r\n    <div className=\"events-panel\">\r\n        <div>\r\n            <b>Events</b>\r\n        </div>\r\n        {elements}\r\n    </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { DefaultDifficulty, triadToString } from \"../Game\";\r\nimport { Curriculums, GetAverage, Goals, IGoal, IGoalProgress, IPlayerData, IProgressable } from \"../simulation/Player\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nfunction renderReward(g: IGoal){\r\n  return <div>\r\n    <small>\r\n    🎁 {triadToString(g.reward || {}, '+')}\r\n    </small>\r\n  </div>\r\n}\r\nfunction renderGoal(progress: IGoalProgress|undefined, g: IGoal){\r\n  return <li>\r\n    {progress?.done ? '☑️': '⭕️'}\r\n    {g.text}\r\n    {g.tooltip != null ? <small title={g.tooltip}>❔</small> : null}\r\n    {progress?.done || g.reward == null ? null : renderReward(g)}\r\n  </li>\r\n}\r\nexport const GoalsPanel: React.FC = () => {\r\n  const progress = useAppSelector(x => x.world.alien.goalProgress);\r\n  const goals = useAppSelector(x => x.world.alien.goals);\r\n  const workingReportCard = useAppSelector(x => x.world.alien.workingReportCard);\r\n  return (<div className=\"goals\">\r\n    <div><b>Goals</b></div>\r\n    <ul>\r\n      {goals.map((key) => {\r\n        return renderGoal(progress[key], Goals[key]);\r\n      })}\r\n    </ul>\r\n    <div><b>Report Card</b></div>\r\n    <p className=\"horizontal\">\r\n      <span>\r\n        Last Grade: <b>D</b>\r\n      </span>\r\n      <span>\r\n        Next Grade in: <b>2 mo.</b>\r\n      </span>\r\n    </p>\r\n    <p>\r\n    </p>\r\n    <table style={{margin: 'auto'}}>\r\n      <tbody>\r\n        <tr>\r\n          <th>🎯 Happiness\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Happiness}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects happy?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n            <small>\r\n          {Curriculums.Default.RubricDescription.Happiness}\r\n            </small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Prosperity</th>\r\n          <td>\r\n            {workingReportCard.Prosperity}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects fed and healthy?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Prosperity}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Stability\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Stability}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects sane and civil?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Stability}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Dogma\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Dogma}\r\n          </td>\r\n          <td>\r\n            <small title=\"Do your society's rules match your utopian ideals?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Dogma}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td colSpan={3}>\r\n            <hr />\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            Avg. Grade\r\n          </th>\r\n          <td>\r\n            {GetAverage(workingReportCard)}\r\n          </td>\r\n          <td></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { PlayerCanAfford } from \"../simulation/Player\";\r\nimport { buyBots, buyEnergy, buyTrait, scrubHedons } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { EmoteIcon } from \"../World\";\r\n\r\n export const MarketPanel: React.FC<{\r\n }> = () => {\r\n     const player = useAppSelector(s => s.world.alien);\r\n     const dispatch = useAppDispatch();\r\n    return <div>\r\n        <div className=\"text-center\">\r\n            <strong>🌌 Galactic 😨 Emotion 💰 Market</strong>\r\n        </div>\r\n        <p>\r\n            <small>\r\n                The premier exchange for ⚡️, 🤖,  and {EmoteIcon['happiness']}!\r\n            </small>\r\n        </p>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(buyEnergy({amount: 1}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.energy)}>\r\n                +1 ⚡️ Energy\r\n                <CostSmall cost={player.difficulty.cost.market.resource.energy} qty={1} ></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" onClick={() => dispatch(buyEnergy({amount: 5}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.energy, 5)}>\r\n                +5 ⚡️ Energy\r\n                <CostSmall cost={player.difficulty.cost.market.resource.energy} qty={5} ></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(buyBots({amount: 1}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.bots)}>\r\n                +1 🤖 Bot\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={1} ></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" onClick={() => dispatch(buyBots({amount: 5}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.bots, 5)}>\r\n                +5 🤖 Bots\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={5} ></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(scrubHedons())}\r\n                disabled={player.hedons.amount >= 0 || !PlayerCanAfford(player, player.difficulty.cost.market.scrubHedons)}>\r\n                Remove 💢 Negative Hedons\r\n                <CostSmall cost={player.difficulty.cost.market.scrubHedons} qty={1} ></CostSmall>\r\n            </button>\r\n            {/* <button className=\"card button\" onClick={() => buyBots(5)}\r\n                disabled={!PlayerCanAfford(player.difficulty.cost.market.resource.bots, 5)}>\r\n                +5 🤖 Bots\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={5} ></CostSmall>\r\n            </button> */}\r\n        </div>\r\n        <div>\r\n            \r\n            <small>\r\n                <i>Current 🧠 Traits for sale:</i>\r\n            </small>\r\n        </div>\r\n        <div className=\"short-scroll\">\r\n            {\r\n                <MarketTraits hedons={player.hedons.amount}></MarketTraits>\r\n            }\r\n        </div>\r\n    </div>\r\n }\r\n\r\n \r\nexport const MarketTraits: React.FC<{\r\n    hedons: number,\r\n}> = (props) => {\r\n    const list = useAppSelector(s => s.world.marketTraitsForSale);\r\n    const dispatch = useAppDispatch();\r\n    return <>\r\n    {\r\n    list.map((l, i) => {\r\n        const t = SecondaryBeliefData[l.trait];\r\n        const className = 'belief-name '+t.rarity;\r\n        return <div className=\"card-parent\" key={i}>\r\n            <button className=\"card button\" onClick={() => dispatch(buyTrait({l: l}))} disabled={props.hedons < (l.cost.hedons || 0)}>\r\n                <span className={className}>\r\n                    {t.icon} {t.noun}\r\n                </span>\r\n                <CostSmall cost={l.cost}></CostSmall>\r\n            </button>\r\n        </div>\r\n    })\r\n    }\r\n    </>\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { GameStorageInstance } from '../GameStorage';\r\nexport const AutosaveWidget: React.FC<{}> = (props) => {\r\n    const [isDirty, setDirty] = useState(false);\r\n    const [isSaving, setSaving] = useState(false);\r\n    const onDirty = (dirty: boolean) => {\r\n        setDirty(dirty);\r\n    }\r\n    const onSaving = () => {\r\n        setSaving(true);\r\n        setTimeout(() => setSaving(false), 500);\r\n    }\r\n    const d = useEffect(() => {\r\n        GameStorageInstance.Dirty.subscribe(onDirty);\r\n        return () => GameStorageInstance.Dirty.unsubscribe(onDirty);\r\n    });\r\n    const s = useEffect(() => {\r\n        GameStorageInstance.Saving.subscribe(onSaving);\r\n        return () => GameStorageInstance.Saving.unsubscribe(onSaving);\r\n    });\r\n    return <button disabled={!isDirty || isSaving}>\r\n            {\r\n                isSaving ? '💿' : isDirty ? '💾' : '✔️'\r\n            }\r\n        </button>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { ChangePubSub, PubSub } from \"../events/Events\";\r\n\r\ninterface Bubble {string: string, id: number, className?: string};\r\n\r\nfunction useBubbles<T>(sub: PubSub<T>, transform: (input: T) => {string: string, className: string}){\r\n    const [bubbles, setBubbles] = useState<Bubble[]>([]);\r\n    let bubbleSeed = 0;\r\n    const onEvent = (event: T) => {\r\n        const id = ++bubbleSeed;\r\n        setBubbles(bubbles.concat([{\r\n            id: id,\r\n            ...transform(event)\r\n        }]));\r\n        setTimeout(() => {\r\n            setBubbles(\r\n                bubbles.filter((b) => b.id != id)\r\n            )\r\n        }, 1500)\r\n    }\r\n    useEffect(() => {\r\n        sub.subscribe(onEvent);\r\n        return () => sub.unsubscribe(onEvent);\r\n    });\r\n    return bubbles;\r\n}\r\n\r\nexport class BubbleNumberText extends React.Component<{\r\n    bubbleClass?: string,\r\n    icon?: string,\r\n    changeEvent?: ChangePubSub\r\n}, {\r\n    bubbles: Array<Bubble>\r\n}> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            bubbles: []\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        if (this.props.changeEvent){\r\n            this.props.changeEvent.subscribe(this.onChange)\r\n        }\r\n    }\r\n    bubbleSeed = 0;\r\n    onChange = (ev: {change: number}) => {\r\n        const id = ++this.bubbleSeed;\r\n        const positive = ev.change > 0;\r\n        this.setState({\r\n            bubbles: this.state.bubbles.concat([{\r\n                string: (positive ? '+': '') + ev.change,\r\n                id: id,\r\n                className: positive ? 'pos' : 'neg'\r\n            }])\r\n        });\r\n        setTimeout(() => {\r\n            this.setState({\r\n                bubbles: this.state.bubbles.filter((b) => b.id != id)\r\n            })\r\n        }, 1500)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if (this.props.changeEvent){\r\n            this.props.changeEvent.unsubscribe(this.onChange);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const bubbles = this.state.bubbles.map((b) => <span key={b.id} className={[b.className, this.props.bubbleClass, \"bubbler\"].join(' ')}>\r\n            {this.props.icon} {b.string}\r\n        </span>)\r\n        return <span className=\"bubble-parent\">\r\n            {this.props.children}\r\n            {bubbles}\r\n        </span>\r\n    }\r\n}\r\n\r\nexport const BubbleSeenTraitsText: React.FC<{\r\n    bubbleClass?: string,\r\n    icon?: string,\r\n    changeEvent: PubSub<{k: string, v: boolean}>\r\n}> = (props) => {\r\n    const bubbles = useBubbles(props.changeEvent, (input: {k: string, v: boolean}) => {\r\n        return {\r\n            string: `Discovered ${input.k}!`,\r\n            className: 'seen-belief'\r\n        }\r\n    })\r\n    return <span className=\"bubble-parent\">\r\n        {props.children}\r\n        {bubbles.map((b) => <span key={b.id} className={[b.className, props.bubbleClass, \"bubbler\"].join(' ')}>\r\n            {props.icon} {b.string}\r\n        </span>)}\r\n    </span>\r\n}","import React from \"react\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\nexport class CapsuleLabel extends React.Component<{\r\n    icon?: string,\r\n    label?: string\r\n}, {\r\n}> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render(){\r\n        const classN = 'capsule-label '+this.props.label||'';\r\n        return <span className={classN}>\r\n            <span className=\"capsule-icon\">\r\n                {this.props.icon}\r\n            </span>\r\n            <span className=\"capsule-text\">\r\n                {this.props.label}:\r\n            </span>\r\n            <span className=\"capsule-value\">\r\n                {this.props.children}\r\n            </span>\r\n        </span>\r\n    }\r\n}\r\n\r\nexport const EnergyAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.energy.amount);\r\n    return <span>{amt.toFixed(1)}</span>\r\n}\r\nexport const BotsAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.bots.amount);\r\n    return <span>{amt.toFixed(1)}</span>\r\n}\r\nexport const HedonAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.hedons.amount);\r\n    return <span>{amt.toFixed(0)}</span>\r\n}","import React from \"react\";\r\n\r\nexport interface modalPs{\r\n    show: boolean;\r\n    onClick?: () => void;\r\n    closeButtonText?: string;\r\n}\r\nexport class Modal extends React.Component<modalPs> {\r\n    constructor(props: modalPs) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        }\r\n    }\r\n    getButton(){\r\n        if (!this.props.onClick)\r\n            return null;\r\n        else\r\n            return <button type=\"button\" className=\"done\" onClick={() => this.props.onClick && this.props.onClick()} >{this.props.closeButtonText || 'Done'}</button>\r\n    }\r\n    render() {\r\n        if (!this.props.show) {\r\n            return null;\r\n        }\r\n        return (\r\n        <div className=\"modal\">\r\n            {this.props.children}\r\n            {this.getButton()}\r\n        </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { PartOfDay, Season } from \"../simulation/Time\"\r\nimport { useAppSelector } from \"../state/hooks\"\r\n\r\nfunction SeasonHour(hour: number){\r\n    if (hour < PartOfDay.Morning)\r\n        return '🌙';\r\n    if (hour < PartOfDay.Noon)\r\n        return '🌄';\r\n    if (hour < PartOfDay.Evening)\r\n        return '☀️';\r\n    return '🌇';\r\n}\r\nexport const SeasonWidget: React.FC = () => {\r\n    const date = useAppSelector(s => s.world.date)\r\n    return <span>\r\n        &nbsp;Year {date.year},&nbsp;{Season[date.season]} {date.day} {SeasonHour(date.hour)}\r\n    </span>\r\n}","import React from \"react\";\r\nimport { AnimatedBean } from \"../petri-ui/AnimatedBean\";\r\nimport { SocialBuildings } from \"../petri-ui/Buildings\";\r\nimport { Bean } from \"../simulation/Bean\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { IBuilding } from \"../simulation/Geography\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { selectCityBeanIDs } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport \"./SocialGraph.css\";\r\n\r\ninterface SocialGraphP{\r\n    city: ICity,\r\n    onClick: (b: Bean) => void;\r\n    onClickBuilding: (b: IBuilding) => void;\r\n}\r\n\r\nexport const SocialGraph: React.FC<SocialGraphP> = (props) => {\r\n    const beanKeys = useAppSelector(state => selectCityBeanIDs(state.world, props.city.key));\r\n    const scannedBeans = useAppSelector(s => s.world.alien.scanned_bean)\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"social-graph\">\r\n        <div className=\"social-graph-row\">\r\n        {\r\n            beanKeys.map((b) => \r\n            <div key={b} className=\"bean-node\" onClick={() => dispatch(doSelectBean({cityKey:props.city.key, beanKey: b}))}>\r\n                <AnimatedBean beanKey={b} static={true} sitStill={true} cityKey={props.city.key}>\r\n                </AnimatedBean>\r\n                {\r\n                    scannedBeans[b] ? null : <span className=\"social-graph-unscanned prohibited-emoji\">🛰️</span>\r\n                }\r\n            </div>)\r\n        }\r\n        </div>\r\n        <div className=\"social-graph-row\">\r\n        {\r\n            <SocialBuildings city={props.city} onClickBuilding={props.onClickBuilding}></SocialBuildings>\r\n        }\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport \"./StopPlayFast.css\"\r\n\r\nexport class StopPlayFastButtons extends React.Component<{\r\n    timeScale: number,\r\n    setTimeScale: (s: number) => void\r\n}>{\r\n    render(){\r\n        return <div className=\"s-p-f button-group cylinder blue-orange\">\r\n            ⌛️\r\n            <button type=\"button\" className={this.props.timeScale == 0 ? 'active': ''} onClick={() => this.props.setTimeScale(0)}>⏹</button>\r\n            <button type=\"button\" className={this.props.timeScale == 1 ? 'active': ''} onClick={() => this.props.setTimeScale(1)}>▶️</button>\r\n            <button type=\"button\" className={this.props.timeScale == 2 ? 'active': ''} onClick={() => this.props.setTimeScale(2)}>⏩</button>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport const GeoNetworkButtons: React.FC<{\r\n    activeMain: 'geo' | 'network';\r\n    setActiveMain: (v: 'geo' | 'network' ) => void\r\n}> = (props) => {\r\n    \r\n    return <div className=\"s-p-f button-group cylinder blue-orange\">\r\n        👁️\r\n        <button type=\"button\" className={props.activeMain == 'geo' ? 'active': ''} onClick={() => props.setActiveMain('geo')}>🌎</button>\r\n        <button type=\"button\" className={props.activeMain == 'network' ? 'active': ''} onClick={() => props.setActiveMain('network')}>🌐</button>\r\n    </div>\r\n    \r\n}","import React from \"react\";\r\nimport { IEvent, PubSub } from \"../events/Events\";\r\n\r\nexport class TimelyEventToggle extends React.Component<{\r\n    event: PubSub<IEvent>,\r\n    eventIcon: string,\r\n    eventClass: string\r\n}, {\r\n eventCount: number,\r\n}>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.props.event.subscribe(this.onEvent);\r\n        this.state = {\r\n            eventCount: 0\r\n        };\r\n    }\r\n    onEvent = (e: IEvent) => {\r\n        this.setState({eventCount: this.state.eventCount+1});\r\n        window.setTimeout(() => {\r\n            this.setState({\r\n                eventCount: this.state.eventCount-1\r\n            });\r\n        }, 3000);\r\n    }\r\n    render(){\r\n        return <span>\r\n            {this.state.eventCount < 1 ? this.props.children : <span className={this.props.eventClass}>{this.props.eventIcon}</span>}\r\n        </span>\r\n    }\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\r\nimport './App.css';\r\nimport './chrome/chrome.css';\r\nimport { IEvent } from './events/Events';\r\nimport { GameStorageInstance, isGame } from './GameStorage';\r\nimport { BrainwashingContent } from './modal-content/Brainwashing';\r\nimport { CampaignsPanel } from './modal-content/Campaigns';\r\nimport { EconomyReport } from './modal-content/EconomyReport';\r\nimport { EscapeMenu } from './modal-content/EscapeMenu';\r\nimport { GovernmentPanel } from './modal-content/Gov';\r\nimport { GreetingPanel } from './modal-content/GreetingPanel';\r\nimport { LoadGameMenu } from './modal-content/LoadGameMenu';\r\nimport { MainMenu } from './modal-content/MainMenu';\r\nimport { ResearchPanel } from './modal-content/Research';\r\nimport { TraitsReport } from './modal-content/TraitsReport';\r\nimport { MoverStoreInstance } from './MoverStoreSingleton';\r\nimport { WorldTile2 } from './petri-ui/WorldTile';\r\nimport { DetailPanel } from './right-panel/DetailPanel';\r\nimport { EventsPanel } from './right-panel/Events';\r\nimport { GoalsPanel } from './right-panel/Goals';\r\nimport { MarketPanel } from './right-panel/MarketPanel';\r\nimport { SignalStoreInstance } from './SignalStore';\r\nimport { Point } from './simulation/Geography';\r\nimport { MoverStore } from './simulation/MoverBus';\r\nimport { animate_beans, animate_pickups, animate_ufos } from './simulation/WorldSim';\r\nimport { doSelectBean, doSelectBuilding } from './state/features/selected.reducer';\r\nimport { cheatAdd, loadGame, newGame, worldTick } from './state/features/world.reducer';\r\nimport { store as StoreState } from './state/state';\r\nimport { AutosaveWidget } from './widgets/Autosave';\r\nimport { BubbleNumberText, BubbleSeenTraitsText } from './widgets/BubbleText';\r\nimport { BotsAmount, CapsuleLabel, EnergyAmount, HedonAmount } from './widgets/CapsuleLabel';\r\nimport { Modal } from './widgets/Modal';\r\nimport { SeasonWidget } from './widgets/Season';\r\nimport { SocialGraph } from './widgets/SocialGraph';\r\nimport { GeoNetworkButtons, StopPlayFastButtons } from './widgets/StopPlayFast';\r\nimport { TimelyEventToggle } from './widgets/TimelyEventToggle';\r\nimport { WorldSfxInstance, WorldSound } from './WorldSound';\r\n\r\nexport type ModalView = 'mainmenu'|'loadgame'|'escapemenu'|'greeting' | 'economy' | 'campaign' | 'gov' | 'polisci' | 'brainwash' | 'traits';\r\ninterface AppPs {\r\n}\r\ninterface AppState {\r\n  activeModal: ModalView | null;\r\n  activeMain: 'geo' | 'network';\r\n  activeRightPanel: 'events' | 'overview' | 'goals' | 'market';\r\n  timeScale: number;\r\n  spotlightEvent: IEvent | undefined;\r\n  cursor?: Point;\r\n}\r\nexport const SfxContext = React.createContext<WorldSound|undefined>(undefined);\r\nexport const MoverContext = React.createContext<MoverStore>(MoverStoreInstance);\r\n\r\nconst LogicTickMS = 2000;\r\nconst SpotlightDurationTimeMS = 5000;\r\nconst store = StoreState;\r\n\r\nconst AutosaveMilliseconds = 15 * 1000;\r\nclass App extends React.Component<AppPs, AppState>{\r\n  constructor(props: AppPs) {\r\n    super(props);\r\n    this.state = {\r\n      activeMain: 'geo',\r\n      activeModal: 'mainmenu',\r\n      activeRightPanel: 'overview',\r\n      timeScale: 0,\r\n      spotlightEvent: undefined\r\n    };\r\n    // this.state.world.bus.death.subscribe(this.onDeath);\r\n  }\r\n  private previousTimeMS: DOMHighResTimeStamp = 0;\r\n  private logicTickAccumulatorMS: number = 0;\r\n  private millisecondsSinceLastSave: DOMHighResTimeStamp = 0;\r\n  private saveAccumulatorMS: number = 0;\r\n  componentDidMount() {\r\n    document.addEventListener(\"keyup\", this.keyupHandler, false);\r\n    window.requestAnimationFrame((time: DOMHighResTimeStamp) => {\r\n      this.previousTimeMS = time;\r\n      window.requestAnimationFrame(this.tick);\r\n    });\r\n    \r\n    // observeStoreWorldSlice(() => GameStorageInstance.Dirty.publish(true));\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keyup\", this.keyupHandler);\r\n  }\r\n  tick = (timeMS: DOMHighResTimeStamp) => {\r\n    // Compute the delta-time against the previous time\r\n    const deltaTimeMS = (timeMS - this.previousTimeMS);\r\n    // Update the previous time\r\n    this.previousTimeMS = timeMS;\r\n\r\n    if (deltaTimeMS > 0) {\r\n      const gameDeltaTimeMS = deltaTimeMS * this.state.timeScale;\r\n\r\n      animate_ufos(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n      if (gameDeltaTimeMS > 0){\r\n        this.logicTickAccumulatorMS += deltaTimeMS;\r\n        animate_pickups(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n        animate_beans(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n  \r\n        if (this.logicTickAccumulatorMS > LogicTickMS) {\r\n          store.dispatch(worldTick())\r\n          this.logicTickAccumulatorMS = 0;\r\n        }\r\n      }\r\n      this.millisecondsSinceLastSave += deltaTimeMS;\r\n      //save every 30 seconds\r\n      if(GameStorageInstance.Dirty.current && this.millisecondsSinceLastSave > AutosaveMilliseconds){\r\n        GameStorageInstance.SaveGame(store.getState().world);\r\n        this.millisecondsSinceLastSave = 0;\r\n      }\r\n    }\r\n    window.requestAnimationFrame(this.tick);\r\n  }\r\n  cheatMode: boolean = false;\r\n  keyupHandler = (event: KeyboardEvent) => {\r\n    if (event.key === ' ') {\r\n      if (this.state.timeScale > 0) {\r\n        this.setState({ timeScale: 0 });\r\n      } else {\r\n        this.setState({ timeScale: 1 });\r\n      }\r\n    } else if (event.key === 'Escape') {\r\n      if (this.state.activeModal === 'greeting')\r\n        store.dispatch(newGame())\r\n      this.setState({activeModal: null});\r\n    } else if (this.cheatMode && event.key === 'A') {\r\n      store.dispatch(cheatAdd())\r\n    } else if (this.cheatMode && event.key === 'Q') {\r\n      // if (this.state.world.cities[0].book.getBuildings().filter(x => x.type === 'farm').length < 1){\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.farm.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.farm.bots || 0;\r\n      //   // this.build(this.state.world.cities[0], { q: 1, r: 1 }, 'farm');\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.house.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.house.bots || 0;\r\n      //   // this.build(this.state.world.cities[0], { q: 1, r: 0 }, 'house');\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.hospital.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.hospital.bots || 0;\r\n        // this.build(this.state.world.cities[0], { q: 0, r: 1 }, 'hospital');\r\n      // }\r\n      // this.state.world.alien.energy.amount += (this.state.world.alien.difficulty.cost.hex.beam.energy || 0) * 4;\r\n      // this.beam(this.state.world.cities[0], { q: 0, r: 0 });\r\n      // this.beam(this.state.world.cities[0], { q: 1, r: 0 });\r\n      // this.beam(this.state.world.cities[0], { q: 0, r: 1 });\r\n      // this.beam(this.state.world.cities[0], { q: 1, r: 1 });\r\n    } else if (this.cheatMode && event.key === 'S') {\r\n      // this.state.world.beans.get.forEach((b) => {\r\n      //   if (this.state.world.alien.difficulty.cost.bean.scan.energy){\r\n      //     if (this.state.world.alien.energy.amount < this.state.world.alien.difficulty.cost.bean.scan.energy)\r\n      //       this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.bean.scan.energy;\r\n      //   }\r\n      //   // this.scan(b);\r\n      // });\r\n    }\r\n    this.cheatMode = event.shiftKey && event.key === 'C';\r\n  }\r\n  onDeath = (event: IEvent) => {\r\n    WorldSfxInstance.play('death');\r\n    this.startSpotlight(event);\r\n  }\r\n  private timescaleBeforeSpotlight: number = 1;\r\n  startSpotlight(event: IEvent) {\r\n    this.timescaleBeforeSpotlight = this.state.timeScale;\r\n    this.setState({\r\n      spotlightEvent: event,\r\n      timeScale: 0\r\n    }, () => {\r\n      setTimeout(() => this.endSpotlight(), SpotlightDurationTimeMS);\r\n    });\r\n  }\r\n  endSpotlight() {\r\n    this.setState({\r\n      timeScale: this.timescaleBeforeSpotlight,\r\n      spotlightEvent: undefined\r\n    });\r\n  }\r\n  getPanel() {\r\n    switch (this.state.activeRightPanel) {\r\n      case 'overview':\r\n        return <DetailPanel openBrainwash={() => this.setState({ activeModal: 'brainwash' })}></DetailPanel>\r\n      case 'goals':\r\n        return <GoalsPanel></GoalsPanel>\r\n      case 'events':\r\n        return <EventsPanel></EventsPanel>\r\n      case 'market': \r\n        return <MarketPanel></MarketPanel>\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n      <SfxContext.Provider value={WorldSfxInstance}>\r\n      <MoverContext.Provider value={MoverStoreInstance}>\r\n        <div className=\"canvas\">\r\n          {\r\n            this.state.activeMain === 'network' ? <div className=\"canvas\">\r\n              <SocialGraph\r\n                city={store.getState().world.cities.byID[0]}\r\n                onClickBuilding={(b) => store.dispatch(doSelectBuilding({\r\n                  cityKey: store.getState().world.cities.allIDs[0], \r\n                  buildingKey: b.key,\r\n                  hex: b.address\r\n                 }))}\r\n                onClick={(b) => store.dispatch(doSelectBean({cityKey: b.cityKey, beanKey: b.key }))} ></SocialGraph>\r\n            </div> : <TransformWrapper\r\n              defaultScale={1}\r\n              wheel={{ step: 48 }}>\r\n              <TransformComponent>\r\n                <div className=\"world\">\r\n                  {\r\n                  store.getState().world.cities.allIDs.map((t) => {\r\n                    return (\r\n                      <WorldTile2 cityKey={t} key={t}\r\n                        onClick={() => {\r\n                          \r\n                        }}\r\n                      ></WorldTile2>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </TransformComponent>\r\n            </TransformWrapper>\r\n          }\r\n          <div className=\"overlay\">\r\n            <Modal show={this.state.activeModal == 'mainmenu'}>\r\n              <MainMenu startGame={() => this.setState({activeModal: 'greeting'})} loadGame={(slot: number) => {\r\n                const game = GameStorageInstance.GetGame(slot);\r\n                if (isGame(game)){\r\n                  store.dispatch(loadGame({newState: game.game}));\r\n                  this.setState({activeModal: null});\r\n                }\r\n              }}></MainMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'loadgame'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame());\r\n              }\r\n            }>\r\n              <LoadGameMenu></LoadGameMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'escapemenu'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame());\r\n              }\r\n            }>\r\n              <EscapeMenu></EscapeMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'greeting'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame());\r\n              }\r\n            }>\r\n              <GreetingPanel></GreetingPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'gov'} onClick={() => this.setState({ activeModal: null })}>\r\n              <GovernmentPanel></GovernmentPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'polisci'} onClick={() => this.setState({ activeModal: null })}>\r\n              <ResearchPanel></ResearchPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'campaign'} onClick={() => this.setState({ activeModal: null })}>\r\n              <CampaignsPanel></CampaignsPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'economy'} onClick={() => this.setState({ activeModal: null })}>\r\n              {(this.state.activeModal == 'economy' ? <EconomyReport></EconomyReport> : '')}\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'traits'} onClick={() => this.setState({ activeModal: null })}>\r\n              <TraitsReport></TraitsReport>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'brainwash'} onClick={() => this.setState({ activeModal: null })}>\r\n              <BrainwashingContent></BrainwashingContent>\r\n            </Modal>\r\n            <div className=\"left\">\r\n              <div className=\"top\">\r\n                <span>👽 Alien 🌍 Utopia 🔬 Lab</span>\r\n                <SeasonWidget></SeasonWidget>\r\n                <StopPlayFastButtons timeScale={this.state.timeScale} setTimeScale={(n: number) => { this.setState({ timeScale: n }) }}></StopPlayFastButtons>\r\n                <GeoNetworkButtons setActiveMain={(v) => this.setState({ activeMain: v })} activeMain={this.state.activeMain} ></GeoNetworkButtons>\r\n                <AutosaveWidget></AutosaveWidget>\r\n              </div>\r\n              <div className=\"bottom\">\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienEnergy} icon=\"⚡️\">\r\n                  <CapsuleLabel icon=\"⚡️\" label=\"Energy\">\r\n                    <EnergyAmount></EnergyAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienBots} icon=\"🤖\">\r\n                  <CapsuleLabel icon=\"🤖\" label=\"Bots\">\r\n                    <BotsAmount></BotsAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienHedons} icon=\"👍\">\r\n                  <CapsuleLabel icon=\"👍\" label=\"Hedons\">\r\n                    <HedonAmount></HedonAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                {/* <BubbleText changeEvent={this.state.world.alien.tortrons.change} icon=\"💔\">\r\n                  <CapsuleLabel icon=\"💔\" label=\"Tortrons\">\r\n                    {this.state.world.alien.tortrons.amount.toFixed(0)}\r\n                  </CapsuleLabel>\r\n                </BubbleText> */}\r\n                <span>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'economy' })}>📊 State of the Utopia</button>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'gov' })}>🗳️ Gov</button>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'polisci' })}>🧪 Research</button>\r\n                  \r\n                  <BubbleSeenTraitsText changeEvent={SignalStoreInstance.newTraitSeen} icon=\"🧠\">\r\n                    <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'traits' })}>🧠 Traits</button>\r\n                  </BubbleSeenTraitsText>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"right\">\r\n              <div className=\"full-width-tabs\">\r\n                <button onClick={() => this.setState({ activeRightPanel: 'overview' })}>📈 Info</button>\r\n                <button onClick={() => this.setState({ activeRightPanel: 'market' })}>🛍️ Market</button>\r\n                <button onClick={() => this.setState({ activeRightPanel: 'events' })}>\r\n                  <TimelyEventToggle event={SignalStoreInstance.events} eventIcon=\"🚨\" eventClass=\"police-siren\">📣</TimelyEventToggle> Events\r\n                </button>\r\n                <button onClick={() => this.setState({ activeRightPanel: 'goals' })}>🏆 Goals</button>\r\n              </div>\r\n              <div className=\"right-panel\">\r\n                {this.getPanel()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          </div>\r\n      </MoverContext.Provider>\r\n      </SfxContext.Provider>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}