{"version":3,"sources":["events/Events.tsx","GameStorage.ts","World.tsx","MoverStoreSingleton.tsx","simulation/MoverBus.tsx","simulation/Beliefs.tsx","simulation/Utils.tsx","simulation/Geography.tsx","state/entity.state.ts","WorldGen.tsx","simulation/Government.tsx","simulation/Economy.tsx","simulation/Pickup.tsx","simulation/Bean.tsx","SignalStore.tsx","simulation/Player.tsx","simulation/RealEstate.tsx","simulation/City.tsx","simulation/Agent.tsx","simulation/AgentDuration.tsx","simulation/AgentDurationInstance.tsx","simulation/BeanAndCity.tsx","WorldSound.tsx","simulation/Time.tsx","simulation/MarketTraits.tsx","simulation/WorldSim.tsx","Game.tsx","state/features/world.reducer.ts","state/features/world.ts","state/hooks.ts","state/features/selected.reducer.ts","state/state.ts","widgets/ConfirmButton.tsx","widgets/StringDropdown.tsx","modal-content/BeliefRow.tsx","modal-content/Brainwashing.tsx","chrome/Subtab.tsx","simulation/Titles.tsx","modal-content/Society.tsx","i18n/text.ts","widgets/NeedReadout.tsx","modal-content/EconomyReport.tsx","modal-content/EscapeMenu.tsx","widgets/TreasuryReport.tsx","modal-content/Gov.tsx","modal-content/GreetingPanel.tsx","modal-content/LoadGameMenu.tsx","modal-content/MainMenu.tsx","widgets/RobotArm.tsx","modal-content/Research.tsx","modal-content/TraitsReport.tsx","petri-ui/AnimatedUFO2.tsx","simulation/Institutions.tsx","widgets/CostSmall.tsx","right-panel/DwellingList.tsx","right-panel/HexPanel.tsx","petri-ui/Building.tsx","petri-ui/PetriHexes.tsx","petri-ui/Magnet.tsx","petri-ui/AnimatedBean.tsx","petri-ui/AnimatedPickup.tsx","petri-ui/Mover.tsx","petri-ui/WorldTile.tsx","widgets/CardButton.tsx","right-panel/BeanPanel.tsx","right-panel/OverviewPanel.tsx","right-panel/DetailPanel.tsx","right-panel/Events.tsx","right-panel/Goals.tsx","right-panel/MarketPanel.tsx","simulation/SeedGen.tsx","widgets/Autosave.tsx","widgets/BubbleText.tsx","widgets/CapsuleLabel.tsx","widgets/Modal.tsx","widgets/Season.tsx","widgets/SocialGraph.tsx","widgets/StopPlayFast.tsx","widgets/TimelyEventToggle.tsx","modal-content/Entitling.tsx","App.tsx","serviceWorker.js","index.js"],"names":["PubSub","onPublish","callbacks","current","undefined","args","this","forEach","c","callback","push","splice","indexOf","ChangePubSub","MaslowHappinessScore","GameStorageInstance","Dirty","Saving","rawID","localStorage","getItem","id","parseInt","isNaN","slots","i","brief","JSON","parse","rawgame","errors","game","e","world","raw","stringify","Name","cities","byID","name","Population","beans","allIDs","map","x","filter","y","lifecycle","length","Age","day","date","hour","season","year","setItem","saveSlot","toString","publish","MoverStoreInstance","cache","type","key","PickupPhysics","BeanPhysics","TraitIcon","GoodToThreshold","warning","sufficient","abundant","JobToGood","job","GoodIcon","EmoteIcon","EmotionWorth","EmotionSanity","CommonalityChances","PrimaryBeliefData","prog","noun","adj","icon","description","rarity","trad","state","ego","NarrativeBeliefData","rocket","dragon","music","noFaith","SecondaryBeliefData","Diligence","Natalism","Antinatalism","Charity","Progressivism","Libertarianism","Wanderlust","Germophobia","Parochialism","Cosmopolitanism","Capitalism","Socialism","Communism","Fraud","Naturalism","Hedonism","Gluttony","Paranoia","Depression","Optimism","Authority","Anarchism","Greed","Bloodthirst","Extroversion","Introversion","Charisma","Gossip","Antagonism","Enthusiasm","Sadism","Vandalism","Delirium","DelusionalMania","Catatonia","Neuroticism","Dogmatism","Insanities","InsanityChances","SanityChances","BeliefsAll","Object","keys","RandomBeliefBucket","reduce","list","str","t","MathClamp","input","min","max","Math","SampleNormalDistribution","seed","q","u","v","mean","standardDeviation","GetRandomFloat","sqrt","log","Hex","r","hex_directions","hex_direction","direction","hex_neighbor","hex","dir","hex_ring","center","radius","a","k","results","cube","b","hex_add","j","hex_spiral","concat","OriginAccelerator","point","velocity","accelerate_towards","mover","target","acceleration","maxSpeed","colDistance","brake","delta","magnitude","accelerator_coast","lerp","cube_lerp","z","cube_round","rx","round","ry","rz","x_diff","abs","y_diff","z_diff","cube_to_axial","axial_to_cube","cube_linedraw","N","cube_distance","Orientation","f0","f1","f2","f3","b0","b1","b2","b3","start_angle","layout_pointy","hex_to_pixel","size","origin","h","M","polarToPoint","p","cos","az","sin","transformPoint","transform","BuildingIcon","UpgradedBuildingIcon","BuildingJobIcon","BuildingToGood","GoodToBuilding","JobToBuilding","BuildingToJob","DistrictHexSize","CreateEntitySlice","all","entity","nextID","EntityAddToSlice","slice","newEntity","RandomSeeds","GetRandomGenerator","Rand","PRNG","sfc32","GetRandomNumber","randomNumber","next","ceil","floor","GetRandomRoll","chance","GetRandom","choices","GetRandomIndex","RandomIdeal","RandomCommunity","RandomFaith","PI","CityPrefixes","CityFirstsnames","CityLastnames","GenerateCity","numberOfRings","hexes","hex_size","petriRadius","petriOrigin","GenerateGeography","deadBeanKeys","beanKeys","ufoKeys","pickupKeys","buildingKeys","pickupMagnetPoint","costOfLiving","buildingMap","districtKeys","GenerateDistrictsAndLots","city","lots","ds","isCenter","d","kind","hexString","GenerateDistrict","DistrictAddLots","urbanHexes","ruralHexes","district","lotSlice","lot","districtKey","GenerateBean","parent","hexPoint","newBean","cityKey","ethnicity","community","ideals","faith","stamina","health","food","discrete_food","discrete_health","discrete_sanity","discrete_stamina","discrete_fun","housing","graceTicks","dob","sanity","beliefs","hedonHistory","priorities","happiness","flatAverage","maxSource","minSource","weightedAverage","lastHappiness","hedonFiveDayRecord","fairGoodPrice","bornInPetri","cash","ticksSinceLastSale","ticksSinceLastRelax","lastChatMS","action","actionData","act","activity_duration","beanBeliefCount","random","newBelief","includes","split","PlayerKnowsPrereq","prereq","seen","Array","isArray","some","PlayerKnowsBelief","BeliefString","LawData","group","axis","prereqs","IsLaw","gov","l","lawTree","GovPurchaseQualifiesForWelfare","law","buyer","good","bean","GovCanPayWelfare","price","BeanDistrictIdeologyBonus","BeanBelievesIn","AllGoods","MarketTransact","market","listing","demand","seller","salesTaxPercentage","MarketListingSubtract","listPrice","tax","grossPrice","bought","MarketGovernmentTransact","quantity","listings","EconomyTryTransact","economy","getSeller","minDemand","maxDemand","monthlyDemand","MarketLowestPriceListing","actualDemand","salesTaxPercent","receipt","unfulfilledMonthlyDemand","GetFairGoodPrice","econ","supply","monthlySupply","GetCostOfLiving","fullListings","numberOfSamePriceListings","lowPrice","GenerateEmoteFromBean","emote","Get","BeanCalculateHealth","difficulty","BeanCalculateStamina","BeanCalculateSanity","BeanCalculateFood","BeanMaybeChat","Date","now","roll","BeanEmote","source","out","trait","BeanMaybeBaby","BeanIsInCrisis","BeanCanBaby","base","BeanBabyChance","trigger","message","BeanMaybeDie","cause","isDire","BeanDie","pains","emotes","death","beanKey","BeanLoseSanity","amount","multiplier","BeanGetSpeech","chat","participation","preachBelief","BeanCanPurchase","cost","sanityBonus","BeanGetFace","BeanMaybeGetInsanity","insanity","existingBeliefs","s","find","GetInsanityFromBrainwashing","newInsanity","SignalStoreInstance","alienEnergy","alienBots","alienHedons","newTraitSeen","events","autosave","Goals","found_utopia","text","check","buildings","build_house_n_farm","reward","energy","bots","beam_3","scan","alien","scanned_bean","set_policy","brainwash","Curriculums","GradeWorld","Happiness","BooleanAverageGrader","o","Prosperity","Stability","Dogma","GradeUpToNumber","speechcrimes","RubricDescription","number","allowance","maximum","NormalizedScoreToGrade","array","grade","normNumber","GradeWeights","A","B","C","D","F","TechData","tech","techPoints","PlayerReward","player","change","hedons","HasResearched","techProgress","researchPoints","PlayerCanAfford","qty","PlayerTryPurchase","PlayerPurchase","DwellingKindToIcon","apartment","house","townhouse","loft","EnterpriseBuildings","BuildingNumOfOpenJobs","upgradedJobs","BuildingJobs","BuildingMaximumJobs","employeeBeanKeys","BeanLoseJob","employerEnterpriseKey","building","enterprise","enterprises","ownerBeanKey","BuildingUnsetJob","oldLen","BuildingTryFreeBean","BeanActions","enter","agent","elapsed","deltaMS","destinationTargetIndex","destinationIndex","destinations","intent","newActivity","console","warn","newAccelerator","collide","beanHitDestination","nearbyBeanKeys","bKey","squared","pow","CityGetNearestNeighbors","targets","findNeedy","needy","targetBeanKey","persuasionStrength","BeanGetRandomChat","least","changeState","newState","WanderlustEmoteChance","beanEmote","exit","beanWork","belief","strength","defense","BeanMaybePersuaded","beanBePersuaded","top","travelState","sideEffect","substitute","SubstituteIntent","CreateTravelFromIntent","shift","BeanMaybeParanoid","buyReceipt","buyAttempts","beanBuy","beanCrime","crimeGood","durationMS","beanRelax","desiredGoodState","EconomyCanBuy","BeanMaybeCrime","scarce","BeanMaybeScarcity","IntentToDestination","RouteRandomBuildingOfType","dwellingKey","dwelling","dwellings","buildingKey","lotKey","districts","RouteToHexAndPoint","destination","keysOfType","CityGetRandomHomelessSleepingBuilding","Route","RouteRandomHomelessSleepingBuilding","buildingDest","CityGetRandomEntertainmentBuilding","nature","GetPriority","deviation","StatsNormalDev","StatsNormalMean","bean_life","vital_thresh","shelter","medicine","GetPriorities","priors","priority","sort","buildingType","CityGetRandomBuildingOfType","start","nearestHex","pt","pixel_to_hex","AgentDurationStoreInstance","duration","BeanTryFindJob","employableBuildingKeys","employableBuildings","jobs","ideologyBonus","isEmpty","openJobs","BeanSetJob","Season","SFXToFile","SoundBuffer","file","volume","buffer","ended","audio","play","aud","Audio","process","WorldSfxInstance","lib","sfx","CommonalityBaseCost","CommonalityRandomMaxCost","getMarketTraitListing","rare","PartOfDay","TicksPerHour","simulate_world","eKey","workers","enterpriseType","share","owner","pay","commShare","simulate_every_other_tick","pop","unshift","simulate_every_day","marketTraitsForSale","newTraits","GetMarketTraits","WorldAddEvent","collected","cityID","selectBeansByCity","allowedTreasury","perBean","MaybeRebate","values","simulate_every_week","fun","simulate_every_month","arr","percent","sum","yearlyInflationDollars","richest","obj","winner","WorldInflate","simulate_every_year","income","currentlyResearchingTech","abductedBeanKeys","beliefInventory","gems","CoL","ageResult","diff","wasNotHungry","wasNotSick","degrade_per_tick","penalty","starving_health","starve","sick","BeanAge","pickups","lastPoint","openDwellingKey","dKey","occupantKey","allSum","daySum","sources","allSources","val","GetHedonReport","goals","goal","goalProgress","done","step","CheckGoals","workingReportCard","CheckReportCard","removedID","triadToString","sign","costs","tortrons","join","DefaultDifficulty","emptyHex","build","farm","theater","hospital","church","courthouse","park","beam","upgrade","fallow_2_rural","rural_2_urban","add_loft","bean_brain","brainwash_ideal","brainimplant_secondary","brainwash_secondary","abduct","gift","empower","vaporize","siphon","scrubHedons","resource","common","uncommon","unique","homeless_health","death_chance","starvation","sickness","exposure","vaporization","report_card_progression","worldSlice","createSlice","initialState","ufos","titles","laws","Spring","seenBeliefs","next_grade","pastReportCards","spotlightEvent","insanityEvent","GetBlankWorldState","reducers","refreshMarket","magnetChange","payload","px","worldTick","newGame","dls","natureID","loadGame","what","newBuilding","upgradedLoft","upgradedStorage","enterpriseKey","dwellingKeys","newDwell","sellerCityKey","sellerEnterpriseKey","GenerateIBuilding","upgradeDistrict","changeEnterprise","newType","fireBean","upgradeLoft","upgradeStorage","ufo","where","remove_ufo","ufoKey","cheatAdd","release","lucky_bean_key","luckyBean","washCommunity","washMotive","washNarrative","oldFaith","washBelief","sanityCostBonus","extractBelief","existing","chargeBonus","acknowledgeNewInsanity","setResearch","implant","PlayerUseTraitGem","pickUpPickup","pickup","pickupKey","amt","oldAct","ADS","beanGiveCharity","senderBeanKey","_emote","needyBeanKey","_ifBelievesInMaybeEmote","last","GoodToJob","workedForEmployer","employer","EconomyEmployAndPrice","sellerBeanKey","EconomyProduceAndPrice","stolen","enactLaw","data","lawKey","repealLaw","buyBots","buyEnergy","buyTrait","addTitle","privileges","editTitle","oldTitle","newT","badge","titleKey","headwear","hat","manualSave","SaveGame","beanSetTitle","title","beanPosition","actions","selectCityBeanIDs","createSelector","cityBeanIDs","beansByID","cityBeanKey","useAppDispatch","cityBeans","count","circle","square","triangle","useDispatch","useAppSelector","useSelector","selectedSlice","selectedCityKey","selectedBeanKey","doSelectCity","selectedBuildingKey","selectedDistrictKey","selectedLotKey","doSelectDistrict","doSelectLot","doSelectBuilding","doSelectBean","selectedHexKey","doSelectNone","store","configureStore","reducer","selected","middleware","getDefaultMiddleware","storeApi","startsWith","selectSelectedCity","selectSelectedBean","selectSelectedBuilding","buildingID","selectEventIDs","ConfirmButton","props","confirming","onConfirm","setState","className","onClick","click","disabled","confirmText","children","React","Component","StringDropdown","onChange","value","hint","hidden","titleCase","toUpperCase","options","getTitleForOption","getTextForOption","required","BeliefWidget","leftButton","titleView","bottomView","EditBeliefInput","divergent","frozen","available","wash","extract","SortedBeliefs","localeCompare","TraitInventoryList","dispatch","dogmatic","BrainwashingContent","isScanned","brains","colSpan","style","clear","Subtabs","additionalClasses","active","PrivilegeData","social_deference","criminal_immunity","tax_exemption","hereditary","gentility","SocietyPanel","onEdit","TitleEdit","ev","newArray","keyToName","starving","hungry","sated","stuffed","homeless","sleepy","awake","rested","sickly","bruised","fresh","sane","stressed","disturbed","housed","NeedReadout","dire","need","dire_style","width","full","full_style","header","median","half","EconomyReport","numDwellings","food_median","health_median","toFixed","shelter_median","wealth_total","wealth_avg","wealth_median","wealth_dire","wealth_marker","wealthy","wealthy_percentage","wealthy_ownership","unemployed","jobless","avg","meds","farmer","builder","doc","entertainer","EscapeMenu","TreasuryReport","coin","GovernmentPanel","useState","view","setView","LawDetailList","enacted","lKey","revokeLaw","LawFormula","canSeeName","unlocked","every","PlayerMeetsPrereqs","has","PrereqString","GreetingPanel","whiteSpace","changeSeed","currentTarget","maxLength","fontFamily","fontSize","LoadGameMenu","MainMenu","continueID","HasContinueGame","GetGameSlots","startGame","RobotArm","height","xmlns","classN","fill","display","overflow","strokeWidth","stroke","cy","cx","tool","tools","loop","lastI","ResearchPanel","currentTech","tool1","setTool1","tool2","setTool2","tool3","setTool3","tool4","setTool4","useEffect","interval","window","setInterval","clearInterval","techs","progress","total","complete","isCurrent","rootClassName","renderTech","TraitsReport","AnimatedUFO2","showBeam","setShowBeam","setTimeout","EnterpriseTypes","EnterpriseTypeIcon","CostSmall","rider","DwellingList","beanNames","substr","BeamButton","BuildPanel","districtLots","targetLot","eHex","DistrictTypeIcon","urban","rural","fallow","DistrictTypeText","HexPanel","HexBuildingPanel","hasJobs","upgraded","renderDensityWarning","typ","WorkerList","EnterpriseTypePicker","substring","EnterpriseListings","hexDirectionToJobSlot","2","0","4","1","5","3","BuildingToJobIcon","PetriGoods","goodType","is","row","col","ii","PetriBuilding","UIBuilding","getStyle","UIBuildingSlots","jobSlot","hasJob","PetriLot","preventDefault","lotDrawn","PetriHex","extraClasses","hex_style","onMouseEnter","isDefaultPrevented","stopPropagation","viewBox","version","position","left","opacity","PetriHexes2","SocialBuildings","selectBuildingKeysByCity","selectBuildingsByCity","onClickBuilding","Magnet2","useRef","magnetPoint","BeanIsBuying","AnimatedBean","st","working","speech","face","classes","animationClasses","selectBeanAnimation","isSelected","sitStill","AnimatedPickup","played","setPlayed","useContext","SfxContext","Mover","MoverContext","el","onMove","pubsub","moverType","moverKey","subscribe","unsubscribe","ref","PetriBeanList","PickupList2","pKey","HexSizeR","WorldTile2","mtn_transforms","mtnRadius","bk","onMouseLeave","uK","CardButton","thin","singleLine","subtext","TraitToCard","renderInner","scanned","innerView","idealPro","idealCon","hedonTable","ActivityDisplay","ActivityIcon","acts","actDurations","BeanPanel","faceOverride","setFaceOverride","setInnerView","_resetFace","renderTraits","entitle","TitleButton","TitleView","OverviewPanel","clearCity","avg_happy","avg_cash","scannedBeans","from","m","prev","get","set","Map","entries","aC","CityGetPopulationTraitsList","DetailPanel","openBrainwash","openEntitle","EventsPanel","eventIDs","reverse","elements","alert","tallTrigger","shouldEventJumpToBean","href","renderGoal","g","tooltip","renderReward","GoalsPanel","reportCard","margin","MarketPanel","MarketTraits","fourLetterWords","GetSeedName","rand","AutosaveWidget","isDirty","setDirty","isSaving","setSaving","onDirty","dirty","onSaving","BubbleNumberText","bubbleSeed","positive","bubbles","string","changeEvent","bubbleClass","BubbleSeenTraitsText","sub","setBubbles","onEvent","event","useBubbles","CapsuleLabel","label","EnergyAmount","BotsAmount","HedonAmount","Modal","show","closeButtonText","getButton","SeasonWidget","Morning","Noon","Evening","SocialGraph","static","StopPlayFastButtons","timeScale","setTimeScale","GeoNetworkButtons","activeMain","setActiveMain","TimelyEventToggle","eventCount","eventClass","eventIcon","EntitleModalContent","closeModal","createContext","StoreState","App","previousTimeMS","logicTickAccumulatorMS","millisecondsSinceLastSave","saveAccumulatorMS","tick","timeMS","deltaTimeMS","gameDeltaTimeMS","animate_ufos","getState","pickupIDs","pickupID","magnet","animate_pickups","actResult","exitAction","enterAction","animate_beans","requestAnimationFrame","cheatMode","keyupHandler","activeModal","newGameSeed","shiftKey","onDeath","startSpotlight","timescaleBeforeSpotlight","activeRightPanel","document","addEventListener","time","removeEventListener","endSpotlight","Provider","minScale","centerZoomedOut","centerOnInit","initialPositionX","limitToBounds","alignmentAnimation","wheel","slot","GetGame","n","getPanel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a5e2876f.chunk.js","sourcesContent":["import { Point } from \"../simulation/Geography\";\r\n\r\nexport type EventTrigger = 'speechcrime'|'birth'|'death'|'nojobslots'|'marketrefresh'|'persuasion';\r\n\r\nexport interface IEvent{\r\n    key: number;\r\n    icon: string;\r\n    message: string;\r\n    beanKey?: number;\r\n    cityKey?: number;\r\n    point?: Point;\r\n    trigger: EventTrigger;\r\n}\r\n\r\nexport const EventBufferLength = 25; \r\n\r\nexport class PubSub<T>{\r\n    constructor(private onPublish?: (args: T) => void){}\r\n    private callbacks: Array<(args: T) => void> = [];\r\n    public current: T|undefined = undefined;\r\n    public publish(args: T){\r\n        if (this.onPublish)\r\n            this.onPublish(args);\r\n        this.current = args;\r\n        this.callbacks.forEach((c) => c(args));\r\n    }\r\n    public subscribe(callback: (args: T) => void){\r\n        this.callbacks.push(callback);\r\n    }\r\n    public unsubscribe(callback: (ev: T) => void) {\r\n        this.callbacks.splice(this.callbacks.indexOf(callback), 1);\r\n    }\r\n}\r\n\r\nexport class ChangePubSub extends PubSub<{change: number}>{\r\n}\r\n\r\n","import { PubSub } from \"./events/Events\";\r\nimport { IDate } from \"./simulation/Time\";\r\nimport { IWorldState } from \"./state/features/world\";\r\n\r\nconst GameSavePrefix = 'game-';\r\nconst GameBriefPrefix = 'game-brief-';\r\nconst LastGameSaveIDKey = 'last-game-id';\r\nconst MaxNumGameSlots = 3;\r\n\r\ninterface IWorldBrief {\r\n    Name: string,\r\n    Population: number,\r\n    Age: IDate\r\n}\r\nexport function isGame(g: {game: IWorldState}|{errors: string[]}): g is {game:IWorldState}{\r\n    return (<any>g).game != null;\r\n}\r\nexport class GameStorage{\r\n    HasContinueGame(): number|undefined{\r\n        const rawID = localStorage.getItem(LastGameSaveIDKey);\r\n        if (rawID == null)\r\n            return undefined;\r\n\r\n        const id = parseInt(rawID);\r\n        if (isNaN(id))\r\n            return undefined;\r\n\r\n        const rawgame = localStorage.getItem(`${GameSavePrefix}${id}`);\r\n        if (rawgame != null)\r\n            return id;\r\n        else\r\n            return undefined;\r\n    }\r\n    GetGameSlots(): {id: number, brief?: IWorldBrief}[] {\r\n        const slots: {id: number, brief: IWorldBrief}[] = [];\r\n        for (let i = 0; i < MaxNumGameSlots; i++) {\r\n            const brief = localStorage.getItem(`${GameBriefPrefix}${i+1}`);\r\n            slots.push({\r\n                id: i+1,\r\n                brief: brief ? JSON.parse(brief) : undefined\r\n            });\r\n        }\r\n        return slots;\r\n    }\r\n    GetGame(id: number): {game: IWorldState}|{errors: string[]}{\r\n        const rawgame = localStorage.getItem(`${GameSavePrefix}${id}`);\r\n        if (rawgame){\r\n\r\n        } else {\r\n            return {\r\n                errors: ['Cannot find game']\r\n            }\r\n        }\r\n        try {\r\n            const game = JSON.parse(rawgame);\r\n            return {\r\n                game: game as IWorldState\r\n            }\r\n        } catch(e) {\r\n            return {\r\n                errors: [e]\r\n            }\r\n        }\r\n    }\r\n    SaveGame(world: IWorldState){\r\n        const raw = JSON.stringify(world);\r\n        const brief: IWorldBrief = {\r\n            Name: world.cities.byID[0].name,\r\n            Population: world.beans.allIDs.map(x => world.beans.byID[x]).filter(y => y.lifecycle != 'dead').length,\r\n            Age: {\r\n                day: world.date.day,\r\n                hour: world.date.hour,\r\n                season: world.date.season,\r\n                year: world.date.year\r\n            }\r\n        };\r\n        localStorage.setItem(`${GameSavePrefix}${world.saveSlot}`, raw);\r\n        localStorage.setItem(`${GameBriefPrefix}${world.saveSlot}`, JSON.stringify(brief));\r\n        localStorage.setItem(LastGameSaveIDKey, world.saveSlot.toString());\r\n        this.Dirty.publish(false);\r\n        this.Saving.publish();\r\n    }\r\n    Dirty = new PubSub<boolean>();\r\n    Saving = new PubSub<void>();\r\n}\r\nexport const GameStorageInstance = new GameStorage();","import * as React from 'react';\r\nimport { Season, IDate } from './simulation/Time';\r\nimport { Act, IBean, IChatData } from './simulation/Agent';\r\nimport { IDifficulty, PlayerResources } from './Game';\r\nimport { type } from 'os';\r\nimport { GetHedonReport, IsBeliefDivergent, SecondaryBeliefData, TraitBelief } from './simulation/Beliefs';\r\nimport { WorldSfxInstance, WorldSound } from './WorldSound';\r\nimport { GetMarketTraits, MarketTraitListing } from './simulation/MarketTraits';\r\nimport { IWorldState } from './state/features/world';\r\n\r\nexport const PickupPhysics = {\r\n    Brake: { x: .94, y: .94},\r\n    AccelerateS: 60,\r\n    MaxSpeed: 9,\r\n    CollisionDistance: 10\r\n}\r\nexport const BeanPhysics = {\r\n    Brake: { x: .94, y: .94},\r\n    AccelerateS: 10,\r\n    MaxSpeed: 4,\r\n    CollisionDistance: 10\r\n}\r\nexport const MaxHedonHistory = 5;\r\n\r\nexport interface IEnvironment{\r\n    year: number;\r\n    season: Season;\r\n}\r\n\r\nexport interface ITile {\r\n    name?: string, \r\n    url: string, \r\n    type: string,\r\n    key: number\r\n}\r\n\r\n\r\nexport type TraitCommunity = 'state'|'ego';\r\nexport type TraitIdeals = 'prog'|'trad';\r\nexport type TraitEthno = 'circle'|'square'|'triangle';\r\nexport type TraitFaith = 'rocket'|'music'|'dragon'|'noFaith';\r\nexport type TraitFood = 'starving'|'hungry'|'sated'|'stuffed';\r\nexport type TraitStamina = 'sleepy'|'awake'|'rested';\r\nexport type TraitHousing = 'homeless'|'housed';\r\nexport type TraitHealth = 'sick'|'sickly'|'bruised'|'fresh';\r\nexport type TraitSanity = 'psychotic'|'disturbed'|'stressed'|'sane';\r\nexport type TraitJob = 'farmer'|'builder'|'doc'|'entertainer'|'cleric'|'polit'|'jobless';\r\n\r\nexport type Trait = TraitCommunity|TraitIdeals|TraitEthno|TraitFaith|TraitFood|TraitStamina|TraitHealth|TraitSanity|TraitHousing;\r\n\r\nexport const TraitIcon: {[key in Trait]: string} = {\r\n    'state': '🕊️', 'ego': '🦅',\r\n    'prog': '⚖️', 'trad': '👑',\r\n    'circle': '🤎', 'square': '💛', 'triangle': '🧡',\r\n    'rocket': '🚀', 'music': '🎵', 'dragon': '🐲',\r\n    'noFaith': '⚫️',\r\n    'starving': '🍴', 'hungry': '🍽️', 'sated': '🥜', 'stuffed': '🥩',\r\n    'homeless': '🌨️', 'housed': '🚪', 'sleepy': '🌙', 'awake': '☀️', 'rested': '🌞',\r\n    'sick': '🤢', 'sickly': '😷', 'bruised': '🩹', 'fresh': '💪',\r\n    'psychotic': '🤪', 'disturbed': '🤤', 'stressed':'', 'sane': '🧠',\r\n}\r\nexport enum MaslowHappinessScore {Deficient= -.25, Sufficient=0, Abundant=.15}\r\n\r\nexport interface IHappinessModifier{\r\n    reason: string;\r\n    /**\r\n     * -1 to 1, where 0 is \"no effect\" and +/-1 is +/-100%\r\n     */\r\n    mod: number;\r\n}\r\n\r\nexport function GetHappiness(array: IHappinessModifier[]){\r\n    const clampedPercent = Math.min(\r\n        1,\r\n        Math.max(\r\n            -1,\r\n            array.reduce((sum, hapMod) => {\r\n                sum += hapMod.mod;\r\n                return sum\r\n            }, 0)\r\n        )\r\n    );\r\n\r\n    return (clampedPercent * 100);\r\n}\r\n\r\nexport interface IThreshold {warning: number, sufficient: number, abundant: number}\r\nexport const GoodToThreshold: {[key in TraitGood]: IThreshold} = {\r\n    'food': {warning: 0.5, sufficient: 1, abundant: 3},\r\n    'medicine': {warning: 0.5, sufficient: 1, abundant: 3},\r\n    'fun': {warning: 0.1, sufficient: 1, abundant: 3},\r\n}\r\n\r\nexport function JobToGood(job: TraitJob): TraitGood{\r\n    switch(job){\r\n        case 'doc': return 'medicine';\r\n        case 'entertainer': return 'fun';\r\n        default: case 'farmer': return 'food';\r\n    }\r\n}\r\nexport function GoodToJob(good: TraitGood): TraitJob{\r\n    switch(good){\r\n        case 'medicine': return 'doc';\r\n        case 'fun': return 'entertainer';\r\n        default: case 'food': return 'farmer';\r\n    }\r\n}\r\nexport type TraitGood = 'food'|'medicine'|'fun';\r\nexport const GoodIcon: {[key in TraitGood]: string} ={\r\n    'food': '🥪',\r\n    'medicine': '💊', \r\n    'fun': '👏'\r\n};\r\n\r\nexport type TraitEmote = 'happiness'|'unhappiness'|'love'|'hate';\r\nexport const EmoteIcon: {[key in TraitEmote]: string} ={\r\n    'love': '💛',\r\n    'happiness': '👍',\r\n    'unhappiness': '💢',\r\n    'hate': '💔'\r\n};\r\nexport const EmotionWorth: {[key in TraitEmote]: number} ={\r\n    'love': 5,\r\n    'happiness': 1,\r\n    'unhappiness': -1,\r\n    'hate': -5\r\n};\r\nexport const EmotionSanity: {[key in TraitEmote]: number} ={\r\n    'love': 1,\r\n    'happiness': 0.2,\r\n    'unhappiness': 0,\r\n    'hate': -1\r\n};\r\n\r\nexport function WorldInflate(world: IWorldState){\r\n    const beans = world.beans.allIDs.reduce((arr, key) => { arr.push(world.beans.byID[key]); return arr;}, [] as IBean[])\r\n    const allMoney = beans.reduce((sum, b) => sum+b.cash, 0);\r\n    const percent = allMoney / 100;\r\n    const yearlyInflationDollars = Math.round(percent * 1);\r\n    if (yearlyInflationDollars > 0){\r\n        const richest = beans.reduce((obj: {winner?: IBean, max: number}, b) => {\r\n            if (b.cash > obj.max){\r\n                obj.winner = b;\r\n                obj.max = b.cash;\r\n            }\r\n            return obj;\r\n        }, {max: 0});\r\n        if (richest.winner){\r\n            richest.winner.cash += yearlyInflationDollars;\r\n        }\r\n    }\r\n}","import { MoverStore } from \"./simulation/MoverBus\";\r\n\r\nexport const MoverStoreInstance = new MoverStore();","import { PubSub } from \"../events/Events\";\r\nimport { IAccelerator } from \"./Geography\";\r\n\r\nexport type MoverType = 'ufo'|'bean'|'pickup';\r\ntype MoverCache = {\r\n    [key in MoverType]: {\r\n        [k2: number]: PubSub<IAccelerator>;\r\n    };\r\n};\r\n\r\nexport class MoverStore{\r\n    private cache: MoverCache = {\r\n        'ufo': {},\r\n        'bean': {},\r\n        'pickup': {}\r\n    }\r\n    public Get(type: MoverType, key: number): PubSub<IAccelerator>{\r\n        if (!this.cache[type][key])\r\n            this.cache[type][key] = new PubSub<IAccelerator>();\r\n        return this.cache[type][key];\r\n    }\r\n}","import { TraitCommunity, TraitFaith, TraitIdeals, TraitSanity } from \"../World\";\r\nimport { GetRandom, GetRandomRoll } from \"../WorldGen\";\r\n\r\nexport type BeliefCommonality = 'common'|'uncommon'|'rare'|'unique';\r\nexport const CommonalityChances: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 2,\r\n    'rare': 1,\r\n    'unique': 0\r\n};\r\n\r\nexport type TraitBelief = 'Diligence'| // happy from work\r\n'Natalism'| // increased % of having kids\r\n'Antinatalism'|\r\n'Naturalism'|\r\n'Hedonism'| //more entertainment\r\n'Progressivism'|\r\n'Libertarianism'|\r\n'Parochialism'|\r\n'Cosmopolitanism'|\r\n'Capitalism'|\r\n'Socialism'|\r\n'Communism'|\r\n// 'Tribalism'| \r\n// 'Globalism'| \r\n// 'Pacifism'| \r\n'Neuroticism'| // takes extra sanity damage\r\n'Dogmatism'| \r\n// 'Mysticism'| \r\n 'Paranoia'| \r\n// 'Evangelism'| \r\n// 'Fanaticism'| // doesn't like beings that don't share narrative \r\n'Authority'| //less crime, more crime reports\r\n'Anarchism'| // breaks rules easily\r\n'Sadism'| \r\n'Vandalism'|\r\n'Antagonism'|\r\n'Enthusiasm'|\r\n'Gossip'|\r\n'Extroversion'|\r\n'Charity'| // % to donate\r\n'Gluttony'|\r\n'Wanderlust'|\r\n'Germophobia'|\r\n'Bloodthirst'|\r\n'Introversion'|\r\n'Charisma'|\r\n'Depression'|\r\n'Optimism'|\r\n'Fraud'|\r\n'Greed'| // steal easier\r\n'Delirium'|\r\n'Catatonia'|\r\n'DelusionalMania';\r\n\r\n\r\n// 'friendly'| // likes all beings more\r\n// 'realistic'| // lower happiness\r\n// 'athletic'| // takes less health damage\r\n// 'open-minded'| // beliefs are easily changed\r\n\r\nexport type BeliefSubject = 'self'|'other';\r\nexport type BeliefVerb = 'are'|'arenot';\r\nexport interface IBeliefData {\r\n    noun: string,\r\n    adj: string,\r\n    icon: string,\r\n    description?: string,\r\n    rarity: BeliefCommonality,\r\n    idealPro?: Array<TraitIdeals|TraitCommunity>,\r\n    idealCon?: Array<TraitIdeals|TraitCommunity>\r\n}\r\nexport const PrimaryBeliefData: {[key in TraitIdeals|TraitCommunity]: IBeliefData} = {\r\n    prog: {\r\n        noun: 'Progressivism', adj: 'Progressive', icon: '⚖️',\r\n        description: \"Strives to help others\", rarity: 'common',\r\n    },\r\n    trad: {\r\n        noun: 'Elitism', adj: 'Elitist', icon: '👑',\r\n        description: \"Strives for individual power\", rarity: 'common',\r\n    },\r\n    state: {\r\n        noun: 'Collectivism', adj: 'Collectivist', icon: '🕊️',\r\n        description: \"Trusts in the social group\", rarity: 'common',\r\n    },\r\n    ego: {\r\n        noun: 'Independence', adj: 'Independent', icon: '🦅',\r\n        description: \"Trusts only in oneself\", rarity: 'common',\r\n    },\r\n}\r\nexport const NarrativeBeliefData: {[key in TraitFaith]: IBeliefData} = {\r\n    rocket: {\r\n        noun: 'Futurism', adj: 'Futuristic', icon: '🚀',\r\n        description: \"Loves stories of the far future\", rarity: 'common',\r\n    },\r\n    dragon: {\r\n        noun: 'Mythology', adj: 'Mythical', icon: '🐲',\r\n        description: \"Loves stories of the legendary past\", rarity: 'common',\r\n    },\r\n    music: {\r\n        noun: 'Drama', adj: 'Dramatic', icon: '🎵',\r\n        description: \"Loves stories of emotional bonding\", rarity: 'common',\r\n    },\r\n    noFaith: {\r\n        noun: 'Nihilism', adj: 'Nihilist', icon: '⚫️',\r\n        description: \"Hates fairy tales\", rarity: 'common',\r\n    },\r\n}\r\nexport const SecondaryBeliefData: {[key in TraitBelief]: IBeliefData} = {\r\n    // misc 🎲 traits\r\n    Diligence: {\r\n        noun: 'Diligence', adj: 'Diligence', icon: '💪', rarity: 'common',\r\n        description: \"🎲 to 👍 while working\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['state', 'ego']\r\n    },\r\n    Natalism: {\r\n        noun: 'Natalism', adj: 'Natalist', icon: '👶', rarity: 'common',\r\n        description: \"Extra 🎲 for 👶;Extra 👍 after birth\" //implemented\r\n    },\r\n    Antinatalism: {\r\n        noun: 'Antinatalism', adj: 'Antinatalist', icon: '🚷', rarity: 'uncommon',\r\n        description: \"Less 🎲 for 👶;💢 after birth\" //implemented\r\n    },\r\n    Charity: {\r\n        noun: 'Charity', adj: 'Charitable', icon: '😇', rarity: 'uncommon',\r\n        description: \"🎲 to gift 💰 to the penniless; and spread 👍\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog']\r\n    },\r\n    Progressivism: {\r\n        noun: 'Progressivism', adj: 'Progressive', icon: '⚖️', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when paying taxes\" //implemented\r\n    },\r\n    Libertarianism: {\r\n        noun: 'Libertarianism', adj: 'Libertarian', icon: '🔫', rarity: 'rare',\r\n        description: \"🎲 to 💢 when paying taxes\", //implemented\r\n    },\r\n    Wanderlust: {\r\n        noun: 'Wanderlust', adj: 'Wanderer', icon: '🔭', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when travelling\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Germophobia: {\r\n        noun: 'Germophobia', adj: 'Germophobic', icon: '🤧', rarity: 'rare',\r\n        description: \"💢 when sick or working in hospital\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n\r\n    // work traits\r\n    Parochialism: {\r\n        noun: 'Parochialism', adj: 'Parochial', icon: '🐮', rarity: 'common',\r\n        description: \"Extra 👍 working 🌾; 💢 from dense houses\",  //first part implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Cosmopolitanism: {\r\n        noun: 'Cosmopolitanism', adj: 'Cosmopolitan', icon: '🍸', rarity: 'common',\r\n        description: \"Extra 👍 working 🎻; 💢 from rural houses\",  //first part implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Capitalism: {\r\n        noun: 'Capitalism', adj: 'Capitalist', icon: '🎩', rarity: 'common',\r\n        description: \"💢 working in co-ops and communes; Extra 👍 when owner\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Socialism: {\r\n        noun: 'Socialism', adj: 'Socialist', icon: '🤝', rarity: 'common',\r\n        description: \"Extra 👍 working in co-ops\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n    Communism: {\r\n        noun: 'Communism', adj: 'Communist', icon: '⚒️', rarity: 'common',\r\n        description: \"💢 working in companies\", //implemented\r\n        //idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    },\r\n\r\n    Fraud: {\r\n        noun: 'Fraud', adj: 'Fraudulent', icon: '🤥', rarity: 'uncommon',\r\n        description: \"🎲 to avoid taxes; Extra 🎲 for theft 😈 Crime\"\r\n    },\r\n\r\n    // 👍 traits\r\n    Naturalism: {\r\n        noun: 'Naturalism', adj: 'Naturalist', icon: '🛶', rarity: 'uncommon',\r\n        description: \"Extra 👍 from 😎; 😎 3x longer\" //implemented\r\n    },\r\n    Hedonism: {\r\n        noun: 'Hedonism', adj: 'Hedonistic', icon: '💋', rarity: 'uncommon',\r\n        description: \"🎲 to emote extra 👍;🎲 to 💢 when working;\", //implemented\r\n        //idealCon: ['prog'], idealPro: ['ego', 'trad']\r\n    },\r\n    Gluttony: {\r\n        noun: 'Gluttony', adj: 'Glutton', icon: '🎃', rarity: 'common',\r\n        description: \"Extra 👍 when stuffed; Extra 💢 when hungry;\", //implemented\r\n        //idealCon: ['prog'], idealPro: ['ego', 'trad']\r\n    },\r\n    Paranoia: {\r\n        noun: 'Paranoia', adj: 'Paranoid', icon: '👽', rarity: 'uncommon',\r\n        description: \"🎲 to 💢 at any time\",  //implemented\r\n        //idealCon: ['state'], idealPro: ['ego']\r\n    },\r\n    Depression: {\r\n        noun: 'Depression', adj: 'Depressive', icon: '😓', rarity: 'common',\r\n        description: \"🎲 to 💢 when unhappy\",\r\n    },\r\n    Optimism: {\r\n        noun: 'Optimism', adj: 'Optimistic', icon: '😺', rarity: 'uncommon',\r\n        description: \"🎲 to 👍 when happy\",\r\n    },\r\n\r\n    // 😈 Crime traits\r\n    Authority: {\r\n        noun: 'Authority', adj: 'Authoritarian', icon: '👢', rarity: 'common',\r\n        description: \"Less 🎲 for all 😈 Crime\", //implemented\r\n        //idealCon: ['ego'], idealPro: ['state']\r\n    },\r\n    Anarchism: {\r\n        noun: 'Anarchism', adj: 'Anarchist', icon: '🖕', rarity: 'uncommon',\r\n        description: \"Extra 🎲 for all 😈 Crime\", //implemented\r\n    },\r\n    Greed: {\r\n        noun: 'Greed', adj: 'Greedy', icon: '🤑', rarity: 'common',\r\n        description: \"Extra 🎲 for theft 😈 Crime; Extra 👍 when rich\",\r\n        //idealCon: ['prog'], idealPro: ['trad']\r\n    },\r\n    Bloodthirst: {\r\n        noun: 'Bloodthirst', adj: 'Bloodthirsty', icon: '🩸', rarity: 'rare',\r\n        description: \"High 🎲 to ☠️ Kill during 😈 Crime\"\r\n    },\r\n    // Pacifism: {\r\n    //     noun: 'Pacifism', adj: 'Pacifist', icon: '😘', rarity: 'common',\r\n    //     description: \"will never punish others\",\r\n    //     idealCon: ['trad'], idealPro: ['prog']\r\n    // },\r\n    // Mysticism: {\r\n    //     noun: 'Mysticism', adj: 'Mystical', icon: '🔮', rarity: 'common',\r\n    //     description: \"🎲 to 👏 in any conversation\",\r\n    //     idealCon: ['trad'], idealPro: ['prog']\r\n    // },\r\n\r\n    // 🗣️ traits\r\n    Extroversion: {\r\n        noun: 'Extroversion', adj: 'Extroverted', icon: '🤩', rarity: 'common',\r\n        description: \"Extra 🎲 to start a 🗣️\", //implemented\r\n    },\r\n    Introversion: {\r\n        noun: 'Introversion', adj: 'Introverted', icon: '🤓', rarity: 'uncommon',\r\n        description: \"Less 🎲 to be in a 🗣️\", //implemented\r\n    },\r\n    Charisma: {\r\n        noun: 'Charisma', adj: 'Charismatic', icon: '😏', rarity: 'uncommon',\r\n        description: \"More 🎲 to persuade in a 🗣️\", //implemented\r\n    },\r\n    Gossip: {\r\n        noun: 'Gossip', adj: 'Gossipy', icon: '📞', rarity: 'common',\r\n        description: \"🎲 to spread 💢 in a 🗣️; 🎲 to 👍 after 🗣️\", //implemented\r\n    },\r\n    Antagonism: {\r\n        noun: 'Antagonism', adj: 'Antagonistic', icon: '🤬', rarity: 'common',\r\n        description: \"🎲 to spread 💢 in a 🗣️\" //implemented\r\n    },\r\n    Enthusiasm: {\r\n        noun: 'Enthusiasm', adj: 'Enthusiastic', icon: '🥳', rarity: 'common',\r\n        description: \"🎲 to spread 👍 in a 🗣️\" //implemented\r\n    },\r\n    // Globalism: {\r\n    //     noun: 'Globalism', adj: 'Globalist', icon: '🌍', rarity: 'common',\r\n    //     description: \"🎲 to 👍 other hair colors in a 🗣️\",\r\n    //     idealCon: ['trad'], idealPro: ['prog', 'state']\r\n    // },\r\n    // Tribalism: {\r\n    //     noun: 'Tribalism', adj: 'Tribal', icon: '🏰', rarity: 'common',\r\n    //     description: \"🎲 to 💢 other hair colors in a 🗣️\",\r\n    //     idealCon: ['prog'], idealPro: ['state', 'ego']\r\n    // },\r\n\r\n    // narrative traits\r\n    // Evangelism: {\r\n    //     noun: 'Evangelism', adj: 'Evangelist', icon: '📣', rarity: 'common',\r\n    //     description: \"+50% persuasion of 🎭\",\r\n    //     idealCon: ['ego'], idealPro: ['state']\r\n    // },\r\n    // Fanaticism: {\r\n    //     noun: 'Fanaticism', adj: 'Fanatical', icon: '👺', rarity: 'common',\r\n    //     description: \"🎲 to 💢 other 🎭\",\r\n    //     idealCon: ['prog'], idealPro: []\r\n    // },\r\n    // Xenophobia: {\r\n    //     noun: 'Xenophobia', adj: 'Xenophobic', icon: '🛑', rarity: 'common',\r\n    //     description: \"🎲 to 💢 when living with other hair colors\",\r\n    // },\r\n\r\n    // super bad traits\r\n    Sadism: {\r\n        noun: 'Sadism', adj: 'Sadistic', icon: '😈', rarity: 'rare',\r\n        description: \"🎲 to ☠️ Kill in a 🗣️;👍 from ☠️ Kill\"\r\n    },\r\n    Vandalism: {\r\n        noun: 'Vandalism', adj: 'Vandal', icon: '💩', rarity: 'rare',\r\n        description: \"🎲 to destroy goods;👍 from 😈 Theft Crime\"\r\n    },\r\n\r\n    // madness traits\r\n    Delirium: {\r\n        noun: 'Delirium', adj: 'Delirious', icon: '😪', rarity: 'unique',\r\n        description: \"Chooses actions at random\"\r\n    },\r\n    DelusionalMania: {\r\n        noun: 'Delusional Mania', adj: 'Delusional Maniac', icon: '😵', rarity: 'unique',\r\n        description: \"🎲 to ☠️ nearby subjects\"\r\n    },\r\n    Catatonia: {\r\n        noun: 'Catatonia', adj: 'Catatonic', icon: '😶', rarity: 'unique',\r\n        description: \"-60% walk speed. Cannot work.\"\r\n    },\r\n\r\n    // meta-traits\r\n    Neuroticism: {\r\n        noun: 'Neuroticism', adj: 'Neurotic', icon: '😱', rarity: 'rare',\r\n        description: \"+100% 🧠 damage\", //implemented\r\n    },\r\n    Dogmatism: {\r\n        noun: 'Dogmatism', adj: 'Dogmatic', icon: '🐶', rarity: 'uncommon',\r\n        description: \"Cannot change beliefs\", //implemented\r\n    },\r\n};\r\n\r\nexport function IsIdealDivergent(con: TraitCommunity|TraitIdeals, utopiaMotive: TraitIdeals, utopiaCommunity: TraitCommunity): boolean{\r\n    switch(con){\r\n        case 'trad':\r\n        case 'prog':\r\n            return con == utopiaMotive;\r\n        case 'state':\r\n        case 'ego':\r\n            return con == utopiaCommunity;\r\n    }\r\n}\r\n\r\nexport function IsBeliefDivergent(belief: TraitBelief, utopiaMotive: TraitIdeals, utopiaCommunity: TraitCommunity): boolean{\r\n    const data = SecondaryBeliefData[belief];\r\n    return data.idealCon != null && data.idealCon.reduce((isDivergent: boolean, con) => {\r\n        return isDivergent || IsIdealDivergent(con, utopiaMotive, utopiaCommunity);\r\n    }, false);\r\n}\r\n\r\nexport type InsanityTraits = 'Depression'|'Catatonia'|'Neuroticism'|'DelusionalMania'|'Delirium'|'Sadism'|'Antagonism';\r\nexport const Insanities: Array<InsanityTraits> = ['Depression','Catatonia','Neuroticism','DelusionalMania','Delirium','Sadism','Antagonism'];\r\nconst InsanityChances = {\r\n    'Catatonia': 2,\r\n    'Neuroticism': 2,\r\n    'DelusionalMania': 2,\r\n    'Delirium': 2,\r\n    'Sadism': 2,\r\n    'Depression': 1,\r\n    'Antagonism': 1\r\n};\r\n/**\r\n * maps bean sanity to chance of getting any insanity.\r\n * \r\n * Value will be between 0-1\r\n */\r\nconst SanityChances = {\r\n    'psychotic': 1,\r\n    'disturbed': .65,\r\n    'stressed': .1,\r\n    'sane': 0\r\n}\r\nexport function GetInsanityFromBrainwashing(seed: string, sanity: TraitSanity, existingBeliefs: TraitBelief[]): InsanityTraits|undefined{\r\n    const chance = SanityChances[sanity];\r\n    if (GetRandomRoll(seed, chance)){\r\n        const list: InsanityTraits[] = [];\r\n        for (let s = 0; s < Insanities.length; s++) {\r\n            const insanity = Insanities[s];\r\n\r\n            // don't allow duplicate insanities\r\n            if (existingBeliefs.find(x => x === insanity))\r\n                continue;\r\n            \r\n            let slots = InsanityChances[insanity];\r\n            if (sanity === 'psychotic')\r\n                slots *= 2;\r\n            \r\n            for (let i = 0; i < slots; i++) {\r\n                list.push(insanity);\r\n            }\r\n        }\r\n        return GetRandom(seed, list);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const BeliefsAll = Object.keys(SecondaryBeliefData).map((x) => x as TraitBelief);\r\n\r\n/**\r\n * static list of beliefs with rarity\r\n * \r\n * common traits are duplicated many times within the array\r\n * rarer traits have fewer duplications or a singular instance \r\n */\r\nexport const RandomBeliefBucket = Object.keys(SecondaryBeliefData).reduce((list, str) => {\r\n    const t = str as TraitBelief;\r\n    const slots = CommonalityChances[SecondaryBeliefData[t].rarity];\r\n    for (let i = 0; i < slots; i++) {\r\n        list.push(t);\r\n    }\r\n    return list;\r\n}, [] as TraitBelief[]);\r\n\r\nexport interface Belief{\r\n    subject: BeliefSubject;\r\n    verb: BeliefVerb;\r\n    adj: TraitBelief;\r\n}\r\n\r\nexport type HedonSourceToVal = {[source: string]: number};\r\nexport interface HedonReport {\r\n    flatAverage: number,\r\n    weightedAverage: number,\r\n    maxSource: string,\r\n    minSource: string,\r\n    all: HedonSourceToVal\r\n}\r\nexport interface HedonExtremes { max:number, min:number }\r\n\r\nexport function GetHedonReport(hedonHistory: HedonSourceToVal[]): HedonReport {\r\n    if (hedonHistory.length === 0){\r\n        return {\r\n            all: {},\r\n            flatAverage: 0,\r\n            weightedAverage: 0,\r\n            maxSource: '',\r\n            minSource: ''\r\n        }\r\n    }\r\n    const all: {[source: string]: number} = {};\r\n    let weightedAverage: number = 0;\r\n    let allSum: number = 0;\r\n    for (let i = 0; i < hedonHistory.length; i++) {\r\n        const day = hedonHistory[i];\r\n        let daySum = 0;\r\n        const sources = Object.keys(day);\r\n        for (let j = 0; j < sources.length; j++) {\r\n            const source = sources[j];\r\n            daySum += day[source];\r\n            if (!all[source]) all[source] = 0;\r\n            all[source] += day[source];\r\n        }\r\n        weightedAverage += daySum / (i + 1);\r\n        allSum += daySum;\r\n    }\r\n\r\n    const allSources = Object.keys(all);\r\n    return {\r\n        flatAverage: allSum / hedonHistory.length,\r\n        weightedAverage: weightedAverage,\r\n        maxSource: allSources.reduce((max, source) => {\r\n            if (all[source] > max.val)\r\n                return {source: source, val: all[source]};\r\n            else return max;\r\n        }, {source: '', val: 0}).source,\r\n        minSource: allSources.reduce((max, source) => {\r\n            if (all[source] < max.val)\r\n                return {source: source, val: all[source]};\r\n            else return max;\r\n        }, {source: '', val: 0}).source,\r\n        all: all\r\n    }\r\n}","import { GetRandomFloat } from \"../WorldGen\";\r\n\r\nexport function shuffle<T>(array: Array<T>) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport function MathClamp(input: number, min: number, max: number): number{\r\n    return Math.max(Math.min(input, max), min)\r\n}\r\n\r\nexport function groupBy<T>(list: T[], keyGetter: (val: T) => string|number): Map<string|number, T[]> {\r\n    const map = new Map<string|number, T[]>();\r\n    list.forEach((item) => {\r\n         const key = keyGetter(item);\r\n         const collection = map.get(key);\r\n         if (!collection) {\r\n             map.set(key, [item]);\r\n         } else {\r\n             collection.push(item);\r\n         }\r\n    });\r\n    return map;\r\n}\r\n\r\nexport const StatsNormalMean = 0.5;\r\nexport const StatsNormalDev = 0.125;\r\n\r\n/**\r\n * Marsaglia polar method\r\n * @param mean \r\n * @param standardDeviation \r\n * @returns \r\n */\r\nexport function SampleNormalDistribution(seed: string, mean: number = StatsNormalMean, standardDeviation: number = StatsNormalDev) {\r\n    let q, u, v, p;\r\n    do {\r\n        u = 2.0 * GetRandomFloat(seed) - 1.0;\r\n        v = 2.0 * GetRandomFloat(seed) - 1.0;\r\n        q = u * u + v * v;\r\n    } while (q >= 1.0 || q === 0);\r\n    p = Math.sqrt(-2.0 * Math.log(q) / q);\r\n    return mean + standardDeviation * u * p;\r\n}\r\n\r\nexport function toTitleCase(str: string): string{\r\n    return str[0].toUpperCase() + str.substr(1);\r\n}","import { TraitGood, TraitJob } from \"../World\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\nimport { IBuilding } from \"./RealEstate\";\r\nimport { MathClamp } from \"./Utils\";\r\n\r\nexport interface HexPoint{\r\n    q: number;\r\n    r: number;\r\n}\r\nexport type DistrictKind = 'fallow'|'rural'|'urban'|'nature';\r\nexport interface IDistrict extends HexPoint{\r\n    key: number,\r\n    hexString: string,\r\n    point: Point,\r\n    kind: DistrictKind,\r\n    lots: number[]\r\n}\r\nexport interface ILot{\r\n    key: number,\r\n    districtKey: number,\r\n    point: Point,\r\n    buildingKey?: number,\r\n    kind: 'rural'|'urban',\r\n}\r\nexport class Hex implements HexPoint{\r\n    constructor(public q: number, public r: number){}\r\n}\r\nexport const hex_directions: HexPoint[] = [\r\n    {q:+1, r:0}, {q: +1, r: -1}, {q: 0, r: -1}, \r\n    {q:-1, r:0}, {q: -1, r: +1}, {q: 0, r: +1}, \r\n];\r\nexport function hex_direction(direction: number): HexPoint{\r\n    return hex_directions[direction]\r\n}\r\n\r\nexport function hex_neighbor(hex: HexPoint, direction: number): HexPoint{\r\n    var dir = hex_direction(direction)\r\n    return {q: hex.q + dir.q, r: hex.r + dir.r};\r\n}\r\nexport function hex_distance(a: HexPoint, b: HexPoint): number{\r\n    return (Math.abs(a.q - b.q) \r\n          + Math.abs(a.q + a.r - b.q - b.r)\r\n          + Math.abs(a.r - b.r)) / 2\r\n}\r\nexport function hex_add(a: HexPoint, b: HexPoint): HexPoint {\r\n    return {q: a.q + b.q, r: a.r + b.r};\r\n}\r\nexport function hex_scale(a: HexPoint, k: number): HexPoint {\r\n    return {q:a.q * k, r:a.r * k};\r\n}\r\nexport function hex_ring(center: HexPoint, radius: number): HexPoint[]{\r\n    var results: HexPoint[] = [];\r\n    // this code doesn't work for radius == 0; can you see why?\r\n    var cube = hex_add(center, \r\n                        hex_scale(hex_direction(4), radius));\r\n    for (let i = 0; i < 6; i++) {\r\n        for (let j = 0; j < radius; j++) {\r\n            results.push(cube)\r\n            cube = hex_neighbor(cube, i);       \r\n        }\r\n    }\r\n    return results;\r\n}\r\nexport function hex_spiral(center: HexPoint, radius: number): HexPoint[]{\r\n    var results = [center];\r\n    for (let k = 0; k < radius; k++) {\r\n        results = results.concat(hex_ring(center, k));\r\n        //console.log(results);   \r\n    }\r\n    return results;\r\n}\r\n\r\nexport function move_towards(current: Point, target: Point, maxDistanceDelta: number)\r\n{\r\n    const a: Point = {x: target.x - current.x, y: target.y - current.y};\r\n    const magnitude = Math.sqrt(a.x * a.x + a.y * a.y);\r\n    if (magnitude <= maxDistanceDelta || magnitude == 0)\r\n    {\r\n        return target;\r\n    }\r\n    return {\r\n        x: current.x + a.x / magnitude * maxDistanceDelta,\r\n        y: current.y + a.y / magnitude * maxDistanceDelta,\r\n    };\r\n}\r\nexport interface IAccelerator {point: Point, velocity: Vector};\r\nexport const OriginAccelerator = { point: {x: 0, y: 0}, velocity: {x: 0, y: 0}}\r\nexport function accelerate_towards(\r\n    mover: IAccelerator, \r\n    target: Point, \r\n    acceleration: number,\r\n    maxSpeed: number, \r\n    colDistance: number, \r\n    brake: Point): boolean\r\n{\r\n    const delta: Point = {\r\n        x: target.x - mover.point.x, \r\n        y: target.y - mover.point.y\r\n    };\r\n    const magnitude = Math.sqrt((delta.x * delta.x) + (delta.y * delta.y));\r\n    if (magnitude <= colDistance) return true;\r\n\r\n    delta.x /= magnitude;\r\n    delta.y /= magnitude;\r\n\r\n    mover.velocity.x += (delta.x * acceleration);\r\n    mover.velocity.y += (delta.y * acceleration);\r\n    mover.velocity.x = MathClamp(mover.velocity.x, -maxSpeed, maxSpeed);\r\n    mover.velocity.y = MathClamp(mover.velocity.y, -maxSpeed, maxSpeed);\r\n\r\n    accelerator_coast(mover, brake);\r\n    return false;\r\n}\r\nexport function accelerator_coast(\r\n    current: IAccelerator, \r\n    brake: Point): void\r\n{\r\n    current.velocity.x *= brake.x;\r\n    current.velocity.y *= brake.y;\r\n\r\n    current.point.x += current.velocity.x;\r\n    current.point.y += current.velocity.y;\r\n}\r\n\r\nexport function lerp(a: number, b: number, t: number): number{\r\n    return a + (b - a) * t\r\n}\r\n\r\nexport function vector_lerp(a: Point, b: Point, t: number): Point{\r\n    return {\r\n        x: lerp(a.x, b.x, t),\r\n        y: lerp(a.y, b.y, t)\r\n    };\r\n}\r\nfunction cube_lerp(a: CubicPoint, b: CubicPoint, t: number): CubicPoint{\r\n    return {\r\n        x: lerp(a.x, b.x, t),\r\n        y: lerp(a.y, b.y, t),\r\n        z: lerp(a.z, b.z, t)\r\n    };\r\n}\r\nfunction cube_distance(a: CubicPoint, b: CubicPoint): number{\r\n    return (Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z)) / 2\r\n}\r\nfunction cube_round(cube: CubicPoint): CubicPoint{\r\n    var rx = Math.round(cube.x);\r\n    var ry = Math.round(cube.y);\r\n    var rz = Math.round(cube.z);\r\n\r\n    var x_diff = Math.abs(rx - cube.x)\r\n    var y_diff = Math.abs(ry - cube.y)\r\n    var z_diff = Math.abs(rz - cube.z)\r\n\r\n    if (x_diff > y_diff && x_diff > z_diff)\r\n        rx = -ry-rz;\r\n    else if (y_diff > z_diff)\r\n        ry = -rx-rz;\r\n    else\r\n        rz = -rx-ry;\r\n\r\n    return {x: rx, y: ry, z: rz};\r\n}\r\nfunction round_point_to_hex(hex: HexPoint): HexPoint{\r\n    return cube_to_axial(cube_round(axial_to_cube(hex)))\r\n\r\n}\r\nfunction cube_to_axial(cube: CubicPoint){\r\n    var q = cube.x;\r\n    var r = cube.z;\r\n    return new Hex(q, r);\r\n}\r\nfunction axial_to_cube(hex: HexPoint): CubicPoint{\r\n    return {\r\n        x: hex.q,\r\n        z: hex.r,\r\n        y: -hex.q-hex.r\r\n    };\r\n}\r\nfunction cube_linedraw(a: CubicPoint, b: CubicPoint): HexPoint[]{\r\n    var N = cube_distance(a, b);\r\n    var results: HexPoint[] = [];\r\n    for (let i = 0; i <= N; i++) {\r\n        results.push(cube_to_axial(cube_round(cube_lerp(a, b, 1.0/N * i))))\r\n    }\r\n    return results;\r\n}\r\nexport function hex_linedraw(a: HexPoint, b: HexPoint): HexPoint[]{\r\n    return cube_linedraw(axial_to_cube(a), axial_to_cube(b));\r\n}\r\n\r\nclass Orientation {\r\n    // angle is in multiples of 60°\r\n    constructor(public f0: number, public f1: number, public  f2: number, public f3: number,\r\n        public b0: number, public b1: number,public b2: number,public b3: number,\r\n        public start_angle: number){}\r\n};\r\nexport const layout_flat: Orientation = new Orientation(\r\n    3.0 / 2.0, \r\n    0.0, \r\n    Math.sqrt(3.0) / 2.0, \r\n    Math.sqrt(3.0),\r\n    2.0 / 3.0, \r\n    0.0, \r\n    -1.0 / 3.0, \r\n    Math.sqrt(3.0) / 3.0,\r\n    0.0\r\n);\r\nexport const layout_pointy: Orientation = new Orientation(\r\n    Math.sqrt(3.0), \r\n    Math.sqrt(3.0) / 2.0, \r\n    0.0, 3.0 / 2.0,       \r\n    Math.sqrt(3.0) / 3.0, \r\n    -1.0 / 3.0, \r\n    0.0, \r\n    2.0 / 3.0,\r\n    0.5\r\n);\r\nexport const origin_point: Point = {x: 0, y: 0};\r\nexport const hex_origin: HexPoint = {q: 0, r: 0};\r\nexport function hex_to_pixel(size: Point, origin: Point, h: HexPoint): Point {\r\n    const M: Orientation = layout_pointy;\r\n    const x = (M.f0 * h.q + M.f1 * h.r) * size.x;\r\n    const y = (M.f2 * h.q + M.f3 * h.r) * size.y;\r\n    return {x: x + origin.x, y: y + origin.y};\r\n}\r\nexport function pixel_to_hex(size: Point, origin: Point, p: Point) {\r\n    const M = layout_pointy;\r\n    const pt = {x: (p.x - origin.x) / size.x,\r\n                y: (p.y - origin.y) / size.y\r\n            };\r\n    const q = M.b0 * pt.x + M.b1 * pt.y;\r\n    const r = M.b2 * pt.x + M.b3 * pt.y;\r\n    return new Hex(q, r);\r\n}\r\n\r\n\r\nexport interface PolarPoint{\r\n    /**\r\n     * radius (in pixels)\r\n     */\r\n    r: number;\r\n    /**\r\n     * azimuth (radians)\r\n     */\r\n    az: number;\r\n}\r\n\r\nexport function polarToPoint(p: PolarPoint): Point{\r\n    return {\r\n        x: p.r * Math.cos(p.az),\r\n        y: p.r * Math.sin(p.az)\r\n    }\r\n}\r\n\r\nexport function distanceBetweenPolar(a: PolarPoint, b: PolarPoint): number{\r\n    const aCart = polarToPoint(a);\r\n    const bCart = polarToPoint(b)\r\n    return Math.sqrt(\r\n        Math.pow(aCart.x - aCart.x, 2) +\r\n        Math.pow(bCart.y - aCart.y, 2)\r\n    );\r\n}\r\n\r\nexport interface Point{\r\n    x: number; y: number;\r\n}\r\nexport interface Vector extends Point{\r\n}\r\nexport interface CubicPoint extends Point{\r\n    z: number;\r\n}\r\n\r\nexport function transformPoint(p: Point){\r\n    return {transform:`translate(${p.x}px, ${p.y}px)`};\r\n}\r\n\r\n/**\r\n * address books allow lookups from entity \"name\" to location\r\n */\r\nexport interface AddressBookHex{\r\n    [entityKey: number]: HexPoint\r\n}\r\nexport interface AddressBookPoint{\r\n    [entityKey: number]: Point\r\n}\r\n/**\r\n * address grids allow lookups from location to entity\r\n * \r\n * note: coordinates are of form \"X,Y\"\r\n * and the map cannot distinguish between hex and cartesian points\r\n */\r\nexport interface AddressGrid<T>{\r\n    [coordinate: string]: T|undefined\r\n}\r\nexport interface AddressBuildingGrid extends AddressGrid<IBuilding>{}\r\n\r\nexport interface BuildingMap{\r\n    coordByID: AddressBookHex;\r\n    all: IBuilding[];\r\n}\r\n\r\nexport type BuildingTypes = 'farm'|'house'|'hospital'|'church'|'theater'|'courthouse'|'park'|'nature';\r\nexport type TopiaBuildingTypes = 'utopia_fields'|'utopia_pump'|'dystopia_refinery'|'dystopia_crypt';\r\n//third place - cafe/bookstore/barbershop/pub/gym/arcade/bingohall\r\n//utopia pump = slowly sucks up happiness/unhappiness?\r\n//dystopia refinery = slowly converts negative emotions to energy/bots\r\n//dystopia crypt = skips death notifications (limited use?)\r\nexport type MoverTypes = 'bean'|'ufo'|'pickup';\r\nexport type MatterTypes = MoverTypes|BuildingTypes;\r\n\r\nexport const BuildingIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🐄',\r\n    'house': '🏡', 'hospital': '🏥', 'church': '⛪', 'theater': '🎪', 'courthouse':'🏫',\r\n    'park': '⛲️', 'nature': '🏞️'\r\n};\r\nexport const UpgradedBuildingIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🚜',\r\n    'house': '🏘️', 'hospital': '🏙️', 'church': '⛪', 'theater': '🏟️', 'courthouse':'🏫',\r\n    'park': '🎡', 'nature': '🏞️'\r\n};\r\nexport const BuildingJobIcon: {[key in BuildingTypes]: string} = {\r\n    'farm': '🌾',\r\n    'house': '📪', 'hospital': '🛏️', 'church': '⛪', 'theater': '🪑', 'courthouse':'🏫',\r\n    'park': '💐', 'nature': '♨️'\r\n};\r\nexport const BuildingToGood: {[key in BuildingTypes]: TraitGood|undefined} = {\r\n    'farm': 'food',\r\n    'house': undefined, \r\n    'hospital': 'medicine', \r\n    'church': 'fun', \r\n    'theater': 'fun', \r\n    'courthouse': 'fun',\r\n    'park': 'fun', \r\n    'nature': 'fun'\r\n};\r\nexport const GoodToBuilding: {[key in TraitGood]: BuildingTypes} = {\r\n    'food': 'farm',\r\n    // 'shelter': 'house',\r\n    'medicine':'hospital',\r\n    'fun': 'theater'\r\n};\r\nexport const JobToBuilding: {[key in TraitJob]: BuildingTypes} = {\r\n    'farmer': 'farm',\r\n    'builder': 'house', \r\n    'doc':'hospital', \r\n    'entertainer': 'theater',\r\n    'cleric': 'church', \r\n    'jobless': 'house', \r\n    'polit': 'house'\r\n};\r\nexport const BuildingToJob: {[key in BuildingTypes]: TraitJob} = {\r\n    'farm': 'farmer',\r\n    'house': 'builder', \r\n    'hospital':'doc', \r\n    'theater': 'entertainer',\r\n    'church': 'cleric',\r\n    'park': 'entertainer',\r\n    'nature': 'entertainer',\r\n    'courthouse': 'polit'\r\n};\r\n\r\n//district sized hexes\r\nexport const HexSizePX = 150;\r\nexport const HexSizeR = 260; // rounded sqrt(3) * HexSizePX\r\nexport const DistrictHexSize = {x: HexSizePX, y: HexSizePX};\r\n\r\nexport function GenerateGeography(numberOfRings: number = 3){\r\n    const radius = ((numberOfRings - 0.5) * HexSizeR);\r\n    return {\r\n        numberOfRings: numberOfRings,\r\n        hexes: hex_spiral({q:0, r:0}, numberOfRings),\r\n        hex_size: {...DistrictHexSize},\r\n        petriRadius: radius,\r\n        petriOrigin: {x: radius, y: radius}\r\n    }\r\n}\r\n\r\nexport const LotHexSizePX = 50;\r\nexport const LotHexSizeR = 86; // rounded sqrt(3) * LotHexSizePX","\r\nexport interface IEntitySlice<T extends {key: number}> {\r\n    byID: { [key: number]: T },\r\n    allIDs: number[],\r\n    nextID: number\r\n}\r\n\r\nexport function CreateEmptyEntitySlice<T extends {key: number}>(): IEntitySlice<T>{\r\n    return {\r\n        byID: {},\r\n        allIDs: [],\r\n        nextID: 0\r\n    }\r\n}\r\nexport function CreateEntitySlice<T extends {key: number}>(all: T[]): IEntitySlice<T>{\r\n    return {\r\n        byID: all.reduce((map, entity) => { map[entity.key] = entity; return map; }, {} as {[key: number]: T}),\r\n        allIDs: all.map(x => x.key),\r\n        nextID: all.reduce((max, entity) => Math.max(entity.key+1, max), 0)\r\n    }\r\n}\r\nexport function EntityAddToSlice<T extends {key: number}>(slice: IEntitySlice<T>, newEntity: T){\r\n    const k = slice.nextID++;\r\n    newEntity.key = k;\r\n    slice.allIDs.push(k);\r\n    slice.byID[k] = newEntity;\r\n}","import { IBean } from './simulation/Agent';\r\nimport { RandomBeliefBucket } from './simulation/Beliefs';\r\nimport { ICity } from './simulation/City';\r\nimport { BuildingTypes, GenerateGeography, HexPoint, hex_to_pixel, IDistrict, ILot, LotHexSizePX, PolarPoint } from './simulation/Geography';\r\nimport { IDate } from './simulation/Time';\r\nimport { IWorldState } from './state/features/world';\r\nimport { TraitCommunity, TraitEthno, TraitFaith, TraitIdeals, TraitJob } from './World';\r\nimport Rand, {PRNG} from 'rand-seed';\r\nimport { CreateEntitySlice, EntityAddToSlice, IEntitySlice } from './state/entity.state';\r\n\r\nconst EnterpriseStartingListing = 1;\r\nconst MaxNumBeanTraitsOnGenerate = 3;\r\nconst RandomSeeds: {[seed: string]: Rand} = {};\r\n\r\nexport function GetRandomGenerator(seed: string){\r\n    if (RandomSeeds[seed] == null)\r\n        RandomSeeds[seed] = new Rand(seed, PRNG.sfc32);\r\n    return RandomSeeds[seed];\r\n}\r\n\r\n/**\r\n * return better random values\r\n * @param min \r\n * @param max \r\n * @returns \r\n */\r\nexport function GetRandomNumber(seed: string, min: number = 0, max: number = 1): number{\r\n    const randomNumber = GetRandomGenerator(seed).next();\r\n    // const randomNumber = window.crypto.getRandomValues()[0] / (0xffffffff + 1);\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(randomNumber * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * \r\n * @returns float between 0 and 1\r\n */\r\nexport function GetRandomFloat(seed: string): number{\r\n    return GetRandomGenerator(seed).next();\r\n}\r\n\r\n/**\r\n * given a chance (0-1) return true if random float is <= chance\r\n * @param chance \r\n * @returns \r\n */\r\nexport function GetRandomRoll(seed: string, chance: number): boolean{\r\n    const randomNumber = GetRandomFloat(seed);\r\n    //console.log(`DC ${(chance*100).toFixed(3)} rolled ${(randomNumber*100).toFixed(4)}`);\r\n    return randomNumber <= chance;\r\n}\r\n\r\n/**\r\n * convenience random function\r\n * @param length \r\n * @returns \r\n */\r\nexport function GetRandomIndex(seed: string, length: number): number{\r\n    return GetRandomNumber(seed, 0, length-1)\r\n}\r\n\r\nexport function GetRandom<S>(seed: string, choices: S[]):S {\r\n    const max = choices.length;\r\n    if (max == 1)\r\n        return choices[0];\r\n\r\n    const i = GetRandomIndex(seed, choices.length);\r\n    return choices[i];\r\n}\r\nexport function RandomIdeal(seed: string): TraitIdeals{\r\n    return GetRandom(seed, ['prog', 'trad']);\r\n}\r\nexport function RandomCommunity(seed: string): TraitCommunity{\r\n    return GetRandom(seed, ['state', 'ego']);\r\n}\r\nexport function RandomEthno(seed: string): TraitEthno{\r\n    return GetRandom(seed, ['circle','square','triangle']);\r\n}\r\nexport function RandomFaith(seed: string): TraitFaith{\r\n    return GetRandom(seed, ['rocket','music','dragon', 'noFaith']);\r\n}\r\nexport function StartingCash(job: TraitJob): number{\r\n    let base = 4 + Math.floor(Math.random() * 3);\r\n    switch(job){\r\n        case 'doc': return base+2;\r\n        default: return base;\r\n    }\r\n}\r\nexport const MAX_PETRI_RADIUS = 200;\r\nexport const PI2 = Math.PI*2;\r\nexport function RandomPolar(seed: string, r?: number): PolarPoint{\r\n    return {\r\n        r: r || GetRandomNumber(seed, 0, MAX_PETRI_RADIUS),\r\n        az: GetRandomNumber(seed, 0, PI2)\r\n    };\r\n}\r\nexport function GetBuildingR(seed: string, type: BuildingTypes): number{\r\n    switch(type){\r\n        case 'farm':\r\n            return GetRandomNumber(seed, 200, 300);\r\n        default: \r\n            return GetRandomNumber(seed, 80, 200);\r\n    }\r\n}\r\n\r\nconst CityPrefixes = ['New ', 'Old ', 'Fort ', 'St. ', 'Mount ', 'Grand ', '', '', '', '', '', '', '', '', '', ''];\r\nconst CityFirstsnames = ['Spring', 'Timber', 'Over', 'West', 'East', 'North', 'South', 'Rock', 'Sand', 'Clay', 'Iron', 'Ore', 'Coal', 'Liver', 'Hawk', 'Red', 'Yellow', 'Gold', 'Blue', 'Black', 'White', 'Sunny', 'Reed', 'Ox', 'Mill', 'Fern', 'Down', 'Bel', 'Bald', 'Ash'];\r\nconst CityLastnames = ['water ', ' Springs', 'ville', 'dale', 'lane', 'peak', 'coast', 'beach', 'port', 'market', 'ton', 'brook', ' Creek', 'land', 'burgh', 'bridge', 'ford', 'bury', 'chester', 'son', 'vale', ' Valley', 'hill', 'more', 'wood', ' Oaks', ' Cove', 'mouth', 'way', 'crest'];\r\nexport function GetRandomCityName(seed: string){\r\n    return `${GetRandom(seed, CityPrefixes)}${GetRandom(seed, CityFirstsnames)}${GetRandom(seed, CityLastnames)}`;\r\n}\r\nexport const Number_Starting_City_Pop = 0;\r\n\r\nexport function GenerateCity(): ICity{\r\n    return {\r\n        ...GenerateGeography(),\r\n        key: 0,\r\n        name: 'string',\r\n        deadBeanKeys: [],\r\n        beanKeys: [],\r\n        ufoKeys: [],\r\n        pickupKeys: [],\r\n        buildingKeys: [],\r\n        pickupMagnetPoint: undefined,\r\n        costOfLiving: 0,\r\n        buildingMap: {},\r\n        districtKeys: []\r\n      }\r\n}\r\nexport function GenerateDistrictsAndLots(city: ICity): {ds:IEntitySlice<IDistrict>,lots:IEntitySlice<ILot>}{\r\n    const lots = CreateEntitySlice<ILot>([]);\r\n    const ds = CreateEntitySlice<IDistrict>(city.hexes.map((x, i) => {\r\n        const isCenter = (x.q === 0 && x.r === 0);\r\n        const d = GenerateDistrict(isCenter ? 'urban': 'fallow', city, x);\r\n        d.key = i+1;\r\n        city.districtKeys.push(d.key);\r\n        if (isCenter)\r\n            DistrictAddLots(d, lots, 'urban');\r\n        return d;\r\n    }));\r\n    return {\r\n        ds: ds,\r\n        lots: lots\r\n    }\r\n}\r\n\r\nexport function GenerateDistrict(kind: 'urban'|'rural'|'fallow'|'nature', city: ICity, hex: HexPoint): IDistrict{\r\n    return {\r\n        kind: kind,\r\n        key: 0,\r\n        q: hex.q,\r\n        r: hex.r,\r\n        hexString: hex.q+','+hex.r,\r\n        point: hex_to_pixel(city.hex_size, city.petriOrigin, hex),\r\n        lots: []\r\n    }\r\n}\r\n\r\nconst urbanHexes = [{q: 1, r: -1},{q: 1, r: 0},{q: 0, r: 1},{q: -1, r: 1},{q: -1, r: 0},{q: 0, r: -1}];\r\nconst ruralHexes = [{q: 1, r: -1},{q: 0, r: 1},{q: -1, r: 0}];\r\nexport function DistrictAddLots(district: IDistrict, lotSlice: IEntitySlice<ILot>, kind: 'urban'|'rural'){\r\n    const hexes = (kind === 'rural')? ruralHexes : urbanHexes;\r\n    hexes.forEach((h, i) => {\r\n        if (district.lots[i] == null){\r\n            const lot: ILot = {\r\n                key: 0,\r\n                kind: kind,\r\n                districtKey: district.key,\r\n                point: hex_to_pixel({x: LotHexSizePX, y: LotHexSizePX}, district.point, h)\r\n            }\r\n            EntityAddToSlice(lotSlice, lot);\r\n            district.lots.push(lot.key);\r\n        }\r\n    });\r\n}\r\n\r\nexport function GenerateBean(world: {beans: {nextID:number}, date: IDate, seed: string}, city: ICity, parent?: IBean, hexPoint?: HexPoint, job?: TraitJob): IBean{\r\n    let newBean: IBean = {\r\n        key: world.beans.nextID++,\r\n        cityKey: city.key,\r\n        name: '',\r\n        ethnicity: RandomEthno(world.seed),\r\n        community: RandomCommunity(world.seed),\r\n        ideals: RandomIdeal(world.seed),\r\n        faith: RandomFaith(world.seed),\r\n        stamina: 'awake',\r\n        health: 'fresh',\r\n        food: 'sated',\r\n        discrete_food: 3,\r\n        discrete_health: 2,\r\n        discrete_sanity: 10,\r\n        discrete_stamina: 7,\r\n        discrete_fun: 0,\r\n        housing: 'homeless',\r\n        graceTicks: 0,\r\n        dob: {year: world.date.year, season: world.date.season, day: world.date.day, hour: world.date.hour},\r\n        sanity: 'sane',\r\n        beliefs: [],\r\n        lifecycle: 'alive',\r\n        hedonHistory: [{}, {}, {}, {}, {}],\r\n        priorities: [],\r\n        job: 'jobless',\r\n        happiness: { flatAverage: 0,all: {}, maxSource: '', minSource: '', weightedAverage: 0},\r\n        lastHappiness: 0,\r\n        hedonFiveDayRecord: { max: 0, min: 0 },\r\n        fairGoodPrice: 0,\r\n        bornInPetri: parent != null,\r\n        cash: 3,\r\n        ticksSinceLastSale: 0,\r\n        ticksSinceLastRelax: 0,\r\n        lastChatMS: 0,\r\n        action: 'idle',\r\n        actionData: {act: 'idle'},\r\n        activity_duration: {'buy': 0, 'chat': 0, 'craze': 0, 'crime': 0, 'idle': 0, 'relax': 0, 'sleep': 0, 'soapbox': 0, 'travel': 0, 'work': 0},\r\n    };\r\n    // MoverBusInstance.Get('bean', newBean.key).publish({\r\n    //     velocity: {x: 0, y: 0},\r\n    //     point: hex_to_pixel(city.hex_size, city.petriOrigin, hexPoint || {q: 0, r: 0})\r\n    // });\r\n    newBean.name = GetRandom(world.seed, ['Joe', 'Frank', 'Jill', 'Jose',\r\n    'Johnny', 'Isabelle', 'Carmen', 'Ace', 'Carl', 'Zander', 'Jean',\r\n    'Anne', 'Leslie', 'Ben', 'Ron', \r\n    'Ellen', 'Dallas', 'Kane', 'Ash', \r\n    'Jim', 'James', 'Leonard', 'Nyota', 'Christine', 'Scotty', 'Tasha', 'Geordi', 'Beverly', 'Deanna', 'Wesley', 'Majel',\r\n    'Malcolm','River',  \r\n    'Luke', 'Han', 'Owen', 'Rey', 'Mace', 'Cody',\r\n    'Dana', 'Walter',  \r\n    'Rick', 'Holden', 'Roy', 'Pris', 'Eldon', 'Rachael',\r\n    'Rose', 'Donna', 'Jack', 'Amy', 'Rory', 'Martha', 'Clara', \r\n    'Arnold', 'Dave', 'Holly', \r\n    'Kara', 'Gaius','William', 'Lee', 'Laura', 'Saul',\r\n    'Max', 'Edison', 'Theora', 'Bryce', 'Murray', 'Ned',\r\n    'Daniel', 'Samantha', \r\n    'Logan', 'Francis', 'Jessica',\r\n    'Thomas',\r\n    'Benny', 'James', 'John Henry', 'Sarah', 'Piper', 'Nick', 'Shaun', 'Preston'\r\n    ]) + ' ';\r\n    newBean.name += GetRandom(world.seed, [\r\n        'Ripley', 'Bishop', 'Hicks', 'Vasquez', 'Hudson', \r\n        'Rico', 'Flores', 'Ibanez', 'Levy', 'Jenkins', 'Barlow', 'Zim', 'Rasczak',\r\n        'Kirk', 'McCoy', 'Sulu', 'Uhura', 'Chekov', 'Chapel', 'Rand','Riker', 'Crusher', 'Barret', \"O'Brien\",\r\n        'Reynolds', 'Tam', \r\n        'Scully', 'Mulder','Skinner', \r\n        'Connor', \r\n        'Rex',\r\n        'Thrace', 'Baltar', 'Smith','Adama', 'Roslin', 'Tigh', 'Song', 'Oswald', \r\n        'Deckard', 'Bryant', 'Tyrell', 'Sebastian', 'Voight', 'Kampff',\r\n        'Tyler', 'Harkness', 'Jones', 'Noble', 'Pond', 'Williams',\r\n        'Rimmer', 'Lister', \r\n        'Head', 'Carter', 'Lynch', 'McKenzie', 'Grossberg',\r\n        \"O'Neil\", 'Jackson', 'Carter',\r\n        'Whitmore',\r\n        'House', 'Mitchell', 'Eden', 'Lyons', 'Valentine', 'Garvey'\r\n         ]);\r\n    const beanBeliefCount = Math.ceil(Math.random() * MaxNumBeanTraitsOnGenerate);\r\n    while (newBean.beliefs.length < beanBeliefCount) {\r\n        const newBelief = GetRandom(world.seed, RandomBeliefBucket);\r\n        const hasAlready = newBean.beliefs.includes(newBelief);\r\n        if (!hasAlready)\r\n            newBean.beliefs.push(newBelief);\r\n    }\r\n\r\n    if (parent){\r\n        newBean.ethnicity = parent.ethnicity;\r\n        newBean.name = newBean.name.split(' ')[0] + ' ' + parent.name.split(' ')[1];\r\n        newBean.cash = parent.cash / 2;\r\n        parent.cash /= 2;\r\n    }\r\n    \r\n    // if (job == null){\r\n    //     switch (city.beanSeed){\r\n    //         case 1:\r\n    //             job = 'farmer'; break;\r\n    //         case 2:\r\n    //             job = 'builder'; break;\r\n    //         case 3:\r\n    //             job = 'doc'; break;\r\n    //         default:\r\n    //             job = GetRandom(['farmer', 'builder', 'doc', 'entertainer']); break;\r\n    //     }\r\n    // }\r\n    // newBean.trySetJob(job);\r\n    \r\n    return newBean;\r\n}","import { TraitCommunity, TraitFood, TraitGood, TraitHealth, TraitIdeals } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { IEconomicAgent } from \"./Economy\";\r\n\r\nexport type LawGroup = 'Taxation'|'Welfare'|'Economics'|'Crime'|'Culture';\r\nexport type LawAxis = 'wel_food'|'wel_house'|'wel_health'|'tax_basic'|'tax_second'|'econ_sub'|'cul_rel'|'cul_theo'|'crime_theo';\r\n\r\nexport type LawType = 'civil'|'criminal';\r\n\r\nexport type LawKey = 'food_aid'\r\n|'medical_aid'\r\n|'poll_tax'\r\n// |'wealth_tax'\r\n// |'food_bank'\r\n// |'univ_rations'\r\n// |'housing_subsidy'\r\n// |'state_apartments'\r\n// |'clinics'\r\n// |'grain_sub'\r\n// |'arts'\r\n// |'theocracy'\r\n// |'secularism'\r\n// |'atheism'\r\n// |'mythology'\r\n// |'futurism'\r\n// |'drama'\r\n|'sales_tax'\r\n// |'vice_tax'\r\n// |'prop_tax'\r\n|'death_tax';\r\n\r\nexport type LawPrereq = TraitBelief|TraitBelief[];\r\nexport const DollarPerBeanRebateThreshold = 1;\r\nexport const PollTaxWeeklyAmount = 0.1;\r\n\r\nexport function PlayerCanSeePrereqs(prereqs: LawPrereq[], seen: {[belief: string]: boolean}){\r\n    return prereqs.length === 0 || prereqs.some((x) => PlayerKnowsPrereq(x, seen));\r\n}\r\nexport function PlayerMeetsPrereqs(prereqs: LawPrereq[], seen: {[belief: string]: boolean}){\r\n    return prereqs.length === 0 || prereqs.every((x) => PlayerKnowsPrereq(x, seen));\r\n}\r\nexport function PlayerKnowsPrereq(prereq: LawPrereq, seen: {[belief: string]: boolean}){\r\n    return Array.isArray(prereq) ? prereq.some((x) => PlayerKnowsBelief(x, seen)) : PlayerKnowsBelief(prereq, seen);\r\n}\r\nexport function PlayerKnowsBelief(prereq: TraitBelief, seen: {[belief: string]: boolean}){\r\n    return seen[prereq];\r\n}\r\nexport function PrereqKey(prereq: LawPrereq){\r\n    return Array.isArray(prereq) ? prereq.join('/') : prereq;\r\n}\r\nexport function PrereqString(prereq: LawPrereq){\r\n    return Array.isArray(prereq) ? prereq.map(x => BeliefString(x)).join(' / ') : BeliefString(prereq);\r\n}\r\nexport function BeliefString(prereq: TraitBelief){\r\n    return SecondaryBeliefData[prereq].icon+' '+SecondaryBeliefData[prereq].noun;\r\n}\r\n\r\nexport type LawPunishment = 'fine'|'imprison'|'death';\r\n\r\nexport interface ILaw{\r\n    /**\r\n     * convenience grouping property\r\n     */\r\n    group: LawGroup;\r\n    /**\r\n     * \"slot\" for law\r\n     */\r\n    axis: LawAxis;\r\n    /**\r\n     * specific law selected\r\n     */\r\n    key: LawKey;\r\n}\r\nexport interface IGovernment{\r\n    laws: ILaw[];\r\n    lawTree: {[key in LawAxis]: ILaw|undefined};\r\n    cash: number;\r\n    ticksSinceLastSale: number;\r\n}\r\nexport interface ILawData extends ILaw{\r\n    prereqs: LawPrereq[];\r\n    name: string;\r\n    hint?: string;\r\n    description?: string;\r\n    icon?: string;\r\n}\r\nexport const LawAxisData: {[key in LawAxis]: {name: string}} = {\r\n    'wel_food': {name: 'Food Welfare'},\r\n    'wel_house': {name: 'Housing Welfare'},\r\n    'wel_health': {name: 'Healthcare'},\r\n    'tax_basic': {name: 'Taxation'},\r\n    'tax_second': {name: 'Advanced Taxation'},\r\n    'econ_sub': {name: 'Subsidies'},\r\n    'cul_rel': {name: 'Culture'},\r\n    'cul_theo': {name: 'State Narrative'},\r\n    crime_theo: {name: 'Persecution'}\r\n}\r\nexport const LawData: {[key in LawKey]: ILawData} = {\r\n    'food_aid':{\r\n        key: 'food_aid', group: 'Welfare', name: 'Food Aid', axis: 'wel_food', icon: '👨‍🌾',\r\n        description: 'The government buys Hungry Subjects food.', prereqs: [['Gluttony','Parochialism'], ['Charity', 'Socialism']]},\r\n    'medical_aid':{\r\n        key: 'medical_aid', group: 'Welfare', name: 'Med Aid', axis: 'wel_health', icon: '👩‍⚕️',\r\n        description: 'The government buys Sick Subjects medicine.', prereqs: ['Charity', 'Cosmopolitanism']},\r\n    // 'food_bank':{\r\n    //     key: 'food_bank', group: 'Welfare', name: 'Food Bank', axis: 'wel_food',\r\n    //     description: 'Hungry Subjects are provided food purchased by the government.'\r\n    // },\r\n    // 'food_stamps':{\r\n    //     key: 'food_stamps', group: 'Welfare', name: 'Food Stamps', axis: 'wel_food',\r\n    //     description: 'Hungry Subjects are provided money by the government to purchase food.'},\r\n    // 'univ_rations':{\r\n    //     key: 'univ_rations', group: 'Welfare', name: 'Universal Rations', axis: 'wel_food',\r\n    //     description: 'All Subjects are provided small amounts of food from the government.'},\r\n    // 'outside':{\r\n    //     key: 'outside', group: 'Welfare', name: 'Sleep Outside', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects must sleep in the cold.'},\r\n    // 'homeless_shelters':{\r\n    //     key: 'homeless_shelters', group: 'Welfare', name: 'Homeless Shelters', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects are provided shelter purchased by the government.'},\r\n    // 'housing_subsidy':{\r\n    //     key: 'housing_subsidy', group: 'Welfare', name: 'Housing Subsidy', axis: 'wel_house',\r\n    //     description: 'Homeless Subjects are provided money by the government to purchase shelter.'},\r\n    // 'state_apartments':{\r\n    //     key: 'state_apartments', group: 'Welfare', name: 'State Apartments', axis: 'wel_house'},\r\n    // 'stay_healthy':{\r\n    //     key: 'stay_healthy', group: 'Welfare', name: 'Stay Healthy', axis: 'wel_health',\r\n    //     description: 'Sick Subjects must pay for their own medical care.'},\r\n    // 'clinics':{\r\n    //     key: 'clinics', group: 'Welfare', name: 'Charity Clinics', axis: 'wel_health',\r\n    //     description: 'Sick Subjects are provided medicine purchased by the government.'},\r\n    // 'medical_aid':{\r\n    //     key: 'medical_aid', group: 'Welfare', name: 'Medical Aid', axis: 'wel_health',\r\n    //     description: 'Sick Subjects are provided money by the government to pay for medical care.'},\r\n    // 'univ_health':{\r\n    //     key: 'univ_health', group: 'Welfare', name: 'Universal Healthcare', axis: 'wel_health',\r\n    //     description: 'All Subjects are provided medical care by the government.'},\r\n    // 'hands_off':{\r\n    //     key: 'hands_off', group: 'Economics', name: 'Laissez-faire', axis: 'econ_sub',\r\n    //     description: 'No industries receive subsidies.'},\r\n    // 'grain_sub':{\r\n    //     key: 'grain_sub', group: 'Economics', name: 'Grain Subsidy', axis: 'econ_sub',\r\n    //     description: 'Farmers are provided money.'},\r\n    // 'arts':{\r\n    //     key: 'arts', group: 'Economics', name: 'Arts Patronage', axis: 'econ_sub'},\r\n    // 'theocracy':{\r\n    //     key: 'theocracy', group: 'Crime', name: 'Illegal Narratives', axis: 'crime_theo',\r\n    //     description: \"It is illegal for subjects to speak about other universal narratives.\"},\r\n    // 'secularism':{\r\n    //     key: 'secularism', group: 'Culture', name: 'Secularism', axis: 'cul_theo',\r\n    //     description: \"The government does not endorse a particular universal narrative.\"},\r\n    // 'atheism':{\r\n    //     key: 'atheism', group: 'Culture', name: 'State Nihilism', axis: 'cul_theo'},\r\n    // 'mythology':{\r\n    //     key: 'mythology', group: 'Culture', name: 'State Mythology 🐲', axis: 'cul_theo'},\r\n    // 'futurism':{\r\n    //     key: 'futurism', group: 'Culture', name: 'State Futurism 🚀', axis: 'cul_theo'},\r\n    // 'drama':{\r\n    //     key: 'drama', group: 'Culture', name: 'State Drama 🎵', axis: 'cul_theo'},\r\n    // '':{key: // , group: '', name: 'Religious Schooling', 'state', idealPro: [ 'trad', axis: 'cul_ed'},\r\n    // '':{key: // , group: '', name: 'University Grants', 'ego', axis: 'cul_ed'},\r\n    // '':{key: // , group: '', name: 'College For All', 'state', idealPro: [ 'prog', axis: 'cul_ed'},\r\n    'poll_tax':{\r\n        key: 'poll_tax', group: 'Taxation', name: 'Head Tax', axis: 'tax_basic', prereqs: [], icon: '👑',\r\n        description: 'Subjects must pay a flat tax.'},\r\n    'sales_tax':{\r\n        key: 'sales_tax', group: 'Taxation', name: 'Sales Tax', axis: 'tax_basic', prereqs: [], icon: '💸',\r\n        description: 'Subjects must pay a percentage tax for every transaction.'},\r\n    // 'wealth_tax':{\r\n    //     key: 'wealth_tax', group: 'Taxation', name: 'Wealth Tax', axis: 'tax_basic',\r\n    //     description: 'Rich subjects must pay a percentage tax on their excess cash.'},\r\n    // 'vice_tax':{\r\n    //     key: 'vice_tax', group: 'Taxation', name: 'Vice Tax', axis: 'tax_second',\r\n    //     description: 'Entertainment goods have a flat tax.'},\r\n    // 'prop_tax':{\r\n    //     key: 'prop_tax', group: 'Taxation', name: 'Property Tax', axis: 'tax_second',\r\n    //     description: 'Subjects must pay a tax on housing.'},\r\n    'death_tax':{\r\n        key: 'death_tax', group: 'Taxation', name: 'Death Tax', axis: 'tax_second', prereqs: [], icon: '☠️',\r\n        description: 'Dead subjects pay a portion of their cash to the government.'},\r\n}\r\nexport interface IGovernment{\r\n    \r\n}\r\nexport type LawGroupToLaws = {\r\n    [key in LawGroup]: ILaw[]\r\n};\r\nexport const SalesTaxPercentage = 0.05;\r\nexport class Government{\r\n    public get laws(): ILaw[] {\r\n        return Object.values(this.lawTree).flatMap(law => law ? [law] : []);\r\n    }\r\n    public set laws(val: ILaw[]) {\r\n        val.forEach((v) => {\r\n            this.lawTree[v.axis] = v;\r\n        });\r\n    }\r\n    public getLawsByGroup(): LawGroupToLaws {\r\n        return this.laws.reduce((d, x) => {\r\n            d[x.group].push(x);\r\n            return d;\r\n        }, {\r\n            Taxation: [] as ILaw[],\r\n            Welfare: [] as ILaw[],\r\n            Economics: [] as ILaw[],\r\n            Crime: [] as ILaw[],\r\n            Culture: [] as ILaw[]\r\n        });\r\n    }\r\n    public lawTree: {[key in LawAxis]: ILaw|undefined} = {} as {[key in LawAxis]: ILaw|undefined};\r\n\r\n    isLaw(l: LawKey): boolean{\r\n        return this.lawTree[LawData[l].axis]?.key === l;\r\n    }\r\n\r\n    enact(l: LawKey): void {\r\n        const data = LawData[l];\r\n        this.lawTree[data.axis] = data;\r\n    }\r\n\r\n    revoke(l: LawKey): void {\r\n        const data = LawData[l];\r\n        this.lawTree[data.axis] = undefined;\r\n    }\r\n\r\n    get salesTaxPercentage(): number{\r\n        return this.isLaw('sales_tax') ? SalesTaxPercentage : 0;\r\n    }\r\n    \r\n    PurchaseQualifiesForWelfare(bean: IBean, good: TraitGood): boolean{\r\n        switch(good){\r\n            case 'food':\r\n                return (bean.food === 'starving' || bean.food === 'hungry') && this.isLaw('food_aid');\r\n            case 'medicine':\r\n                return (bean.health === 'sick' || bean.health === 'sickly') && this.isLaw('medical_aid');\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function IsLaw(gov: IGovernment, l: LawKey){\r\n    return gov.lawTree[LawData[l].axis]?.key === l;\r\n}\r\nexport function MaybeRebate(gov: IGovernment, beans: IBean[]){\r\n    const allowedTreasury = beans.length * DollarPerBeanRebateThreshold;\r\n    if (gov.cash > allowedTreasury){\r\n        const overage = gov.cash - allowedTreasury;\r\n        const perBean = overage / beans.length;\r\n        gov.cash = allowedTreasury;\r\n        beans.forEach((b) => b.cash += perBean);\r\n    }\r\n}\r\nfunction AgentIsPhysical(bean: any): bean is {food: TraitFood, health: TraitHealth} {\r\n    return bean['food'] != undefined && bean['sick'] != undefined;\r\n}\r\nexport function GovPurchaseQualifiesForWelfare(law: IGovernment, buyer: IEconomicAgent, good: TraitGood){\r\n    if (AgentIsPhysical(buyer)){\r\n        switch(good){\r\n            case 'food':\r\n                return (buyer.food === 'starving' || buyer.food === 'hungry') && IsLaw(law, 'food_aid');\r\n            case 'medicine':\r\n                return (buyer.health === 'sick' || buyer.health === 'sickly') && IsLaw(law, 'medical_aid');\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function GovCanPayWelfare(law: IGovernment, price: number): boolean{\r\n    return law.cash >= price;\r\n}","import { TraitGood, TraitJob, GoodToJob, Trait } from \"../World\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { GovCanPayWelfare, Government, GovPurchaseQualifiesForWelfare, IGovernment, ILaw, IsLaw, SalesTaxPercentage } from \"./Government\";\r\nimport { IBean } from \"./Agent\";\r\nimport { DistrictKind } from \"./Geography\";\r\nimport { BeanBelievesIn } from \"./Bean\";\r\n\r\nexport interface IEconomicAgent{\r\n    cash: number;\r\n}\r\nexport interface ISeller extends IEconomicAgent{\r\n    ticksSinceLastSale: number;\r\n}\r\nexport function BeanDistrictIdeologyBonus(b: IBean, kind: DistrictKind): number{\r\n    if (kind === 'rural')\r\n        return BeanBelievesIn(b, 'Parochialism') ? 1 : BeanBelievesIn(b, 'Cosmopolitanism') ? -1 : 0;\r\n    else if (kind === 'urban')\r\n        return BeanBelievesIn(b, 'Parochialism') ? -1 : BeanBelievesIn(b, 'Cosmopolitanism') ? 1 : 0;\r\n    return 0;\r\n}\r\nexport interface IListing{\r\n    sellerCityKey?: number;\r\n    sellerBeanKey?: number;\r\n    sellerEnterpriseKey?: number;\r\n    price: number;\r\n    seller?: ISeller;\r\n    quantity: number;\r\n}\r\nconst AllGoods: TraitGood[] = ['food', 'medicine', 'fun'];\r\n\r\nexport interface IEconomy{\r\n    unfulfilledMonthlyDemand: {[key in TraitGood]: number};\r\n    monthlyDemand: {[key in TraitGood]: number};\r\n    monthlySupply: {[key in TraitGood]: number};\r\n    market: IMarket;\r\n}\r\nexport interface IMarket{\r\n    listings: {[key in TraitGood]: IListing[]};\r\n}\r\nexport interface IMarketReceipt{\r\n    bought: number, \r\n    price: number, \r\n    tax: number\r\n}\r\nexport function MarketTransact(\r\n    market: IMarket, \r\n    listing: IListing, \r\n    good: TraitGood, \r\n    demand: number, \r\n    buyer: IEconomicAgent, \r\n    seller: ISeller, \r\n    salesTaxPercentage: number){    \r\n    MarketListingSubtract(market, listing, good, demand);\r\n    const listPrice = listing.price * demand;\r\n    const tax = listPrice * salesTaxPercentage;\r\n    const grossPrice = listPrice + tax;\r\n    buyer.cash -= grossPrice;\r\n    seller.cash += listPrice;\r\n    seller.ticksSinceLastSale = 0;\r\n    return {\r\n        bought: demand,\r\n        price: listPrice,\r\n        tax: tax\r\n    }\r\n}\r\nexport function MarketGovernmentTransact(market: IMarket, gov: IGovernment, listing: IListing, good: TraitGood, demand: number, seller: ISeller){\r\n    MarketListingSubtract(market, listing, good, demand);\r\n    const listPrice = listing.price * demand;\r\n    const grossPrice = listPrice;\r\n    gov.cash -= grossPrice;\r\n    seller.cash += listPrice;\r\n    seller.ticksSinceLastSale = 0;\r\n    return {\r\n        bought: demand,\r\n        price: listPrice,\r\n        tax: 0\r\n    }\r\n}\r\nexport function MarketListingSubtract(market: IMarket, listing: IListing, good: TraitGood, demand: number){     \r\n    listing.quantity -= demand;\r\n    if (listing.quantity <= 0){\r\n        market.listings[good].splice(0, 1);\r\n    }\r\n}\r\n\r\nexport function EconomyTryTransact(\r\n    economy: IEconomy,\r\n    gov: IGovernment,\r\n    buyer: IEconomicAgent, \r\n    good: TraitGood,\r\n    getSeller: (l: IListing) => ISeller,\r\n    minDemand: number = 1,\r\n    maxDemand: number = 1\r\n    ): IMarketReceipt|undefined {\r\n    economy.monthlyDemand[good] += maxDemand;\r\n    const listing = MarketLowestPriceListing(economy.market, good, minDemand);\r\n    if (listing == null){\r\n        //console.log('agent could not find '+good);\r\n        economy.unfulfilledMonthlyDemand[good] += maxDemand;\r\n        return undefined;\r\n    }\r\n    const actualDemand = Math.min(listing.quantity, maxDemand);\r\n    const salesTaxPercent = IsLaw(gov, 'sales_tax') ? SalesTaxPercentage : 0;\r\n    if ((listing.price * (1 + salesTaxPercent)) <= buyer.cash * actualDemand){ \r\n        const receipt = MarketTransact(economy.market, listing, good, actualDemand, buyer, getSeller(listing), salesTaxPercent);\r\n        if (receipt.tax){\r\n            gov.cash += receipt.tax;\r\n        }\r\n        return receipt;\r\n    } else {\r\n        if (GovPurchaseQualifiesForWelfare(gov, buyer, good) && GovCanPayWelfare(gov, listing.price)){\r\n            return MarketGovernmentTransact(economy.market, gov, listing, good, actualDemand, getSeller(listing));\r\n        }\r\n    }\r\n    economy.unfulfilledMonthlyDemand[good] += actualDemand;\r\n    return undefined;\r\n}\r\nexport function EconomyMostInDemandJob(economy: IEconomy){\r\n    const goods: TraitGood[] = AllGoods;\r\n    const max = goods.reduce((last, good) => {\r\n        if (economy.unfulfilledMonthlyDemand[good] > last.max){\r\n            last.max = economy.unfulfilledMonthlyDemand[good];\r\n            last.job = GoodToJob(good);\r\n        }\r\n        return last;\r\n    }, {max: 0, job: null as TraitJob|null})\r\n\r\n    return max.job;\r\n}\r\nconst MaximumListingQuantity = 20;\r\nexport function EconomyProduceAndPrice(economy: IEconomy, seller: IBean, good: TraitGood, quantity: number, price: number) {\r\n    economy.monthlySupply[good] += quantity;\r\n    const existing = economy.market.listings[good].find((x) => x.sellerBeanKey == seller.key);\r\n    if (existing){\r\n        existing.quantity += quantity;\r\n        existing.price = price;\r\n        existing.quantity = Math.min(existing.quantity, MaximumListingQuantity);\r\n    } else {\r\n        economy.market.listings[good].push({\r\n            sellerBeanKey: seller.key,\r\n            sellerCityKey: seller.cityKey,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    economy.market.listings[good].sort((a, b) => a.price - b.price);\r\n}\r\nexport function EconomyEmployAndPrice(econ: IEconomy, seller: IEnterprise, good: TraitGood, quantity: number, price: number) {\r\n    econ.monthlySupply[good] += quantity;\r\n    const existing = econ.market.listings[good].find((x) => x.sellerEnterpriseKey == seller.key);\r\n    if (existing){\r\n        existing.quantity += quantity;\r\n        existing.price = price;\r\n        existing.quantity = Math.min(existing.quantity, MaximumListingQuantity);\r\n    } else {\r\n        econ.market.listings[good].push({\r\n            sellerEnterpriseKey: seller.key,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n    }\r\n    econ.market.listings[good].sort((a, b) => a.price - b.price);\r\n}\r\nexport function GetFairGoodPrice(econ: IEconomy, good: TraitGood){\r\n    const supply = econ.monthlySupply[good] || 1;\r\n    const demand = econ.monthlyDemand[good];\r\n    return 0.25 + (0.75 * Math.min(demand/supply, 1));\r\n}\r\nexport function GetCostOfLiving(econ: IEconomy){\r\n    return GetFairGoodPrice(econ, 'food')+GetFairGoodPrice(econ,'medicine');\r\n}\r\nexport function EconomyCanBuy(econ: IEconomy, gov: IGovernment, buyer: IEconomicAgent, good: TraitGood,\r\n    minDemand: number = 1,\r\n    maxDemand: number = 1): 'yes'|'nosupply'|'pricedout'{\r\n    const listing = MarketLowestPriceListing(econ.market, good, minDemand);\r\n    if (listing == null){\r\n        return 'nosupply';\r\n    }\r\n    const actualDemand = Math.min(listing.quantity, maxDemand);\r\n    if (listing.price <= buyer.cash * actualDemand)\r\n        return 'yes';\r\n    if (GovPurchaseQualifiesForWelfare(gov, buyer, good) && GovCanPayWelfare(gov, listing.price)){\r\n        return 'yes';\r\n    }\r\n    return 'pricedout';\r\n\r\n}\r\n\r\nfunction MarketLowestPriceListing(market: IMarket, good: TraitGood, demand: number): IListing|null{\r\n    const fullListings =  market.listings[good].filter((l) => {\r\n        return l.quantity >= demand;\r\n    });\r\n    if (fullListings.length > 0){\r\n        let numberOfSamePriceListings = 1;\r\n        const lowPrice = fullListings[0].price;\r\n        for (let i = 1; i < fullListings.length; i++) {\r\n            const list = fullListings[i];\r\n            if (list.price > lowPrice)\r\n                break;\r\n            numberOfSamePriceListings++;\r\n        }\r\n        const i = Math.floor(Math.random() * numberOfSamePriceListings);\r\n        if (i >= fullListings.length)\r\n            throw \"invalid index\";\r\n        return fullListings[i];\r\n    }\r\n    return null;\r\n}","import { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { TraitEmote } from \"../World\";\r\nimport { IBean } from \"./Agent\";\r\nimport { OriginAccelerator, Point, Vector } from \"./Geography\";\r\n\r\nexport interface IPickup{\r\n    key: number, \r\n    point: Point, \r\n    type: TraitEmote,\r\n    velocity: Vector\r\n}\r\n\r\nexport function GenerateEmoteFromBean(bean: IBean, emote: TraitEmote): IPickup {\r\n    return {\r\n        key: 0,\r\n        point: {\r\n            ...(MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator).point\r\n        },\r\n        type: emote,\r\n        velocity: { x: 0, y: 0 }\r\n    };\r\n}","import { IEvent } from \"../events/Events\";\r\nimport { BeanResources, IDifficulty } from \"../Game\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { EmotionSanity, EmotionWorth, GoodToThreshold, JobToGood, TraitEmote, TraitFood, TraitGood, TraitHealth, TraitSanity, TraitStamina } from \"../World\";\r\nimport { GetRandom, GetRandomNumber, GetRandomRoll } from \"../WorldGen\";\r\nimport { IBean, IChatData } from \"./Agent\";\r\nimport { GetInsanityFromBrainwashing, InsanityTraits, SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { GetFairGoodPrice, IEconomy } from \"./Economy\";\r\nimport { OriginAccelerator } from \"./Geography\";\r\nimport { IGovernment } from \"./Government\";\r\nimport { GenerateEmoteFromBean, IPickup } from \"./Pickup\";\r\nimport { MathClamp } from \"./Utils\";\r\n\r\nconst BabyChance = 0.008;\r\nexport const DaysUntilSleepy = 7;\r\nconst ChatCooldownMS = 4000;\r\n/**\r\n * beans with belief # < this are more likely to be persuaded\r\n * with belief # > this are less likely to be persuaded\r\n */\r\nconst PersuasionBeliefTarget = 2; \r\n\r\nexport const HedonismExtraChance = 0.1;\r\nexport const ParanoidUnhappyChance = 0.05;\r\nexport const HedonismHateWorkChance = 0.15;\r\nexport const DiligenceHappyChance = 0.25;\r\nexport const ParochialHappyChance = 0.25;\r\nexport const CosmopolitanHappyChance = 0.25;\r\nconst ExtrovertChatExtraChance = 0.25;\r\nconst IntrovertChatExtraChance = -.15;\r\nconst AntagonismBullyChance = 0.45;\r\nconst GossipBullyChance = 0.35;\r\nconst EnthusiasmPraiseChance = 0.45;\r\nexport const GermophobiaHospitalWorkChance = 0.25;\r\nconst NatalismExtraBabyChance = 0.04;\r\nconst AntinatalismExtraBabyChance = -0.002;\r\nconst CharismaExtraPersuasionStrength = 2; //d20 based, so 10% extra strength\r\nexport const LibertarianTaxUnhappyChance = 0.1;\r\nexport const ProgressivismTaxHappyChance = 0.1;\r\n\r\nconst MaxGraceTicks = 6;\r\n\r\nexport function BeanMaybePersuaded(bean: IBean, seed: string, belief: TraitBelief, strength: number): boolean{\r\n    if (BeanBelievesIn(bean, 'Dogmatism'))\r\n        return false;\r\n\r\n    if (!bean.beliefs.includes(belief)){\r\n        let defense = 10 + GetRandomNumber(seed, 1, 6);\r\n        defense += bean.beliefs.length - PersuasionBeliefTarget;\r\n        let offense = GetRandomNumber(seed, 1, 20) + strength;\r\n\r\n        return (offense > defense);\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function BeanCalculateHealth(bean: IBean, difficulty: IDifficulty): TraitHealth{\r\n    if (bean.discrete_health >= GoodToThreshold['medicine'].abundant)\r\n        bean.health = 'fresh';\r\n    else if (bean.discrete_health >= GoodToThreshold['medicine'].sufficient)\r\n        bean.health =  'bruised'\r\n    else if (bean.discrete_health >= GoodToThreshold['medicine'].warning)\r\n        bean.health =  'sickly'\r\n    else\r\n        bean.health =  'sick';\r\n\r\n    return bean.health;\r\n}\r\n\r\nexport function BeanCalculateStamina(bean: IBean, difficulty: IDifficulty): TraitStamina{\r\n    if (bean.discrete_stamina < 0)\r\n        bean.stamina = 'sleepy';\r\n    else if (bean.discrete_stamina <= 4)\r\n        bean.stamina =  'awake';\r\n    else\r\n        bean.stamina = 'rested';\r\n    \r\n    return bean.stamina;\r\n}\r\n\r\nexport function BeanCalculateSanity(bean: IBean, difficulty: IDifficulty): TraitSanity{\r\n    if (bean.discrete_sanity >= 8)\r\n        bean.sanity = 'sane';\r\n    else if (bean.discrete_sanity >= 5)\r\n        bean.sanity =  'stressed'\r\n    else if (bean.discrete_sanity >= 3)\r\n        bean.sanity =  'disturbed'\r\n    else\r\n        bean.sanity =  'psychotic';\r\n    return bean.sanity;\r\n}\r\nexport function BeanCalculateFood(bean: IBean, difficulty: IDifficulty): TraitFood{\r\n    if (bean.discrete_food >= GoodToThreshold['food'].abundant)\r\n    bean.food = 'stuffed';\r\n    else if (bean.discrete_food >= GoodToThreshold['food'].sufficient)\r\n    bean.food = 'sated'\r\n    else if (bean.discrete_food >= GoodToThreshold['food'].warning)\r\n    bean.food = 'hungry'\r\n    else\r\n    bean.food = 'starving';\r\n\r\n    return bean.food;\r\n}\r\n\r\nexport function BeanCalculateBeliefs(bean: IBean, econ: IEconomy, difficulty: IDifficulty, law: IGovernment){\r\n    bean.hedonFiveDayRecord = {\r\n        min: Math.min(bean.hedonFiveDayRecord.min, bean.happiness.flatAverage),\r\n        max: Math.max(bean.hedonFiveDayRecord.max, bean.happiness.flatAverage)  \r\n    };\r\n    if (bean.happiness.flatAverage === 0){\r\n        bean.lastHappiness = 0;\r\n    } else {\r\n        bean.lastHappiness = bean.happiness.flatAverage >= 0 ? (\r\n            bean.happiness.flatAverage / Math.abs(bean.hedonFiveDayRecord.max)) * 100 : (\r\n            bean.happiness.flatAverage / Math.abs(bean.hedonFiveDayRecord.min)) * 100;\r\n    }\r\n    \r\n    BeanCalculateFood(bean, difficulty);\r\n    BeanCalculateHealth(bean, difficulty);\r\n    BeanCalculateSanity(bean, difficulty);\r\n    BeanCalculateStamina(bean, difficulty);\r\n\r\n    if (bean.job === 'jobless'){\r\n        bean.fairGoodPrice = 1;\r\n    } else {\r\n        bean.fairGoodPrice = GetFairGoodPrice(econ, JobToGood(bean.job))\r\n    }\r\n}\r\nexport function BeanMaybeChat(bean: IBean): boolean {\r\n        if (bean.lastChatMS + ChatCooldownMS > Date.now()) \r\n            return false;\r\n        if (bean.action === 'chat')\r\n            return false;\r\n        const roll = Math.random();\r\n        let chance = (bean.community === 'state') ? 0.2 : 0.1;\r\n        if (BeanBelievesIn(bean, 'Extroversion')) \r\n            chance += ExtrovertChatExtraChance;\r\n        if (BeanBelievesIn(bean, 'Introversion')) \r\n            chance += IntrovertChatExtraChance;\r\n        return roll < chance;\r\n}\r\nexport function BeanGetRandomChat(bean: IBean, seed: string, findNeedy: () => IBean|undefined): IChatData{\r\n    const canPreach = bean.beliefs.length;\r\n    if (canPreach){\r\n        if (BeanBelievesIn(bean, 'Charity') && bean.cash >= 2){\r\n            //find a bean with less money than self, poorest in sight\r\n            const needy = findNeedy();\r\n            if (needy) {\r\n                return {\r\n                    participation: 'speaker',\r\n                    type: 'gift',\r\n                    targetBeanKey: needy.key\r\n                }\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Enthusiasm') && Math.random() < EnthusiasmPraiseChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'praise',\r\n                preachBelief: 'Enthusiasm'\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Antagonism') && Math.random() < AntagonismBullyChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'bully',\r\n                preachBelief: 'Antagonism'\r\n            }\r\n        } else if(BeanBelievesIn(bean, 'Gossip') && Math.random() < GossipBullyChance){\r\n            return {\r\n                participation: 'speaker',\r\n                type: 'bully',\r\n                preachBelief: 'Gossip'\r\n            }\r\n        }\r\n        return {\r\n            participation: 'speaker',\r\n            type: 'preach',\r\n            preachBelief: GetRandom(seed, bean.beliefs),\r\n            persuasionStrength: 1 + (BeanBelievesIn(bean, 'Charisma') ? CharismaExtraPersuasionStrength : 0)\r\n        }\r\n    } else {\r\n        return {\r\n            participation: 'speaker',\r\n            type: 'praise'\r\n        }\r\n    }\r\n}\r\n\r\nexport function BeanAge(bean: IBean, seed: string, diff: IDifficulty): {death?: IEvent, emotes?: IPickup[]}|undefined {\r\n    if (bean.lifecycle != 'alive') return undefined;\r\n    const emotes: IPickup[] = [];\r\n\r\n    const wasNotHungry = bean.food !== 'starving';\r\n    const wasNotSick = bean.health !== 'sick';\r\n\r\n    bean.discrete_food -= diff.bean_life.degrade_per_tick.food;\r\n    if (bean.discrete_food < 0)\r\n        bean.discrete_health -= diff.bean_life.penalty.starving_health;\r\n\r\n    BeanCalculateFood(bean, diff);\r\n    const starve = BeanMaybeDie(bean, seed, 'starvation', bean.food === 'starving', 0.6);\r\n    if (starve)\r\n        return starve;\r\n    else if (bean.food === 'starving' && wasNotHungry){\r\n        emotes.push(...BeanEmote(bean, 'unhappiness', 'Starving'));\r\n        if (BeanBelievesIn(bean, 'Gluttony')){\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Gluttony'));\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Gluttony'));\r\n        }\r\n    }\r\n        \r\n    bean.discrete_stamina -= diff.bean_life.degrade_per_tick.stamina;\r\n\r\n    BeanCalculateStamina(bean, diff);\r\n    // const exposure = BeanMaybeDie(bean, seed, 'exposure', bean.housing === 'homeless', 0.2);\r\n    // if (exposure)\r\n    //     return exposure;\r\n\r\n    bean.discrete_health -= diff.bean_life.degrade_per_tick.health;\r\n    bean.discrete_health = Math.min(bean.discrete_health, 3);\r\n\r\n    BeanCalculateHealth(bean, diff);\r\n    const sick = BeanMaybeDie(bean, seed, 'sickness', bean.health === 'sick', 0.4);\r\n    if (sick)\r\n        return sick;\r\n    else if (bean.health === 'sick' && wasNotSick){\r\n        emotes.push(...BeanEmote(bean, 'unhappiness', 'Sick'));\r\n        if (BeanBelievesIn(bean, 'Germophobia')){\r\n            emotes.push(...BeanEmote(bean, 'unhappiness', 'Germophobia'));\r\n        }\r\n    }\r\n\r\n    bean.discrete_fun -= diff.bean_life.degrade_per_tick.fun;\r\n    bean.discrete_fun = Math.max(0, bean.discrete_fun);\r\n\r\n    if (!BeanIsInCrisis(bean))\r\n        bean.graceTicks = MathClamp(bean.graceTicks+1, 0, MaxGraceTicks);\r\n    \r\n    if (emotes.length)\r\n        return {\r\n            emotes: emotes\r\n        };\r\n    else \r\n        return undefined;\r\n}\r\n\r\nexport function BeanEmote(bean: IBean, emote: TraitEmote, source: string): IPickup[]{\r\n    bean.discrete_sanity = MathClamp(bean.discrete_sanity + EmotionSanity[emote], 0, 10);\r\n    bean.hedonHistory[0][source] = (bean.hedonHistory[0][source] || 0) + EmotionWorth[emote];\r\n    const out = [\r\n        GenerateEmoteFromBean(bean, emote)\r\n    ];\r\n    if (BeanBelievesIn(bean, 'Hedonism') && (emote === 'happiness' || emote === 'love') && Math.random() < HedonismExtraChance){\r\n        out.push(...BeanEmote(bean, 'happiness', 'Hedonism'));\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function BeanBelievesIn(bean: IBean, trait: TraitBelief): boolean{\r\n    return bean.beliefs.indexOf(trait) !== -1;\r\n}\r\nexport function BeanMaybeBaby(bean: IBean, seed: string, costOfLiving: number): IEvent|undefined{\r\n    if (BeanCanBaby(bean, costOfLiving) &&\r\n        GetRandomRoll(seed, BeanBabyChance(bean))) {\r\n        if (BeanBelievesIn(bean, 'Natalism')){\r\n            BeanEmote(bean, 'love', 'Natalist Parent');\r\n        } else if (BeanBelievesIn(bean, 'Antinatalism')) {\r\n            BeanEmote(bean, 'hate', 'Antinatalism');\r\n        } else {\r\n            BeanEmote(bean, 'happiness', 'Proud Parent');\r\n        }\r\n        return {\r\n            icon: '🎉', trigger: 'birth', message: `${bean.name} has a baby!`,\r\n            key: 0,\r\n        }\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\nexport function BeanMaybeCrime(bean: IBean, good: TraitGood): boolean {\r\n    if (good === 'fun') return false;\r\n    const roll = Math.random();\r\n    let chance = 0.05;\r\n    if (bean.community === 'ego'){\r\n        chance += .1;\r\n    }\r\n    if (BeanIsInCrisis(bean)){\r\n        chance += .1;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Greed')){\r\n        chance += .25;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Anarchism')){\r\n        chance += .33;\r\n    }\r\n    if (BeanBelievesIn(bean, 'Authority')){\r\n        chance += -.25;\r\n    }\r\n    if (good === 'food' && bean.food === 'starving'){\r\n        chance += .25;\r\n    }\r\n    else if (good === 'medicine' && bean.health === 'sick'){\r\n        chance += .25;\r\n    }\r\n    return chance <= roll;\r\n}\r\nexport function BeanMaybeParanoid(bean: IBean) {\r\n    if (BeanBelievesIn(bean, 'Paranoia') && Math.random() < ParanoidUnhappyChance){\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function BeanMaybeScarcity(bean: IBean, good: TraitGood){\r\n    let scarce = false;\r\n    if (good === 'food' && (bean.food === 'starving' || bean.food === 'hungry'))\r\n        scarce = true;\r\n    else if (good === 'medicine' && (bean.health === 'sick' || bean.health === 'sickly'))\r\n        scarce = true;\r\n    return scarce;\r\n}\r\nexport function BeanCanBaby(bean: IBean, costOfLiving: number): boolean{\r\n    return bean.lifecycle === 'alive' && \r\n        bean.cash > costOfLiving * 3 &&\r\n        !BeanIsInCrisis(bean);\r\n}\r\nexport function BeanBabyChance(bean: IBean): number{\r\n    let base = BabyChance;\r\n    if (BeanBelievesIn(bean, 'Natalism'))\r\n        base += NatalismExtraBabyChance;\r\n    if (BeanBelievesIn(bean, 'Antinatalism'))\r\n        base += AntinatalismExtraBabyChance;\r\n    return base;\r\n}\r\nexport function BeanMaybeDie(bean: IBean, seed: string, cause: string, isDire: boolean, chance: number): {death: IEvent, emotes: IPickup[]}|undefined{\r\n    if (isDire && Math.random() <= chance) {\r\n        if (bean.graceTicks <= 0){\r\n            return BeanDie(bean, seed, cause);\r\n        }\r\n        bean.graceTicks--;\r\n    }\r\n    return undefined;\r\n}\r\nexport function BeanDie(bean: IBean, seed: string, cause: string): {death: IEvent, emotes: IPickup[]}{\r\n    bean.lifecycle = 'dead';\r\n    const pains = GetRandomNumber(seed, 2, 3);\r\n    const emotes = (new Array(pains)).map(\r\n        x => GenerateEmoteFromBean(bean, 'hate')\r\n    );\r\n    return {\r\n        death: {\r\n            icon: '☠️', trigger: 'death', message: `${bean.name} died of ${cause}!`, \r\n            beanKey: bean.key, cityKey: bean.cityKey,\r\n            point: (MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator).point,\r\n            key: 0,\r\n        },\r\n        emotes: emotes\r\n    }\r\n}\r\n\r\nexport function BeanLoseSanity(bean: IBean, amount: number){\r\n    const multiplier = BeanBelievesIn(bean, 'Neuroticism') ? 2 : 1;\r\n    bean.discrete_sanity -= multiplier * amount;\r\n}\r\n\r\nexport function BeanGetSpeech(bean: IBean): string|undefined { \r\n    if (bean.action === 'chat'){\r\n        if (bean.actionData.chat?.participation === 'speaker' && bean.actionData.chat.preachBelief){\r\n            return '💬'+SecondaryBeliefData[bean.actionData.chat.preachBelief].icon;\r\n        }\r\n    }\r\n}\r\n\r\nexport function BeanIsInCrisis(bean: IBean): boolean{\r\n    return bean.food === 'starving' ||\r\n    // bean.stamina === 'homeless' ||\r\n    bean.health === 'sick';\r\n}\r\n\r\nexport function BeanCanPurchase(bean: IBean, cost: BeanResources, sanityBonus: number){\r\n    return (cost.sanity === undefined || bean.discrete_sanity >= cost.sanity + sanityBonus);\r\n}\r\n\r\nexport function BeanGetFace(bean: IBean): string{\r\n    if (bean.lifecycle === 'dead')\r\n        return '💀';\r\n    if (bean.actionData.act === 'sleep'){\r\n        return bean.housing === 'housed' ? '😴' : '🥶';\r\n    }\r\n    if (bean.actionData.act === 'crime'){\r\n        return '😈';\r\n    }\r\n    if (bean.actionData.act === 'relax'){\r\n        return '😎';\r\n    }\r\n    if (bean.actionData.act === 'chat'){\r\n        if (bean.actionData.chat?.participation === 'speaker'){\r\n            switch(bean.actionData?.chat?.type){\r\n                default: return '😃';\r\n                case 'gift': return '😇';\r\n                case 'praise': return '🥳';\r\n                case 'bully': return '😈';\r\n            }\r\n        }\r\n        return '🤨';\r\n    }\r\n    if (bean.food === 'starving')\r\n        return '😫';\r\n    if (bean.health === 'sick')\r\n        return '🤢';\r\n    if (bean.job === 'jobless')\r\n        return '😧';\r\n    if (bean.lastHappiness < 0)\r\n        return '☹️';\r\n    if (bean.lastHappiness >= 50)\r\n        return '🙂';\r\n    return '😐';\r\n}\r\n\r\nexport function BeanMaybeGetInsanity(seed: string, bean: IBean): {beanKey: number, newInsanity: InsanityTraits}|undefined{\r\n    const insanity = GetInsanityFromBrainwashing(seed, bean.sanity, bean.beliefs);\r\n    if (insanity){\r\n        return {\r\n            beanKey: bean.key,\r\n            newInsanity: insanity\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n","import { ChangePubSub, IEvent, PubSub } from \"./events/Events\";\r\n\r\nexport class SignalStore {\r\n    alienEnergy = new ChangePubSub();\r\n    alienBots = new ChangePubSub();\r\n    alienHedons = new ChangePubSub();\r\n    newTraitSeen = new PubSub<{k: string, v: boolean}>();\r\n    events = new PubSub<IEvent>();\r\n    autosave = new PubSub<boolean>();\r\n}\r\n\r\nexport const SignalStoreInstance = new SignalStore();","import { DefaultDifficulty, IDifficulty, PlayerResources } from \"../Game\";\r\nimport { SignalStoreInstance } from \"../SignalStore\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { Number_Starting_City_Pop } from \"../WorldGen\";\r\nimport { TraitBelief } from \"./Beliefs\";\r\nimport { IDate } from \"./Time\";\r\n\r\n\r\nexport interface IPlayerData{\r\n    scanned_bean: {[beanKey: number]: boolean};\r\n    abductedBeanKeys: number[];\r\n    seenBeliefs: {[key: string]: boolean};\r\n    speechcrimes: {[year: number]: number};\r\n    next_grade: IDate;\r\n    pastReportCards: IReportCard[];\r\n    energy: IResource;\r\n    bots: IResource;\r\n    hedons: IResource;\r\n    workingReportCard: IReportCard;\r\n    techProgress: TechProgress;\r\n    currentlyResearchingTech: Tech|undefined;\r\n    difficulty: IDifficulty;\r\n    beliefInventory: BeliefInventory[];\r\n    goalProgress: {[key: string]: IGoalProgress};\r\n    goals: GoalKey[]\r\n}\r\n\r\nexport interface IResource{\r\n    amount: number;\r\n    income: number;\r\n}\r\n\r\nexport type GoalKey = 'found_utopia'|'build_house_n_farm'|'beam_3'|'scan'|'set_policy'|'brainwash'|'c+_grade';\r\nexport interface IGoal{\r\n    key: GoalKey;\r\n    text: string;\r\n    tooltip?: string;\r\n    reward?: PlayerResources,\r\n    check: (world: IWorldState) => boolean\r\n}\r\nexport interface IGoalProgress {\r\n    done: boolean,\r\n    step: number\r\n}\r\nexport interface IProgressable{\r\n    goalProgress: {[key: string]: IGoalProgress},\r\n    goals: Array<GoalKey>\r\n}\r\nexport const Goals: {[key in GoalKey]: IGoal} = {\r\n    found_utopia: {\r\n        key: 'found_utopia', text: 'Found your Utopia',\r\n       check: (world) => world.buildings.allIDs.length > 0\r\n    },\r\n    build_house_n_farm: {\r\n        key: 'build_house_n_farm', text: 'Build a house and farm',\r\n        check: (world) => {\r\n            return world.buildings.allIDs.find(k => world.buildings.byID[k].type == 'farm') != null &&\r\n            world.buildings.allIDs.find(k => world.buildings.byID[k].type == 'house') != null;\r\n        },\r\n        reward: {\r\n            energy: 3, bots: 3\r\n        }\r\n    }, \r\n    beam_3: {\r\n        key: 'beam_3', text: 'Beam in 3 new beings', \r\n        check: (world) => {\r\n            return world.beans.allIDs.filter(k => !world.beans.byID[k].bornInPetri).length >= (3 + Number_Starting_City_Pop)\r\n        }\r\n    }, \r\n    scan: {\r\n        key: 'scan', text: 'Scan a Subject',\r\n        check: (world) => Object.keys(world.alien.scanned_bean).length > 0\r\n    }, \r\n    set_policy: {\r\n        key: 'set_policy', text: 'Set a Gov Policy',\r\n        check: (world) => false\r\n    }, \r\n    brainwash: {\r\n        key: 'brainwash', text: 'Brainwash a Subject',\r\n        check: (world) => false\r\n    }, \r\n    'c+_grade': {\r\n        key: 'c+_grade', text: 'Receive a C+ Grade',\r\n        check: (world) => false\r\n    } \r\n};\r\n\r\nexport type Grade = 'F'|'D'|'C'|'B'|'A';\r\nexport type RubricKeys = 'Happiness'|'Prosperity'|'Stability'|'Dogma';\r\nexport type IReportCard = {[key in RubricKeys]: Grade}\r\nexport type GradingFunc = (world: IWorldState) => IReportCard;\r\nexport interface ICurriculum {\r\n    GradeWorld: GradingFunc,\r\n    RubricDescription: {[key in RubricKeys]: string} \r\n}\r\nexport const Curriculums: {[difficulty: string]: ICurriculum} = {\r\n    Default: {\r\n        GradeWorld: (world: IWorldState) => {return{\r\n            Happiness: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.lastHappiness >- .2),\r\n            Prosperity: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.food !== 'hungry'),\r\n            Stability: BooleanAverageGrader(world.beans.allIDs.map(x => world.beans.byID[x]), (o) => o.sanity === 'sane'),\r\n            Dogma: GradeUpToNumber((world.alien.speechcrimes[world.date.year] || 0), 10, 10),\r\n        }},\r\n        RubricDescription: {\r\n            Happiness: 'Subjects are at least 20% happy',\r\n            Prosperity: 'Subjects are not hungry',\r\n            Stability: 'Subjects are all sane',\r\n            Dogma: 'Up to 10 Speechcrimes'\r\n        }\r\n    }\r\n}\r\n/**\r\n * \r\n * @param number number of bad events\r\n * @param allowance number of allowed events\r\n * @param maximum range of \"overflow\" events\r\n */\r\nfunction GradeUpToNumber(number: number, allowance: number, maximum: number): Grade{\r\n    const normalized = 1 - Math.min(1, Math.max(0, number - allowance) / maximum);\r\n    return NormalizedScoreToGrade(normalized);\r\n}\r\nfunction BooleanAverageGrader<T>(array: T[], grade: (o: T) => boolean): Grade{\r\n    if (array.length < 1) return 'F';\r\n    return NormalizedScoreToGrade(array.filter(grade).length / array.length);\r\n}\r\nfunction NormalizedScoreToGrade(normNumber: number): Grade{\r\n    if (normNumber < .58) return 'F';\r\n    if (normNumber < .68) return 'D';\r\n    if (normNumber < .78) return 'C';\r\n    if (normNumber < .88) return 'B';\r\n    return 'A';\r\n}\r\nconst GradeWeights: {[key in Grade]: number} ={\r\n    A: 5,\r\n    B: 4,\r\n    C: 3,\r\n    D: 2,\r\n    F: 1\r\n}\r\nexport function GetAverage(reportCard: IReportCard): Grade{\r\n    return NormalizedScoreToGrade((GradeWeights[reportCard.Happiness] + \r\n        GradeWeights[reportCard.Prosperity] + \r\n        GradeWeights[reportCard.Stability] +\r\n        GradeWeights[reportCard.Dogma] \r\n    ) / 20);\r\n}\r\n\r\nexport type Tech = 'sanity_bonus'|'fast_resources'|'trauma_nanobots'|'neural_duplicator';\r\nexport interface ITechInfo{\r\n    tech: Tech,\r\n    /**\r\n     * number of tech points required to complete research\r\n     */\r\n    techPoints: number,\r\n    name: string,\r\n    description: string\r\n}\r\nexport const TechData: {[key in Tech]: ITechInfo} = {\r\n    'sanity_bonus': {\r\n        tech: 'sanity_bonus',\r\n        name: 'Surgical Psychops',\r\n        techPoints: 30,\r\n        description: 'Brainwashing causes -1 🧠 Sanity damage'\r\n    },\r\n    'fast_resources': {\r\n        tech: 'fast_resources',\r\n        name: '0 Dimensional Supersiphons',\r\n        techPoints: 30,\r\n        description: 'Faster ⚡️ and 🤖 accumulation'\r\n    },\r\n    'trauma_nanobots': {\r\n        tech: 'trauma_nanobots',\r\n        name: 'Trauma Nanobots',\r\n        techPoints: 30,\r\n        description: 'Spend 🤖 to stop Subject from dying'\r\n    },\r\n    'neural_duplicator': {\r\n        tech: 'neural_duplicator',\r\n        name: 'Level 2 Neural Duplication',\r\n        techPoints: 30,\r\n        description: 'Copy 🧠 Traits 1 additional time'\r\n    }\r\n}\r\nexport interface IPlayerTechProgress{\r\n    /**\r\n     * number of research points\r\n     */\r\n    researchPoints: number\r\n}\r\nexport type TechProgress = {[key: string]: IPlayerTechProgress};\r\nexport interface BeliefInventory{\r\n    trait: TraitBelief,\r\n    gems: number\r\n}\r\n\r\nexport function PlayerReward(player: IPlayerData, reward: PlayerResources){\r\n    if (reward.bots){\r\n        player.bots.amount += reward.bots;\r\n        SignalStoreInstance.alienBots.publish({change: reward.bots});\r\n    }\r\n    if (reward.energy){\r\n        player.energy.amount += reward.energy;\r\n        SignalStoreInstance.alienEnergy.publish({change: reward.energy});\r\n    }\r\n    if (reward.hedons){\r\n        player.hedons.amount += reward.hedons;\r\n        SignalStoreInstance.alienHedons.publish({change: reward.hedons});\r\n    }\r\n}\r\n\r\nexport function CheckGoals(world: IWorldState, player: IPlayerData){\r\n    for (let i = 0; i < player.goals.length; i++) {\r\n        const goal = player.goals[i];\r\n        if (player.goalProgress[goal] == null){\r\n            player.goalProgress[goal] = {done: false, step: 0};\r\n        }\r\n        if (!player.goalProgress[goal].done) {\r\n            const done = Goals[goal].check(world);\r\n            const reward = Goals[goal].reward;\r\n            player.goalProgress[goal].done = done;\r\n            if (done && reward != null){\r\n                PlayerReward(player, reward);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function CheckReportCard(world: IWorldState, player: IPlayerData) {\r\n    player.workingReportCard = Curriculums.Default.GradeWorld(world);\r\n}\r\nexport function HasResearched(techProgress: TechProgress, tech: Tech){\r\n    return techProgress[tech] != null && techProgress[tech].researchPoints >= TechData[tech].techPoints\r\n}\r\nexport function PlayerCanAfford(player: IPlayerData, cost: PlayerResources, qty: number = 1): boolean{\r\n    return (cost.bots === undefined || player.bots.amount >= cost.bots * qty) &&\r\n    (cost.energy === undefined || player.energy.amount >= cost.energy * qty) && \r\n    (cost.hedons === undefined || player.hedons.amount >= cost.hedons * qty);\r\n}\r\nexport function PlayerUseTraitGem(alien: IPlayerData, t: TraitBelief){\r\n    const all = alien.beliefInventory;\r\n    const existing = all.find(x => x.trait === t);\r\n    if (existing){\r\n        existing.gems -= 1;\r\n        alien.beliefInventory = [...all.filter(x => x.gems > 0)];\r\n    }\r\n}\r\nexport function PlayerTryPurchase(player: IPlayerData, cost: PlayerResources, qty: number = 1): boolean{\r\n    if (PlayerCanAfford(player, cost, qty)){\r\n        PlayerPurchase(player, cost, qty);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function PlayerPurchase(player: IPlayerData, cost: PlayerResources, qty: number = 1): void{\r\n    if (cost.bots){\r\n        player.bots.amount -= cost.bots * qty;\r\n        SignalStoreInstance.alienBots.publish({change: -cost.bots * qty});\r\n    }\r\n    if (cost.energy){\r\n        player.energy.amount -= cost.energy * qty;\r\n        SignalStoreInstance.alienEnergy.publish({change: -cost.energy * qty});\r\n    }\r\n    if (cost.hedons){\r\n        player.hedons.amount -= cost.hedons * qty;\r\n        SignalStoreInstance.alienHedons.publish({change: -cost.hedons * qty});\r\n    }\r\n}","import { EntityAddToSlice } from \"../state/entity.state\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { ICity } from \"./City\";\r\nimport { IEconomy } from \"./Economy\";\r\nimport { BuildingToGood, BuildingTypes, HexPoint, Point } from \"./Geography\";\r\n\r\nexport type DwellingKind = 'apartment'|// communal urban\r\n'townhouse'| // individual urban\r\n'house'| // (detached) rural\r\n'loft' // mixedUse urban\r\n;\r\n\r\nexport const DwellingKindToIcon = {\r\n    apartment: '🚪',\r\n    house: '🏡',\r\n    townhouse: '🏘️',\r\n    loft: '🚪'\r\n}\r\n\r\nexport interface IBuilding{\r\n    key: number;\r\n    hex: HexPoint,\r\n    point: Point;\r\n    type: BuildingTypes;\r\n    employeeBeanKeys: number[];\r\n    upgradedJobs: boolean, // more jobs in 1 place\r\n    upgradedStorage: boolean, //store more goods\r\n    upgradedLoft: boolean, //add 1 dwelling\r\n    enterpriseKey?: number,\r\n    lotKey: number,\r\n    dwellingKeys?: number[]\r\n}\r\n\r\nexport interface IDwelling{\r\n    key: number,\r\n    occupantKey?: number,\r\n    buildingKey: number,\r\n    kind: DwellingKind\r\n}\r\n\r\nconst EnterpriseBuildings: BuildingTypes[] = ['farm', 'hospital', 'theater'];\r\n\r\nexport function BuildingNumOfOpenJobs(b: IBuilding): number{\r\n    return BuildingMaximumJobs(b) - b.employeeBeanKeys.length;\r\n}\r\nexport const BuildingJobs: {[key in BuildingTypes]: number} = {\r\n    'church': 0,\r\n    'courthouse': 0,\r\n    'park': 0,\r\n    'house': 0,\r\n    'farm': 3,\r\n    'hospital': 3,\r\n    'theater': 3,\r\n    'nature': 0\r\n};\r\nexport function BuildingMaximumJobs(b: IBuilding): number{\r\n    const multiplier = b.upgradedJobs ? 2: 1;\r\n    return BuildingJobs[b.type] * multiplier;\r\n}\r\n\r\nexport function BuildingTryFreeBean(b: IBuilding, beanKey: number): boolean{\r\n    const oldLen = b.employeeBeanKeys.length;\r\n    b.employeeBeanKeys = b.employeeBeanKeys.filter(x => x != beanKey);\r\n    return oldLen === b.employeeBeanKeys.length+1;\r\n}\r\nexport function GenerateIBuilding(world: IWorldState, city: ICity, type: BuildingTypes, hex: HexPoint, point: Point, lotKey: number, econ: IEconomy): IBuilding{\r\n    const newBuilding: IBuilding = {\r\n        type: type,\r\n        key: world.buildings.nextID++,\r\n        hex: hex,\r\n        point: {...point},\r\n        lotKey: lotKey,\r\n        employeeBeanKeys: [],\r\n        upgradedLoft: false,\r\n        upgradedJobs: false,\r\n        upgradedStorage: false\r\n    }\r\n    world.buildings.allIDs.push(newBuilding.key);\r\n    world.buildings.byID[newBuilding.key] = newBuilding;\r\n    city.buildingKeys.push(newBuilding.key);\r\n    const lot = world.lots.byID[lotKey];\r\n    lot.buildingKey = newBuilding.key;\r\n\r\n    if (EnterpriseBuildings.some(x => x === type)){\r\n        newBuilding.enterpriseKey = newBuilding.key;\r\n        world.enterprises.allIDs.push(newBuilding.key);\r\n        world.enterprises.byID[newBuilding.key] = {\r\n            cash: 0,\r\n            cityKey: city.key,\r\n            enterpriseType: \"company\",\r\n            buildingKey: newBuilding.key,\r\n            key: newBuilding.key,\r\n            ticksSinceLastSale: 0\r\n        }\r\n    }\r\n    if (type === 'house'){\r\n        const kind = world.districts.byID[lot.districtKey].kind === 'urban' ? 'townhouse' : 'house';\r\n        const dwellingKeys: number[] = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            const newDwell: IDwelling = {\r\n                key: 0,\r\n                buildingKey: newBuilding.key,\r\n                kind: kind\r\n            };\r\n            EntityAddToSlice(world.dwellings, newDwell);\r\n            dwellingKeys.push(newDwell.key);\r\n        }\r\n        newBuilding.dwellingKeys = dwellingKeys;\r\n    }\r\n\r\n    const good = BuildingToGood[type];\r\n    \r\n    if (good && good != 'fun')\r\n    {\r\n        world.economy.market.listings[good].push({\r\n            price: 1,\r\n            quantity: 3,\r\n            sellerCityKey: city.key,\r\n            sellerEnterpriseKey: newBuilding.key\r\n        });\r\n    }\r\n    return newBuilding;\r\n}","import { PubSub } from \"../events/Events\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { Trait, TraitEmote } from \"../World\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IBean } from \"./Agent\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\nimport { GetCostOfLiving, IEconomy } from \"./Economy\";\r\nimport { BuildingTypes, HexPoint, Point, Vector } from \"./Geography\";\r\nimport { IPickup } from \"./Pickup\";\r\nimport { BuildingTryFreeBean, IBuilding } from \"./RealEstate\";\r\n\r\n\r\nexport function reportIdeals(beans: IBean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'ego' as Trait, (b) => b.ideals);\r\n}\r\nexport function reportCommunity(beans: IBean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'state' as Trait, (b) => b.community);\r\n}\r\nexport function reportEthno(beans: IBean[]): {avg: number, winner: Trait}{\r\n    return _report(beans, 'circle' as Trait, (b) => b.ethnicity);\r\n}\r\nexport function _report(beans: IBean[], defWin: Trait, beanPropGet: (bean: IBean) => Trait): {avg: number, winner: Trait}{\r\n    const result = { avg: 0, winner: defWin };\r\n    const all = beans.reduce((stash: any, bean) => {\r\n        const value = beanPropGet(bean);\r\n        if (stash[value] == null) { stash[value] = 1;}\r\n        else { stash[value]++}\r\n        return stash;\r\n    }, {});\r\n    Object.keys(all).forEach((trait) => {\r\n        if (all[trait] > result.avg) {\r\n            result.avg = all[trait];\r\n            result.winner = trait as Trait;\r\n        }\r\n    });\r\n    result.avg /= beans.length;\r\n    return result;\r\n}\r\n\r\nexport class UFO{\r\n    constructor(public key: number, public point: HexPoint, public action: string){}\r\n}\r\nexport class Pickup implements IPickup{\r\n    constructor(public key: number, public point: Point, public type: TraitEmote){}\r\n    public velocity: Vector = {x: 0, y: 0};\r\n    public onMove = new PubSub<Point>();\r\n}\r\n\r\nexport interface ICity{\r\n    key: number,\r\n    name: string,\r\n    petriRadius: number,\r\n    petriOrigin: Point,\r\n    hex_size: Point,\r\n    deadBeanKeys: number[],\r\n    beanKeys: number[],\r\n    ufoKeys: number[],\r\n    buildingKeys: number[],\r\n    pickupMagnetPoint: Point|undefined,\r\n    hexes: HexPoint[],\r\n    districtKeys: number[],\r\n    buildingMap: {[hexKey: string]: number},\r\n    pickupKeys: number[],\r\n    costOfLiving: number\r\n}\r\n\r\nexport function CalculateCityComputed(city: ICity, economy: IEconomy){\r\n    city.costOfLiving = GetCostOfLiving(economy);\r\n}\r\n/**\r\n * SIDE-EFFECTS\r\n * @param bean \r\n * @param world \r\n */\r\nexport function BeanLoseJob(bean: IBean, world: IWorldState){\r\n    if (bean.employerEnterpriseKey != null){\r\n        const building = world.buildings.byID[bean.employerEnterpriseKey];\r\n        const enterprise = world.enterprises.byID[bean.employerEnterpriseKey];\r\n        if (enterprise.ownerBeanKey == bean.key){\r\n            enterprise.ownerBeanKey = building.employeeBeanKeys.find(x => x != bean.key);\r\n        }\r\n        BuildingUnsetJob(building, bean);\r\n    }\r\n}\r\nexport function BuildingUnsetJob(building: IBuilding, bean: IBean){\r\n    if (bean.job === 'jobless') return;\r\n    if (BuildingTryFreeBean(building, bean.key)){\r\n        bean.employerEnterpriseKey = undefined;\r\n        bean.job = 'jobless';\r\n    }\r\n}\r\nexport function CityGetPopulationTraitsList(scannedBeans: {[beanKey: number]: boolean}, beans: IBean[]): {icon: string, noun: string, count: number}[]{\r\n    return Array.from(\r\n        beans.reduce((m, b) => {\r\n            if (scannedBeans[b.key]){\r\n                b.beliefs.forEach((t) => {\r\n                    const prev = m.get(t) || 0;\r\n                    m.set(t, prev+1);\r\n                });\r\n            } else {\r\n                m.set('Unknown', (m.get('Unknown') || 0) + 1);\r\n            }\r\n            return m;\r\n        }, new Map<TraitBelief|'Unknown', number>()).entries()\r\n    ).sort(([aT, aC], [bT, bC]) => bC - aC).map(([t, c]) => {\r\n        return t === 'Unknown' ? {\r\n            icon: '❔',\r\n            noun: 'Unknown',\r\n            count: c\r\n        } : {\r\n            icon: SecondaryBeliefData[t].icon,\r\n            noun: SecondaryBeliefData[t].noun,\r\n            count: c\r\n        }\r\n    });\r\n}\r\nexport function CityGetRandomBuildingOfType(city: ICity, world: IWorldState, buildingType: BuildingTypes): IBuilding|undefined{\r\n    const keysOfType: number[] = city.buildingKeys.filter(x => world.buildings.byID[x].type === buildingType);\r\n    if (keysOfType.length < 1)\r\n        return undefined;\r\n    const r = GetRandom(world.seed, keysOfType);\r\n    return world.buildings.byID[r]\r\n}\r\nexport function CityGetRandomHomelessSleepingBuilding(city: ICity, world: IWorldState): IBuilding|undefined{\r\n    const keysOfType: number[] = city.buildingKeys.filter(x => world.buildings.byID[x].type !== 'house');\r\n    if (keysOfType.length < 1)\r\n        return undefined;\r\n    const r = GetRandom(world.seed, keysOfType);\r\n    return world.buildings.byID[r]\r\n}\r\nexport function CityGetRandomEntertainmentBuilding(city: ICity, world: IWorldState): IBuilding|undefined{\r\n    const keysOfType: number[] = city.buildingKeys.filter(x => world.buildings.byID[x].type === 'nature' || world.buildings.byID[x].type === 'park' || world.buildings.byID[x].type === 'theater');\r\n    if (keysOfType.length < 1)\r\n        return undefined;\r\n    const r = GetRandom(world.seed, keysOfType);\r\n    return world.buildings.byID[r]\r\n}\r\nexport function CityGetNearestNeighbors(city: ICity, source: IBean): number[]{\r\n    const q = MoverStoreInstance.Get('bean', source.key).current;\r\n    if (!q)\r\n        return [];\r\n    return city.beanKeys.filter((bKey) => {\r\n        if (bKey == source.key) return false;\r\n\r\n        const p = MoverStoreInstance.Get('bean', bKey).current;\r\n        if (!p)\r\n            return false;\r\n        const squared = Math.pow(p.point.x - q.point.x, 2)+Math.pow(p.point.y - q.point.y, 2);\r\n\r\n        return squared < 1600 && squared > 600;\r\n    });\r\n}","import { AnyAction } from \"@reduxjs/toolkit\";\r\nimport { IDifficulty } from \"../Game\";\r\nimport { MoverStoreInstance as MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { getRandomSlotOffset } from \"../petri-ui/Building\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { beanBePersuaded, beanBuy, beanCrime, beanEmote, beanHitDestination, beanRelax, beanWork, changeState } from \"../state/features/world.reducer\";\r\nimport { BeanPhysics, GoodIcon, JobToGood, TraitCommunity, TraitEmote, TraitEthno, TraitFaith, TraitFood, TraitGood, TraitHealth, TraitHousing, TraitIdeals, TraitJob, TraitSanity, TraitStamina } from \"../World\";\r\nimport { GetRandomNumber } from \"../WorldGen\";\r\nimport { WorldSfxInstance } from \"../WorldSound\";\r\nimport { BeanBelievesIn, BeanEmote, BeanGetRandomChat, BeanMaybeChat, BeanMaybeCrime, BeanMaybeParanoid, BeanMaybePersuaded, BeanMaybeScarcity } from \"./Bean\";\r\nimport { HedonExtremes, HedonReport, HedonSourceToVal, TraitBelief } from \"./Beliefs\";\r\nimport { CityGetNearestNeighbors, CityGetRandomBuildingOfType, CityGetRandomEntertainmentBuilding, CityGetRandomHomelessSleepingBuilding, ICity } from \"./City\";\r\nimport { EconomyCanBuy, IMarketReceipt, ISeller } from \"./Economy\";\r\nimport { accelerate_towards, BuildingTypes, GoodToBuilding, HexPoint, hex_linedraw, hex_to_pixel, ILot, JobToBuilding, OriginAccelerator, pixel_to_hex, Point } from \"./Geography\";\r\nimport { IBuilding } from \"./RealEstate\";\r\nimport { IDate } from \"./Time\";\r\nimport { SampleNormalDistribution, StatsNormalDev, StatsNormalMean } from \"./Utils\";\r\n\r\nexport type Act = 'travel'|'work'|'sleep'|'chat'|'soapbox'|'craze'|'idle'|'buy'|'crime'|'relax';\r\n\r\n/**\r\n * cruise == interruptible travel towards destination\r\n * \r\n * approach == uninterruptible travel into destination slot\r\n export type Travel = 'cruise'|'approach';\r\n */\r\n\r\nexport type RecreationActivity = 'performance'|'artistry'|'sport'|'music'|'outdoors';\r\n\r\n// 🎤 🩰 🎭\r\n// 🎨 🖋️ 🏺\r\n// ⚽️ 🏒 🎾\r\n// 🎹 🥁 🎸\r\n// 🎣 🤿 🎒\r\n// losers: 🏏 🏐 🏀\r\n\r\nexport interface IActivityData {\r\n    act: Act;\r\n    elapsed?: number;\r\n    // location?: Point, //FROM Point\r\n    destinations?: Point[]; //point to travel to??\r\n    destinationIndex?: number; //which point are we heading towards\r\n    intent?: IActivityData; //when travelling, what do you intend to do next\r\n    good?: TraitGood; //good to buy or work\r\n    crimeGood?: 'food'|'medicine';\r\n    // travel?: Travel;\r\n    chat?: IChatData;\r\n    buyAttempts?: number;\r\n    buyReceipt?: IMarketReceipt\r\n}\r\n\r\nexport interface IPrioritizedActivityData extends IActivityData{\r\n    priority: number;\r\n}\r\n\r\nexport interface IChatData{\r\n    participation: 'speaker'|'listener';\r\n    type: 'praise'|'bully'|'preach'|'gift';\r\n    preachBelief?: TraitBelief;\r\n    /**\r\n     * strength of the preacher's persuasion\r\n     */\r\n    persuasionStrength?: number;\r\n    /**\r\n     * target key of the bean who is targeted for praise or bully\r\n     */\r\n    targetBeanKey?: number;\r\n}\r\n\r\nexport interface IBeanAgent{\r\n    key: number;\r\n    action: Act;\r\n    actionData: IActivityData;\r\n    priorities: IPrioritizedActivityData[]\r\n}\r\nexport interface StateFunctions {\r\n    enter: (agent: IBean) => AnyAction|undefined;\r\n    act: (agent: IBean, world: IWorldState, elapsed: number, deltaMS: number) => {action?: AnyAction|AnyAction[], newActivity?: IActivityData};\r\n    exit: (agent: IBean, seed: string) => AnyAction|undefined;\r\n}\r\nconst RelaxationDurationMS = 3000;\r\nconst CrimeDurationMS = 1500;\r\nconst TransactMaximumDurationMS = 1100;\r\nconst ChatDurationMS = 1000;\r\nconst WorkDurationMS = 3000;\r\nconst SleepDurationMS = 3000;\r\nconst CatatoniaWalkSpeedPercentage = 0.4;\r\n\r\nexport const BeanActions: {[act in Act]: StateFunctions} = {\r\n    'travel': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number, deltaMS: number) => {\r\n            const city = world.cities.byID[agent.cityKey];\r\n            const destinationTargetIndex = agent.actionData.destinationIndex || 0;\r\n            if (agent.actionData.destinations == null || \r\n                agent.actionData.destinations.length === 0 || \r\n                destinationTargetIndex >= agent.actionData.destinations.length){\r\n                if (agent.actionData.intent)\r\n                    return {\r\n                        newActivity: agent.actionData.intent\r\n                    }\r\n                else\r\n                    return {\r\n                        newActivity: {\r\n                            act: 'idle'\r\n                        }\r\n                    }\r\n            }\r\n            const target = agent.actionData.destinations[destinationTargetIndex];\r\n\r\n            if (isNaN(target.x) || isNaN(target.y)) {\r\n                //sanity check\r\n                console.warn('NaN destination, resetting to idle')\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                };\r\n            }\r\n            const newAccelerator = {\r\n                ...(MoverStoreInstance.Get('bean', agent.key).current || OriginAccelerator)\r\n            };\r\n\r\n            const collide = accelerate_towards(\r\n                newAccelerator,\r\n                target,\r\n                BeanPhysics.AccelerateS * (BeanBelievesIn(agent, 'Catatonia') ? CatatoniaWalkSpeedPercentage : 1) * deltaMS/1000, \r\n                BeanPhysics.MaxSpeed, \r\n                BeanPhysics.CollisionDistance,\r\n                BeanPhysics.Brake);\r\n\r\n            MoverStoreInstance.Get('bean', agent.key).publish(newAccelerator);\r\n            \r\n            if (collide){\r\n                return {\r\n                    action: beanHitDestination({beanKey: agent.key})\r\n                };\r\n            }\r\n            \r\n            if (city) {\r\n                const nearbyBeanKeys = CityGetNearestNeighbors(city, agent);\r\n                if (nearbyBeanKeys.length && BeanMaybeChat(agent)){\r\n                    const targets = nearbyBeanKeys.filter((bKey) => BeanMaybeChat(world.beans.byID[bKey]));\r\n                    if (targets.length < 1)\r\n                        return {};\r\n                    const chat: IChatData = BeanGetRandomChat(agent, world.seed, () => {\r\n                        return targets.map(\r\n                                x => world.beans.byID[x]\r\n                            ).filter(\r\n                                x => x.cash <= agent.cash-1\r\n                            ).reduce(\r\n                                (least: IBean|undefined, bean) => {\r\n                                    if (least == null || (bean.cash < least.cash))\r\n                                        return bean;\r\n                                    return least;\r\n                        }, undefined);\r\n                    });\r\n                    return {\r\n                        newActivity: {\r\n                            act: 'chat',\r\n                            chat: chat,\r\n                            intent: agent.actionData \r\n                        },\r\n                        action: targets.map(t => changeState({beanKey: t, newState: {\r\n                            act: 'chat',\r\n                            chat: {\r\n                                ...chat,\r\n                                participation: 'listener'\r\n                            },\r\n                            intent: world.beans.byID[t].actionData\r\n                        }}))\r\n                    };\r\n                } else if (BeanBelievesIn(agent, 'Wanderlust') && Math.random() < WanderlustEmoteChance) {\r\n                    return {\r\n                        action: beanEmote({beanKey: agent.key, emote: 'happiness', source: 'Wanderlust'})\r\n                    };\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n            // if (agent instanceof Bean){\r\n            //     agent.velocity = {x: 0, y: 0};\r\n            // }\r\n        },\r\n    }, \r\n    'work': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (elapsed > WorkDurationMS && agent.actionData.good){\r\n                return {\r\n                    action: beanWork({beanKey: agent.key}),\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'sleep':{\r\n        enter: (agent: IBean) => {\r\n            if (agent.housing === 'homeless')\r\n                return beanEmote({beanKey: agent.key, emote: 'unhappiness', source: 'Homelessness'});\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world, elapsed) => {\r\n            if (elapsed > SleepDurationMS){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'chat': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, state, elapsed: number) => {\r\n            if (elapsed > ChatDurationMS && agent.actionData.intent){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'travel',\r\n                        intent: agent.actionData.intent\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean, seed: string) => {\r\n            if (agent.actionData.chat){\r\n                if (agent.actionData.chat.participation === 'listener'){\r\n                    switch(agent.actionData.chat.type){\r\n                        case 'bully':\r\n                            return beanEmote({beanKey: agent.key, emote: 'unhappiness', source: 'Antagonism'});\r\n                        case 'praise':\r\n                            return beanEmote({beanKey: agent.key, emote: 'happiness', source: 'Enthusiasm'});\r\n                        case 'preach':\r\n                            if (agent.actionData.chat.preachBelief && \r\n                                agent.actionData.chat.persuasionStrength && \r\n                                BeanMaybePersuaded(agent, seed, agent.actionData.chat.preachBelief, agent.actionData.chat.persuasionStrength)){\r\n                                return beanBePersuaded({beanKey: agent.key, belief: agent.actionData.chat.preachBelief})\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        },\r\n    }, \r\n    'soapbox': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean) => {\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'craze': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean) => {\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'idle': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (elapsed < 200)\r\n                return {};\r\n            \r\n            const priorities = agent.priorities.slice(0);\r\n            let top: IPrioritizedActivityData|undefined = priorities[0];\r\n            let travelState: IActivityData|undefined = undefined;\r\n            let sideEffect: AnyAction|undefined = undefined;\r\n\r\n            //loop through possible destinations\r\n            while (top && travelState == null){\r\n                const substitute = SubstituteIntent(agent, world, top);\r\n                if (substitute?.intent){\r\n                    travelState = CreateTravelFromIntent(agent, world.cities.byID[agent.cityKey], substitute.intent, world);\r\n                    if (travelState != null)\r\n                        return {\r\n                            newActivity: travelState,\r\n                            action: sideEffect\r\n                        };\r\n                } else if (substitute?.sideEffect){\r\n                    sideEffect = substitute.sideEffect;\r\n                }\r\n                top = priorities.shift();\r\n            }\r\n            return {\r\n                action: sideEffect\r\n            };\r\n        },\r\n        exit: (agent: IBean) => {\r\n            if (BeanMaybeParanoid(agent))\r\n                return beanEmote({beanKey: agent.key, emote: 'unhappiness', source:'Paranoia'});\r\n        },\r\n    }, \r\n    'buy': {\r\n        // static MaximumBuyDuration = 1100;\r\n        // private sinceLastAttemptMS: number = 0;\r\n        // tryBuy(agent: IAgent){\r\n        //     if (agent instanceof Bean && agent.actionData.good && agent.city?.economy)\r\n        //     {\r\n        //         this._bought = agent.buy[agent.actionData.good](agent.city.economy);\r\n        //     }\r\n        //     this.sinceLastAttemptMS = 0;\r\n        // }\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            if (agent.actionData.buyReceipt){\r\n                if (elapsed > 750)\r\n                    return {\r\n                        newActivity: {\r\n                            act: 'idle'\r\n                        }\r\n                    }\r\n            } else {\r\n                if (elapsed > TransactMaximumDurationMS){\r\n                    return {\r\n                        newActivity: {act:'idle'}\r\n                    }\r\n                }\r\n                if ((agent.actionData.buyAttempts || 0) >= 3){\r\n                    return {\r\n                        newActivity: {act:'idle'}\r\n                    }\r\n                }\r\n                if (elapsed > 100 && agent.actionData.good){\r\n                    return {\r\n                        action: beanBuy({beanKey: agent.key, good: agent.actionData.good})\r\n                    };\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'crime': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed) => {\r\n            if (elapsed > CrimeDurationMS){\r\n                return {\r\n                    newActivity: {act: 'idle'},\r\n                    action: beanCrime({beanKey: agent.key, good: agent.actionData.crimeGood || 'food'})\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n    }, \r\n    'relax': {\r\n        enter: (agent: IBean) => {\r\n            return undefined;\r\n        },\r\n        act: (agent: IBean, world: IWorldState, elapsed: number) => {\r\n            let durationMS = RelaxationDurationMS;\r\n            if (BeanBelievesIn(agent, 'Naturalism'))\r\n                durationMS *= 3;\r\n            if (elapsed > durationMS){\r\n                return {\r\n                    newActivity: {\r\n                        act: 'idle'\r\n                    }\r\n                }\r\n            }\r\n            return {};\r\n        },\r\n        exit: (agent: IBean) => {\r\n            return beanRelax({beanKey: agent.key});\r\n        },\r\n    }\r\n}\r\n\r\nfunction SubstituteIntent(bean: IBean, world: IWorldState, intent: IActivityData): {\r\n    intent?: IActivityData,\r\n    sideEffect?: AnyAction\r\n}|undefined{\r\n    if (intent.act === 'buy' && intent.good != null){\r\n        const desiredGoodState = EconomyCanBuy(world.economy, world.law, bean, intent.good);\r\n        if (desiredGoodState != 'yes' && intent.good === 'fun'){ //if you can't buy happiness, go somewhere to relax{\r\n            return {\r\n                intent: {\r\n                    act: 'relax'\r\n                }\r\n            }\r\n        } else if (desiredGoodState === 'pricedout') {\r\n            if ((intent.good == 'food' || intent.good == 'medicine') && BeanMaybeCrime(bean, intent.good)){\r\n                return {\r\n                    intent: {\r\n                        act: 'crime',\r\n                        crimeGood: intent.good\r\n                    }\r\n                }\r\n            } else {\r\n                const isPhysical = intent.good === 'food' || intent.good === 'medicine';\r\n                if (isPhysical){\r\n                    return {\r\n                        sideEffect: beanEmote({beanKey: bean.key, emote: 'unhappiness', source: GoodIcon[intent.good] + ' Poverty'})\r\n                    }\r\n                }\r\n                return undefined; //don't travel to buy something that you can't afford\r\n            }\r\n        } else if (desiredGoodState === 'nosupply'){\r\n            if (intent.good && BeanMaybeScarcity(bean, intent.good)){\r\n                return {\r\n                    sideEffect: beanEmote({beanKey: bean.key, emote: 'unhappiness', source:'Scarcity'}) \r\n                }\r\n            }\r\n            return undefined; //don't travel to buy something that doesn't exist\r\n        }\r\n        return {\r\n            intent: {\r\n                ...intent,\r\n                buyAttempts: 0\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        intent: intent\r\n    };\r\n}\r\n\r\nexport function IntentToDestination(agent: IBean, city: ICity, intent: IActivityData, world: IWorldState): Point[]|null{\r\n    switch(intent.act){\r\n        case 'buy':\r\n            if (intent.good)\r\n                return RouteRandomBuildingOfType(city, world, agent, GoodToBuilding[intent.good]);\r\n        case 'sleep': {\r\n            if (agent.dwellingKey !== undefined){\r\n                const dwelling = world.dwellings.byID[agent.dwellingKey];\r\n                const building = world.buildings.byID[dwelling.buildingKey];\r\n                const lot = world.lots.byID[building.lotKey];\r\n                const district = world.districts.byID[lot.districtKey];\r\n                return RouteToHexAndPoint(world.seed, city, agent, {q: district.q, r: district.r}, lot.point);\r\n            } else {\r\n                return RouteRandomHomelessSleepingBuilding(city, world, agent);\r\n            }\r\n        }\r\n        case 'work':\r\n            return RouteRandomBuildingOfType(city, world, agent, JobToBuilding[agent.job]);\r\n        case 'relax': {\r\n            const buildingDest = CityGetRandomEntertainmentBuilding(city, world);\r\n            if (buildingDest){\r\n                return Route(world.seed, city, agent, buildingDest);\r\n            } else {\r\n                const nature = world.districts.allIDs.map(x => world.districts.byID[x]).find(y => y.kind === 'nature');\r\n                if (nature){\r\n                    return RouteToHexAndPoint(world.seed, city, agent, {q: nature.q,r: nature.r}, {\r\n                        x: nature.point.x + (Math.random() * 150) - 75,\r\n                        y: nature.point.y + (Math.random() * 150) - 75\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return [];\r\n}\r\n\r\nfunction CreateTravelFromIntent(agent: IBean, city: ICity, intent: IActivityData, world: IWorldState): IActivityData|undefined{\r\n    const destination = IntentToDestination(agent, city, intent, world);\r\n    \r\n    if (destination)\r\n        return {\r\n            act: 'travel',\r\n            destinations: destination,\r\n            destinationIndex: 0,\r\n            intent: intent\r\n        }\r\n    else\r\n        return undefined;\r\n}\r\n\r\nconst WanderlustEmoteChance = 0.002;\r\n\r\n/**\r\n * returns a priority. Higher is more important\r\n */\r\nexport const GetPriority = {\r\n    work: function(bean: IBean, seed: string, city: ICity): number{\r\n        const deviation = BeanBelievesIn(bean, 'Delirium') ? StatsNormalDev*2 : StatsNormalDev;\r\n        if (bean.job == 'jobless' || BeanBelievesIn(bean, 'Catatonia')){\r\n            return 0;\r\n        }\r\n        else if (bean.cash === 0){\r\n            return SampleNormalDistribution(seed, StatsNormalMean + (StatsNormalDev * 2), deviation);\r\n        }\r\n        else if (city){\r\n            return SampleNormalDistribution(seed, StatsNormalMean + \r\n                (StatsNormalDev * Math.min(1, city.costOfLiving / bean.cash), deviation)\r\n            );\r\n        }\r\n        return SampleNormalDistribution(seed, StatsNormalMean, deviation);\r\n    },\r\n    food: function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        const deviation = BeanBelievesIn(bean, 'Delirium') ? StatsNormalDev*2 : StatsNormalDev;\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * 6 * Math.min(1, difficulty.bean_life.vital_thresh.food.warning / bean.discrete_food),\r\n            deviation\r\n        ));\r\n    },\r\n    stamina: function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        const deviation = BeanBelievesIn(bean, 'Delirium') ? StatsNormalDev*2 : StatsNormalDev;\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * 4 * Math.min(1, difficulty.bean_life.vital_thresh.shelter.warning / bean.discrete_stamina),\r\n            deviation\r\n        ));\r\n    },\r\n    medicine:function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        const deviation = BeanBelievesIn(bean, 'Delirium') ? StatsNormalDev*2 : StatsNormalDev;\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * 2 * Math.min(1, difficulty.bean_life.vital_thresh.medicine.warning / bean.discrete_health),\r\n            deviation\r\n        ));\r\n    },\r\n    fun:function(bean: IBean, seed: string, difficulty: IDifficulty): number{\r\n        const deviation = BeanBelievesIn(bean, 'Delirium') ? StatsNormalDev*2 : StatsNormalDev;\r\n        return SampleNormalDistribution(seed, StatsNormalMean + (\r\n            StatsNormalDev * Math.min(1, -bean.lastHappiness / 100),\r\n            deviation\r\n        ));\r\n    }\r\n}\r\n\r\nexport function GetPriorities(bean: IBean, seed: string, city: ICity, difficulty: IDifficulty): IPrioritizedActivityData[]{\r\n    const priors: IPrioritizedActivityData[] = [\r\n        {act: 'work', good: JobToGood(bean.job), priority: GetPriority.work(bean, seed, city)} as IPrioritizedActivityData,\r\n        {act: 'sleep', priority: GetPriority.stamina(bean, seed, difficulty)} as IPrioritizedActivityData,\r\n        {act: 'buy', good: 'food', priority: GetPriority.food(bean, seed, difficulty)} as IPrioritizedActivityData,\r\n        {act: 'buy', good: 'medicine', priority: GetPriority.medicine(bean, seed, difficulty)} as IPrioritizedActivityData,\r\n        {act: 'buy', good: 'fun', priority: GetPriority.fun(bean, seed, difficulty)} as IPrioritizedActivityData,\r\n    ];\r\n    priors.sort((a, b) => b.priority - a.priority);\r\n    return priors;\r\n}\r\n\r\nexport function ActivityIcon(data: IActivityData): string{\r\n    switch(data.act){\r\n        case 'sleep':\r\n            return '😴';\r\n        case 'work':\r\n            if (data.good)\r\n                return '💪 '+ GoodIcon[data.good];\r\n            else\r\n                return '💪';\r\n        case 'buy':\r\n            if (data.good)\r\n                return '💸 '+ GoodIcon[data.good];\r\n            else\r\n                return '💸';\r\n    }\r\n    return '';\r\n}\r\nexport function ActivityDisplay(data: IActivityData): string{    \r\n    switch(data.act){\r\n        case 'chat':\r\n            return `chatting`;\r\n        case 'crime':\r\n            return `stealing ${data?.crimeGood}`;\r\n        case 'sleep':\r\n            return `sleeping 😴`;\r\n        case 'relax':\r\n            return `relaxing`;\r\n        case 'travel':\r\n            return `travelling to ` + data.intent?.act || '';\r\n        case 'work':\r\n            if (data.good)\r\n                return 'working to make '+ GoodIcon[data.good];\r\n            else\r\n                return 'working';\r\n        case 'buy':\r\n            if (data.good)\r\n                return 'buying '+ GoodIcon[data.good];\r\n            else\r\n                return 'buying';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * a bean is a citizen with preferences\r\n */\r\nexport interface IBean extends ISeller, IBeanAgent{    \r\n    key: number;\r\n    cityKey: number;\r\n    name: string;\r\n    community: TraitCommunity;\r\n    ideals: TraitIdeals;\r\n    ethnicity: TraitEthno;\r\n    faith: TraitFaith;\r\n    stamina: TraitStamina;\r\n    health: TraitHealth;\r\n    food: TraitFood;\r\n    discrete_food: number;\r\n    discrete_health: number;\r\n    discrete_sanity: number;\r\n    discrete_stamina: number;\r\n    discrete_fun: number;\r\n    housing: TraitHousing;\r\n    graceTicks: number;\r\n    cash: number;\r\n    dob: IDate;\r\n    sanity: TraitSanity;\r\n    beliefs: TraitBelief[];\r\n    lifecycle: 'alive'|'dead'|'abducted',\r\n    hedonHistory: HedonSourceToVal[],\r\n    job: TraitJob,\r\n    happiness: HedonReport,\r\n    lastHappiness: number,\r\n    hedonFiveDayRecord: HedonExtremes,\r\n    fairGoodPrice: number,\r\n    employerEnterpriseKey?: number,\r\n    dwellingKey?: number,\r\n    activity_duration: {[act in Act]: number},\r\n    bornInPetri: boolean,\r\n    ticksSinceLastRelax: number,\r\n    lastChatMS: number,\r\n    lastPoint?: Point,\r\n    titleKey?: number,\r\n    badge?: string,\r\n    hat?: string\r\n}\r\n\r\n/**\r\n * fills out \"markers\" and \"destinationKey\" with random building of type\r\n * @param city \r\n * @param bean \r\n * @param buildingType \r\n */\r\nexport function RouteRandomBuildingOfType(city: ICity, world: IWorldState, bean: IBean, buildingType: BuildingTypes): Point[]|null{\r\n    const destination: IBuilding|undefined = CityGetRandomBuildingOfType(city, world, buildingType);\r\n    if (destination === undefined) \r\n        return null;\r\n    return Route(world.seed, city, bean, destination);\r\n}\r\nexport function RouteRandomHomelessSleepingBuilding(city: ICity, world: IWorldState, bean: IBean): Point[]|null{\r\n    const destination: IBuilding|undefined = CityGetRandomHomelessSleepingBuilding(city, world);\r\n    if (destination === undefined) \r\n        return null;\r\n    return Route(world.seed, city, bean, destination);\r\n}\r\n\r\n/**\r\n * fills out \"markers\" property with points to walk to destination\r\n * @param city \r\n * @param bean \r\n * @param buildingType \r\n */\r\nexport function Route(seed: string, city: ICity, bean: IBean, destination: IBuilding): Point[]{\r\n    return RouteToHexAndPoint(seed, city, bean, destination.hex, destination.point);\r\n}\r\nexport function RouteToHexAndPoint(seed: string, city: ICity, bean: IBean, hex: HexPoint, point: Point): Point[]{\r\n    const start = MoverStoreInstance.Get('bean', bean.key).current || {...OriginAccelerator};\r\n    const nearestHex = pixel_to_hex(city.hex_size, city.petriOrigin, start.point);\r\n    return hex_linedraw(nearestHex, hex).map(\r\n        (h) => hex_to_pixel(city.hex_size, city.petriOrigin, h)\r\n        ).map((x, i, a) => {\r\n        if (i === a.length-1){\r\n            return {\r\n                x: point.x + GetRandomNumber(seed, -20, 20),\r\n                y: point.y + GetRandomNumber(seed, -20, 20)\r\n            }\r\n        } else {\r\n            return x;\r\n        }\r\n    });\r\n}","\r\nexport type AgentDurationType = 'bean'|'ufo';\r\nexport interface IAgentDuration {elapsed: number, duration: number};\r\ntype AgentDurationCache = {\r\n    [key in AgentDurationType]: {\r\n        [k2: number]: {elapsed: number, duration: number};\r\n    };\r\n};\r\n\r\nexport class AgentDurationStore{\r\n    private cache: AgentDurationCache = {\r\n        'bean': {},\r\n        'ufo': {}\r\n    }\r\n    public Get(type: AgentDurationType, key: number): IAgentDuration{\r\n        if (!this.cache[type][key])\r\n            this.cache[type][key] = {elapsed: 0, duration: 0};\r\n        return this.cache[type][key];\r\n    }\r\n}","import { AgentDurationStore } from \"./AgentDuration\";\r\n\r\nexport const AgentDurationStoreInstance = new AgentDurationStore();","import { IWorldState } from \"../state/features/world\";\r\nimport { TraitJob } from \"../World\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport { IBean } from \"./Agent\";\r\nimport { BuildingUnsetJob } from \"./City\";\r\nimport { BeanDistrictIdeologyBonus } from \"./Economy\";\r\nimport { BuildingToJob, JobToBuilding } from \"./Geography\";\r\nimport { IEnterprise } from \"./Institutions\";\r\nimport { BuildingJobSlot } from \"./Occupation\";\r\nimport { BuildingNumOfOpenJobs, IBuilding } from \"./RealEstate\";\r\nimport { shuffle } from \"./Utils\";\r\n\r\nexport function BeanTryFindJob(world: IWorldState, bean: IBean, previousEmployerKey: number|null = null): boolean{\r\n    const city = world.cities.byID[bean.cityKey];\r\n    const employableBuildingKeys = city.buildingKeys.filter(x => BuildingNumOfOpenJobs(world.buildings.byID[x]) > 0);\r\n    if (employableBuildingKeys.length < 1)\r\n        return false;\r\n    const employableBuildings = employableBuildingKeys.map(x => world.buildings.byID[x]);\r\n    const jobs = employableBuildings.map(x => {\r\n        return {\r\n            ideologyBonus: BeanDistrictIdeologyBonus(bean, world.districts.byID[world.lots.byID[x.lotKey].districtKey].kind),\r\n            isEmpty: x.employeeBeanKeys.length === 0,\r\n            openJobs: BuildingNumOfOpenJobs(x),\r\n            building: x\r\n        }\r\n    });\r\n    jobs.sort((a, b) => {\r\n        if (a.isEmpty != b.isEmpty)\r\n            return a.isEmpty ? -1 : 1;\r\n        else if (a.ideologyBonus != b.ideologyBonus)\r\n            return a.ideologyBonus - b.ideologyBonus;\r\n        return a.openJobs - b.openJobs;\r\n    });\r\n    \r\n    if (jobs.length > 0){\r\n        const {building} = jobs[0];\r\n        if (bean.employerEnterpriseKey != null){\r\n            BuildingUnsetJob(world.buildings.byID[bean.employerEnterpriseKey], bean);\r\n        }\r\n        BeanSetJob(bean, building, world.enterprises.byID[building.key]);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function BeanSetJob(bean: IBean, building: IBuilding, enterprise: IEnterprise){\r\n    building.employeeBeanKeys.push(bean.key);\r\n    bean.employerEnterpriseKey = building.key;\r\n    if (enterprise && enterprise.ownerBeanKey == null){\r\n        enterprise.ownerBeanKey = bean.key;\r\n    }\r\n    bean.job = BuildingToJob[building.type];\r\n}","export type SFXFile = 'drop.mp3'|'ding_soft.mp3'|'ding_bad.wav'|'death_bell.wav'|'digital_beeping.mp3'|'squish_pop.mp3'|'squish_suck.mp3'|'baby_squeak.wav'|'mhmm.mp3'|'cow-moo.wav'|'pill-shake.wav'|'door-open.wav'|'teleport.wav'|'cash_ding.mp3'|'crazy_laugh.mp3';\r\nexport type SFX = 'drop'|'happiness'|'unhappiness'|'love'|'hate'|'death'|'scan'|'wash_in'|'wash_out'|'squeak'|'mhmm'|'moo'|'door'|'pills'|'teleport'|'cash'|'crazy_laugh';\r\n\r\nconst SFXToFile: {[sfx in SFX]: SFXFile} = {\r\n    drop: \"drop.mp3\",\r\n    love: \"ding_soft.mp3\",\r\n    happiness: \"ding_soft.mp3\",\r\n    unhappiness: \"ding_bad.wav\",\r\n    hate: \"ding_bad.wav\",\r\n    death: \"death_bell.wav\",\r\n    scan: 'digital_beeping.mp3',\r\n    wash_in: 'squish_pop.mp3',\r\n    wash_out: 'squish_suck.mp3',\r\n    squeak: 'baby_squeak.wav',\r\n    mhmm: 'mhmm.mp3',\r\n    pills: 'pill-shake.wav',\r\n    moo: 'cow-moo.wav',\r\n    door: 'door-open.wav',\r\n    teleport: 'teleport.wav',\r\n    cash: 'cash_ding.mp3',\r\n    crazy_laugh: 'crazy_laugh.mp3'\r\n};\r\n\r\ntype SFXMap = {[sfx in SFX]: SoundBuffer};\r\n\r\nclass SoundBuffer{\r\n    constructor(private file: SFXFile, private volume: number = 1){}\r\n\r\n    private buffer: HTMLAudioElement[] = [];\r\n    play(){\r\n        if (this.buffer.length > 0 && this.buffer[0].ended){\r\n            const audio = this.buffer.shift();\r\n            audio?.play();\r\n            if (audio)\r\n                this.buffer.push(audio);\r\n        } else {\r\n            const aud = new Audio(process.env.PUBLIC_URL+'/'+this.file);\r\n            aud.volume = this.volume;\r\n            aud.play();\r\n            this.buffer.push(aud);\r\n        }\r\n    }\r\n}\r\nexport class WorldSound{\r\n    private lib: SFXMap = {\r\n        'drop': new SoundBuffer(SFXToFile['drop'], 0.2),\r\n        'love': new SoundBuffer(SFXToFile['happiness']),\r\n        'happiness': new SoundBuffer(SFXToFile['happiness']),\r\n        'unhappiness': new SoundBuffer(SFXToFile['unhappiness']),\r\n        'hate': new SoundBuffer(SFXToFile['unhappiness']),\r\n        'death': new SoundBuffer(SFXToFile['death']),\r\n        'scan': new SoundBuffer(SFXToFile['scan'], 0.3),\r\n        'wash_in': new SoundBuffer(SFXToFile['wash_in']),\r\n        'wash_out': new SoundBuffer(SFXToFile['wash_out']),\r\n        'squeak': new SoundBuffer(SFXToFile['squeak'], 0.3),\r\n        'mhmm': new SoundBuffer(SFXToFile['mhmm'], 0.5),\r\n        'moo': new SoundBuffer(SFXToFile['moo'], 1),\r\n        'pills': new SoundBuffer(SFXToFile['pills'], 1),\r\n        'door': new SoundBuffer(SFXToFile['door'], 1),\r\n        'teleport': new SoundBuffer(SFXToFile['teleport'], 0.6),\r\n        'cash': new SoundBuffer(SFXToFile['cash'], 0.23),\r\n        'crazy_laugh': new SoundBuffer(SFXToFile['crazy_laugh'], 0.5),\r\n    }\r\n\r\n    public play(sfx: SFX){\r\n        this.lib[sfx].play();\r\n    }\r\n}\r\n\r\nexport const WorldSfxInstance = new WorldSound();","import { IWorldState } from \"../state/features/world\";\r\n\r\nexport enum Season {Spring, Summer, Fall, Winter}\r\nexport const TicksPerHour = 2;\r\nexport const TicksPerDay = TicksPerHour * 4;\r\nexport enum PartOfDay {Midnight = 0, Morning = TicksPerHour, Noon = TicksPerHour*2, Evening = TicksPerHour*3}\r\n\r\nexport interface IDate{\r\n    day: number;\r\n    season: Season;\r\n    year: number;\r\n    /**\r\n     * analogous to ticks\r\n     * \r\n     * zero based, ranges from 0 to `HoursPerDay -1`\r\n     */\r\n    hour: number;\r\n}\r\n\r\nexport function Now(world: IWorldState): IDate{\r\n    return {year: world.date.year, season: world.date.season, day: world.date.day, hour: world.date.hour};\r\n}\r\n\r\nexport function withinLastYear(current: IDate, last: IDate): boolean{\r\n    return last.year > -1 && (\r\n        last.year == current.year || (\r\n            last.year == current.year - 1 &&\r\n            last.season > current.season\r\n        )\r\n    )\r\n}","import { PlayerResources } from \"../Game\";\r\nimport { GetRandom, GetRandomNumber } from \"../WorldGen\";\r\nimport { BeliefCommonality, RandomBeliefBucket, SecondaryBeliefData, TraitBelief } from \"./Beliefs\";\r\n\r\nexport interface MarketTraitListing {\r\n    cost: PlayerResources;\r\n    trait: TraitBelief;\r\n}\r\nexport const CommonalityBaseCost: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 5,\r\n    'rare': 7,\r\n    'unique': 99,\r\n};\r\nexport const CommonalityRandomMaxCost: {[b in BeliefCommonality]: number} = {\r\n    'common': 3,\r\n    'uncommon': 5,\r\n    'rare': 7,\r\n    'unique': 99,\r\n};\r\n\r\nexport function GetMarketTraits(seed: string): MarketTraitListing[]{\r\n    const newTraits: MarketTraitListing[] = [];\r\n    for (let i = 0; i < 3; i++) {\r\n        const b = GetRandom(seed, RandomBeliefBucket);\r\n        newTraits.push(getMarketTraitListing(seed, b));\r\n    }\r\n    return newTraits;\r\n}\r\n\r\nfunction getMarketTraitListing(seed: string, b: TraitBelief): MarketTraitListing{\r\n    const rare = SecondaryBeliefData[b].rarity;\r\n    return {\r\n        trait: b,\r\n        cost: {\r\n            hedons: CommonalityBaseCost[rare] + GetRandomNumber(seed, 0, CommonalityRandomMaxCost[rare])\r\n        }\r\n    }\r\n}","import { AnyAction } from \"redux\";\r\nimport { EventBufferLength, IEvent } from \"../events/Events\";\r\nimport { MoverStoreInstance } from \"../MoverStoreSingleton\";\r\nimport { SignalStoreInstance } from \"../SignalStore\";\r\nimport { EntityAddToSlice } from \"../state/entity.state\";\r\nimport { IWorldState } from \"../state/features/world\";\r\nimport { changeState, pickUpPickup, remove_ufo, selectBeansByCity } from \"../state/features/world.reducer\";\r\nimport { MaxHedonHistory, PickupPhysics, WorldInflate } from \"../World\";\r\nimport { GenerateBean } from \"../WorldGen\";\r\nimport { WorldSfxInstance } from \"../WorldSound\";\r\nimport { BeanActions, IBean } from \"./Agent\";\r\nimport { AgentDurationStoreInstance } from \"./AgentDurationInstance\";\r\nimport { BeanAge, BeanMaybeBaby, BeanCalculateBeliefs, BeanEmote } from \"./Bean\";\r\nimport { BeanTryFindJob } from \"./BeanAndCity\";\r\nimport { GetHedonReport } from \"./Beliefs\";\r\nimport { BeanLoseJob, CalculateCityComputed } from \"./City\";\r\nimport { GetCostOfLiving } from \"./Economy\";\r\nimport { accelerate_towards, accelerator_coast, OriginAccelerator } from \"./Geography\";\r\nimport { IsLaw, MaybeRebate, PollTaxWeeklyAmount } from \"./Government\";\r\nimport { GetMarketTraits } from \"./MarketTraits\";\r\nimport { GenerateEmoteFromBean } from \"./Pickup\";\r\nimport { CheckGoals, CheckReportCard, HasResearched, TechData } from \"./Player\";\r\nimport { TicksPerDay } from \"./Time\";\r\n\r\nconst OwnerProfitPercentage = 0.15;\r\n\r\nexport function simulate_world(world: IWorldState){\r\n    world.date.hour++\r\n    if (world.date.hour % 2 === 0){\r\n        simulate_every_other_tick(world);\r\n    }\r\n    if (world.date.hour >= TicksPerDay){\r\n        world.date.hour = 0;\r\n        world.date.day++;\r\n        simulate_every_day(world);\r\n        if (world.date.day % 7 === 0){\r\n            simulate_every_week(world);\r\n        }\r\n    }\r\n    if (world.date.day > 30){\r\n        world.date.day = 1;\r\n        simulate_every_month(world)\r\n        world.date.season++;\r\n    }\r\n    if (world.date.season > 3){\r\n        world.date.year++;\r\n        simulate_every_year(world);\r\n        world.date.season = 0;\r\n    }\r\n\r\n    world.alien.bots.amount += world.alien.bots.income;\r\n    world.alien.energy.amount += world.alien.energy.income;\r\n    if (HasResearched(world.alien.techProgress, 'fast_resources')){\r\n        world.alien.bots.amount += world.alien.bots.income*0.5;\r\n        world.alien.energy.amount += world.alien.energy.income*0.5;\r\n    }\r\n    if (world.alien.currentlyResearchingTech){\r\n        const tech = world.alien.currentlyResearchingTech;\r\n        if(world.alien.techProgress[tech] == null){\r\n            world.alien.techProgress[tech] = {\r\n                researchPoints: 0\r\n            }\r\n        }\r\n        const max = TechData[tech].techPoints;\r\n        const current = world.alien.techProgress[tech].researchPoints;\r\n        if (current < max)\r\n            world.alien.techProgress[tech].researchPoints += world.alien.abductedBeanKeys.length *  1/TicksPerDay;\r\n        if (current >= max){\r\n            if (world.alien.currentlyResearchingTech === 'neural_duplicator')\r\n                world.alien.beliefInventory.forEach((x) => x.gems += 1);\r\n            world.alien.currentlyResearchingTech = undefined;\r\n\r\n        }\r\n    }\r\n\r\n    const CoL = GetCostOfLiving(world.economy);\r\n    world.beans.allIDs.forEach((bKey: number, i: number) => {\r\n        const b = world.beans.byID[bKey];\r\n        if (b.lifecycle != 'alive')\r\n            return;\r\n        \r\n        const ageResult = BeanAge(b, world.seed, world.alien.difficulty);\r\n        if (ageResult?.emotes){\r\n            ageResult.emotes.map(x => EntityAddToSlice(world.pickups, x));\r\n        }\r\n        if (ageResult?.death){\r\n            EntityAddToSlice(world.events, ageResult.death);\r\n            BeanLoseJob(b, world);\r\n            WorldSfxInstance.play('death');\r\n        }\r\n        // todo: on bean death\r\n        const e = BeanMaybeBaby(b, world.seed, CoL);\r\n        if (e) {\r\n            const newBean = GenerateBean(world, world.cities.byID[b.cityKey], b);\r\n            if (b.lastPoint){\r\n                newBean.lastPoint = b.lastPoint;\r\n                MoverStoreInstance.Get('bean', newBean.key).publish({point: {x: b.lastPoint.x, y: b.lastPoint.y}, velocity: {x: 0, y: 0}});\r\n            }\r\n            world.beans.byID[newBean.key] = newBean;\r\n            world.beans.allIDs.push(newBean.key);\r\n            world.cities.byID[b.cityKey].beanKeys.push(newBean.key);\r\n            WorldAddEvent(world, e);\r\n            WorldSfxInstance.play('squeak');\r\n        }\r\n        if (b.job === 'jobless'){\r\n            const gotJob = BeanTryFindJob(world, b);\r\n            if (!gotJob){\r\n                WorldAddEvent(world, {icon: '🏚️', trigger: 'nojobslots', message: `A subject cannot find a job; build or upgrade more buildings.`, key: 0});\r\n            }\r\n        }\r\n        if (b.dwellingKey === undefined){\r\n            const openDwellingKey = world.dwellings.allIDs.find(dKey => world.dwellings.byID[dKey].occupantKey === undefined);\r\n            if (openDwellingKey != null){\r\n                world.dwellings.byID[openDwellingKey].occupantKey = b.key;\r\n                b.dwellingKey = openDwellingKey;\r\n                b.housing = \"housed\";\r\n            }\r\n        }\r\n        \r\n        b.happiness = GetHedonReport(b.hedonHistory);\r\n    });\r\n    world.cities.allIDs.forEach(cityID => {\r\n        const c = world.cities.byID[cityID];\r\n        CalculateCityComputed(c, world.economy);\r\n    });\r\n    world.beans.allIDs.forEach((k: number) => {\r\n        const b = world.beans.byID[k];\r\n        if (!b || b.lifecycle != 'alive')\r\n            return;\r\n        BeanCalculateBeliefs(b, world.economy, world.alien.difficulty, world.law);\r\n    });\r\n    CheckGoals(world, world.alien);\r\n    CheckReportCard(world, world.alien);\r\n    return world;\r\n}\r\nexport function simulate_every_year(world: IWorldState){\r\n    WorldInflate(world);\r\n}\r\nexport function simulate_every_month(world: IWorldState){\r\n    //resetMonthlyDemand\r\n    world.economy.unfulfilledMonthlyDemand = { food: 0, medicine: 0, fun: 0, };\r\n    world.economy.monthlyDemand = { food: 0, medicine: 0, fun: 0, };\r\n    world.economy.monthlySupply = { food: 0, medicine: 0, fun: 0, };\r\n}\r\nexport function simulate_every_week(world: IWorldState){\r\n    world.marketTraitsForSale = GetMarketTraits(world.seed);\r\n    WorldAddEvent(world, {key: 0, message: 'New traits in the Emotion Market!', icon: '🛍️', trigger: 'marketrefresh'});\r\n    if (IsLaw(world.law, 'poll_tax')){\r\n        let collected = 0;\r\n        world.cities.allIDs.forEach((cityID: number) => {\r\n            selectBeansByCity(world, cityID).forEach((y: IBean) => {\r\n                if (y.cash >= PollTaxWeeklyAmount){\r\n                    y.cash -= PollTaxWeeklyAmount;\r\n                    collected += PollTaxWeeklyAmount;\r\n                }\r\n            });\r\n        });\r\n        world.law.cash = (world.law.cash + collected);\r\n    }\r\n    MaybeRebate(world.law, Object.values(world.beans.byID));\r\n}\r\nexport function simulate_every_day(world: IWorldState){\r\n    world.beans.allIDs.forEach((beanKey) => {\r\n        const x = world.beans.byID[beanKey];\r\n        if (x.hedonHistory.length >= MaxHedonHistory) {\r\n            x.hedonHistory.pop();\r\n        }\r\n        x.hedonHistory.unshift({});\r\n    });\r\n}\r\nexport function simulate_every_other_tick(world: IWorldState){\r\n    //pay beans\r\n    world.enterprises.allIDs.forEach((eKey) => {\r\n        const enterprise = world.enterprises.byID[eKey];\r\n        const building = world.buildings.byID[eKey];\r\n        const workers = building.employeeBeanKeys.map(x => world.beans.byID[x]);\r\n        //distribute cash\r\n        switch(enterprise.enterpriseType){\r\n            case 'company':\r\n                if (workers.length < 1) {\r\n                    //noop;\r\n                } else if (workers.length === 1){\r\n                    workers[0].cash += enterprise.cash;\r\n                    if (enterprise.cash > 0)\r\n                        workers[0].ticksSinceLastSale = 0;\r\n                    enterprise.cash = 0;\r\n                }\r\n                else {\r\n                    const share = enterprise.cash / (workers.length + OwnerProfitPercentage);\r\n                    enterprise.cash = 0;\r\n                    let owner = workers.find(x => x.key === enterprise.ownerBeanKey);\r\n                    if (owner == null){\r\n                        owner = workers[0];\r\n                        enterprise.ownerBeanKey = owner.key;\r\n                    }\r\n                    workers.forEach(bean => {\r\n                        const pay = (bean === owner) ? share * (1+OwnerProfitPercentage) : share;\r\n                        bean.cash += pay;\r\n                        if (pay > 0)\r\n                            bean.ticksSinceLastSale = 0;\r\n                    });\r\n                }\r\n                break;\r\n            case 'co-op':\r\n                const share = enterprise.cash / workers.length;\r\n                enterprise.cash = 0;\r\n                workers.forEach(bean => {\r\n                    bean.cash += share;\r\n                    if (share > 0)\r\n                        bean.ticksSinceLastSale = 0;\r\n                });\r\n                break;\r\n            case 'commune':\r\n                const commShare = enterprise.cash / workers.length;\r\n                enterprise.cash = 0;\r\n                workers.forEach(bean => {\r\n                    bean.cash += commShare;\r\n                    if (commShare > 0)\r\n                        bean.ticksSinceLastSale = 0;\r\n                });\r\n                break;\r\n        }\r\n    });\r\n}\r\nexport function WorldAddEvent(world: IWorldState, e: IEvent){\r\n    e.key = world.events.nextID++;\r\n    world.events.byID[e.key] = e;\r\n    world.events.allIDs.push(e.key);\r\n    SignalStoreInstance.events.publish(e);\r\n    while (world.events.allIDs.length > EventBufferLength){\r\n        const removedID = world.events.allIDs[0];\r\n        if (removedID != null) {\r\n            world.events.allIDs = world.events.allIDs.slice(1);\r\n            world.events.byID = {\r\n                removedID,\r\n                ...world.events.byID\r\n            } as any;\r\n        }\r\n    }\r\n}\r\nexport function animate_ufos(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const actions: AnyAction[] = [];\r\n    world.ufos.allIDs.forEach((ufoKey) => {\r\n        const ufo = world.ufos.byID[ufoKey];\r\n        AgentDurationStoreInstance.Get('ufo', ufoKey).elapsed += deltaMS;\r\n\r\n        if (AgentDurationStoreInstance.Get('ufo', ufoKey).elapsed > 4000)\r\n        {\r\n            actions.push(remove_ufo({ufoKey}))\r\n        }\r\n    });\r\n    return actions;\r\n}\r\nexport function animate_beans(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const actions: AnyAction[] = [];\r\n    world.beans.allIDs.forEach((beanKey) => {\r\n        const bean = world.beans.byID[beanKey];\r\n\r\n        if (bean.lifecycle != 'alive')\r\n            return;\r\n        \r\n        const ADS = AgentDurationStoreInstance.Get('bean', bean.key); \r\n        ADS.elapsed += deltaMS;\r\n        const actResult = BeanActions[bean.action].act(bean, world, ADS.elapsed, deltaMS);\r\n        if (Array.isArray(actResult.action)){\r\n            actions.push(...actResult.action);\r\n        } else if (actResult.action){\r\n            actions.push(actResult.action);\r\n        }\r\n        if (actResult.newActivity){\r\n            const exitAction = BeanActions[bean.action].exit(bean, world.seed);\r\n            if (exitAction)\r\n                actions.push(exitAction);\r\n            actions.push(changeState({beanKey: beanKey, newState: actResult.newActivity}));\r\n            const enterAction = BeanActions[actResult.newActivity.act].enter(bean);\r\n            if (enterAction)\r\n                actions.push(enterAction);\r\n        }\r\n        //TODO: fix on chat\r\n        // if (result.data.act === 'chat' && result.data.chat?.participation === 'speaker'){\r\n        //     listener.onChat(agent as Bean, result.data.chat);\r\n        // }\r\n    });\r\n    return actions;\r\n}\r\nexport function animate_pickups(world: IWorldState, deltaMS: number): Array<AnyAction>{\r\n    const pickupIDs = world.pickups.allIDs;\r\n    const city = world.cities.byID[0];\r\n    const actions: AnyAction[] = [];\r\n    //go backwards because we'll modify the array as we go\r\n    for(let i = pickupIDs.length - 1; i >= 0; i--) {\r\n        const pickupID = pickupIDs[i];\r\n        let collide = false;\r\n        const magnet = city.pickupMagnetPoint;\r\n        const newAccelerator = {\r\n            ...(MoverStoreInstance.Get('pickup', pickupID).current || OriginAccelerator)\r\n        };\r\n        if (magnet){\r\n            const collide = accelerate_towards(\r\n                newAccelerator,\r\n                magnet,\r\n                PickupPhysics.AccelerateS * deltaMS/1000, \r\n                PickupPhysics.MaxSpeed, \r\n                PickupPhysics.CollisionDistance,\r\n                PickupPhysics.Brake);\r\n            if (collide){\r\n                actions.push(pickUpPickup({cityKey: city.key, pickupKey: pickupID}));\r\n            }\r\n        } else {\r\n            accelerator_coast(newAccelerator, PickupPhysics.Brake);\r\n        }\r\n        if (!collide)\r\n            MoverStoreInstance.Get('pickup', pickupID).publish(newAccelerator);\r\n    }\r\n    return actions;\r\n}","import { BeliefCommonality } from \"./simulation/Beliefs\";\r\nimport { BuildingTypes } from \"./simulation/Geography\";\r\nimport { RubricKeys } from \"./simulation/Player\";\r\nimport { TicksPerDay } from \"./simulation/Time\";\r\nimport { IThreshold, TraitGood } from \"./World\";\r\n\r\nexport type PlayerEmptyHexAction = 'build';\r\nexport type PlayerHexAction = 'beam'|'upgrade'|'fallow_2_rural'|'rural_2_urban'|'add_loft';\r\nexport type PlayerBeanAction = 'scan'|'abduct'|'vaporize'|'siphon'|'empower'|'gift';\r\nexport type PlayerBeanBrainAction = 'brainwash_ideal'|'brainimplant_secondary'|'brainwash_secondary';\r\nexport type PlayerMarketAction = 'energy'|'bots';\r\nexport type PlayerGovernmentAction = '';\r\nexport type PlayerAction = PlayerHexAction|PlayerBeanAction;\r\n\r\nexport interface PlayerResources{\r\n    energy?: number;\r\n    bots?: number;\r\n    hedons?: number;\r\n    tortrons?: number;\r\n}\r\nexport interface BeanResources{\r\n    sanity?: number;\r\n}\r\nexport type BeanDeathCause = 'vaporization'|'exposure'|'starvation'|'sickness';\r\nexport function triadToString(cost: PlayerResources, sign: '+'|''|'-', qty: number = 1){\r\n    const costs = [];\r\n    if (cost.energy){\r\n        costs.push(sign+(cost.energy*qty)+' Energy');\r\n    }\r\n    if (cost.bots){\r\n        costs.push(sign+(cost.bots*qty)+' Bots');\r\n    }\r\n    if (cost.hedons){\r\n        costs.push(sign+(cost.hedons*qty)+' Hedons');\r\n    }\r\n    if (cost.tortrons){\r\n        costs.push(sign+(cost.tortrons*qty)+' Antihedons');\r\n    }\r\n    return costs.join(' ');\r\n}\r\nexport interface SecondaryResources{\r\n    research?: number;\r\n    leadership?: number;\r\n}\r\nexport interface IDifficulty{\r\n    cost: {\r\n        emptyHex: {[key in PlayerEmptyHexAction]: {\r\n            [key in BuildingTypes]: PlayerResources}\r\n        },\r\n        hex: {[key in PlayerHexAction]: PlayerResources} \r\n        bean: {[key in PlayerBeanAction]: PlayerResources},\r\n        bean_brain: {[key in PlayerBeanBrainAction]: BeanResources}\r\n        market: {\r\n            scrubHedons: PlayerResources,\r\n            resource: {[key in PlayerMarketAction]: PlayerResources},\r\n            beliefs: {[key in BeliefCommonality]: PlayerResources}\r\n        }\r\n    },\r\n    bean_life: {\r\n        vital_thresh: {[key in (TraitGood|'shelter')]: IThreshold},\r\n        degrade_per_tick: {\r\n            food: number,\r\n            health: number,\r\n            stamina: number,\r\n            fun: number\r\n        },\r\n        penalty: {\r\n            homeless_health: number,\r\n            starving_health: number\r\n        },\r\n        death_chance: {\r\n            [cause in BeanDeathCause]: number\r\n        }\r\n    },\r\n    report_card_progression: RubricKeys[]\r\n}\r\nexport const DefaultDifficulty: IDifficulty = {\r\n    cost: {\r\n        emptyHex: {\r\n            build: {\r\n                house: {\r\n                    energy: 1,\r\n                    bots: 3\r\n                },\r\n                farm: {\r\n                    energy: 1,\r\n                    bots: 3\r\n                },\r\n                theater: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                hospital: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                church: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                courthouse: {\r\n                    energy: 999,\r\n                    bots: 999\r\n                },\r\n                park: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                },\r\n                nature: {\r\n                    energy: 1,\r\n                    bots: 4\r\n                }\r\n            }\r\n        },\r\n        hex: {\r\n            beam: {\r\n                energy: 3\r\n            },\r\n            upgrade: {\r\n                energy: 1,\r\n                bots: 4,\r\n            },\r\n            fallow_2_rural: {\r\n                bots: 1,\r\n            },\r\n            rural_2_urban: {\r\n                bots: 2,\r\n            },\r\n            add_loft: {\r\n                bots: 1,\r\n                energy: 1\r\n            }\r\n        },\r\n        bean_brain: {\r\n            brainwash_ideal: { sanity: 4},\r\n            brainimplant_secondary: { sanity: 1},\r\n            brainwash_secondary: {sanity: 2},\r\n        },\r\n        bean: {\r\n            scan: {\r\n                energy: 1\r\n            },\r\n            abduct: {\r\n                bots: 3\r\n            },\r\n            gift: {},\r\n            empower: {},\r\n            vaporize: {\r\n                energy: 2,\r\n                bots: 4\r\n            },\r\n            siphon: {},\r\n        },\r\n        market: {\r\n            scrubHedons: {\r\n                energy: 5\r\n            },\r\n            resource: {\r\n                bots: {\r\n                    hedons: 6\r\n                },\r\n                energy: {\r\n                    hedons: 5\r\n                }\r\n            },\r\n            beliefs: {\r\n                common: {},\r\n                uncommon: {},\r\n                rare: {},\r\n                unique: {}\r\n            },\r\n        }\r\n    },\r\n    bean_life: {\r\n        vital_thresh: {\r\n            'food': {warning: 0.6, sufficient: 1, abundant: 3},\r\n            'shelter': {warning: 2, sufficient: 3, abundant: 7},\r\n            'medicine': {warning: 0.6, sufficient: 1, abundant: 3},\r\n            'fun': {warning: 0.1, sufficient: 1, abundant: 3},\r\n        },\r\n        degrade_per_tick: {\r\n            food: 1/(TicksPerDay*3),\r\n            health: 1/(TicksPerDay*5),\r\n            stamina: 1/TicksPerDay,\r\n            fun: 1/(TicksPerDay*5)\r\n        },\r\n        penalty: {\r\n            homeless_health: 1/(TicksPerDay*7),\r\n            starving_health: 1/(TicksPerDay*7)\r\n        },\r\n        death_chance: {\r\n            starvation: 1/8,\r\n            sickness: 1/8,\r\n            exposure: 1/8,\r\n            vaporization: 1\r\n        }\r\n    },\r\n    report_card_progression: []\r\n};","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { PlayerResources } from '../../Game'\r\nimport { GameStorageInstance } from '../../GameStorage'\r\nimport { MoverStoreInstance } from '../../MoverStoreSingleton'\r\nimport { SignalStoreInstance } from '../../SignalStore'\r\nimport { Act, GetPriorities, IActivityData, IBean } from '../../simulation/Agent'\r\nimport { AgentDurationStoreInstance } from '../../simulation/AgentDurationInstance'\r\nimport { BeanBelievesIn, BeanCalculateSanity, BeanCalculateStamina, BeanCanPurchase, BeanDie, BeanLoseSanity, BeanMaybeGetInsanity, CosmopolitanHappyChance, DiligenceHappyChance, GermophobiaHospitalWorkChance, HedonismExtraChance, HedonismHateWorkChance, LibertarianTaxUnhappyChance, ParochialHappyChance, ProgressivismTaxHappyChance } from '../../simulation/Bean'\r\nimport { BeanTryFindJob } from '../../simulation/BeanAndCity'\r\nimport { BeliefsAll, SecondaryBeliefData, TraitBelief } from '../../simulation/Beliefs'\r\nimport { BeanLoseJob, BuildingUnsetJob } from '../../simulation/City'\r\nimport { EconomyEmployAndPrice, EconomyMostInDemandJob, EconomyProduceAndPrice, EconomyTryTransact, IListing, IMarketReceipt, MarketListingSubtract } from '../../simulation/Economy'\r\nimport { BuildingTypes, HexPoint, hex_to_pixel, OriginAccelerator, Point } from '../../simulation/Geography'\r\nimport { LawData, LawKey } from '../../simulation/Government'\r\nimport { EnterpriseType } from '../../simulation/Institutions'\r\nimport { MarketTraitListing } from '../../simulation/MarketTraits'\r\nimport { IPickup } from '../../simulation/Pickup'\r\nimport { HasResearched, PlayerCanAfford, PlayerPurchase, PlayerTryPurchase, PlayerUseTraitGem, Tech } from '../../simulation/Player'\r\nimport { BuildingTryFreeBean, GenerateIBuilding, IBuilding, IDwelling } from '../../simulation/RealEstate'\r\nimport { GetSeedName } from '../../simulation/SeedGen'\r\nimport { ITitle } from '../../simulation/Titles'\r\nimport { IUFO } from '../../simulation/Ufo'\r\nimport { MathClamp } from '../../simulation/Utils'\r\nimport { simulate_world, WorldAddEvent } from '../../simulation/WorldSim'\r\nimport { EmotionSanity, EmotionWorth, GoodToThreshold, JobToGood, TraitEmote, TraitFaith, TraitGood } from '../../World'\r\nimport { DistrictAddLots, GenerateBean, GenerateDistrictsAndLots, GetRandom, GetRandomCityName, GetRandomFloat, GetRandomNumber } from '../../WorldGen'\r\nimport { WorldSfxInstance } from '../../WorldSound'\r\nimport { EntityAddToSlice } from '../entity.state'\r\nimport { GetBlankWorldState, IWorldState } from './world'\r\n\r\nconst ChargePerMarket = 3;\r\nconst ChargePerExtract = 1;\r\n\r\nconst UnderemploymentThresholdTicks = 8\r\nexport const worldSlice = createSlice({\r\n    name: 'world',\r\n    initialState: GetBlankWorldState(),\r\n    reducers: {\r\n      refreshMarket: state => {\r\n          \r\n      },\r\n      magnetChange: (state, action: PayloadAction<{cityKey: number, px?: Point}>) => {\r\n        state.cities.byID[action.payload.cityKey].pickupMagnetPoint = action.payload.px;\r\n      },\r\n      worldTick: state => {\r\n        simulate_world(state);\r\n      },\r\n      newGame: (state, action: PayloadAction<{seed: string}>) => {\r\n        const city = state.cities.byID[0];\r\n        state.seed = action.payload.seed;\r\n        city.name = GetRandomCityName(state.seed);\r\n        const dls = GenerateDistrictsAndLots(city);\r\n        state.districts = dls.ds;\r\n        state.lots = dls.lots;\r\n        const natureID = GetRandom(state.seed, state.districts.allIDs.slice(1));\r\n        state.districts.byID[natureID].kind = 'nature';\r\n        // GenerateIBuilding(state, city, 'courthouse', {q: 0, r: 0}, state.economy);\r\n        // GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(state.seed, 15, 20)], state.economy);\r\n        // GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(state.seed, 21, 25)], state.economy);\r\n        // GenerateIBuilding(state, city, 'nature', city.hexes[GetRandomNumber(state.seed, 26, 60)], state.economy);\r\n      },\r\n      loadGame: (state, action:PayloadAction<{newState: IWorldState}>) => {\r\n        action.payload.newState.beans.allIDs.map(k => {\r\n          const bean = action.payload.newState.beans.byID[k];\r\n          if (bean){\r\n            MoverStoreInstance.Get('bean', k).publish({\r\n              point: {\r\n                x: bean.lastPoint?.x || 0,\r\n                y: bean.lastPoint?.y || 0\r\n              }, velocity: {x: 0, y: 0}\r\n            })\r\n          }\r\n        })\r\n        return action.payload.newState\r\n      },\r\n      build: (state, action: PayloadAction<{city: number, lot: number, what: BuildingTypes}>) => {\r\n        const cost: PlayerResources = state.alien.difficulty.cost.emptyHex.build[action.payload.what];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          const lot = state.lots.byID[action.payload.lot];\r\n          const district = state.districts.byID[lot.districtKey];\r\n          GenerateIBuilding(state, state.cities.byID[action.payload.city], action.payload.what, district, lot.point, lot.key, state.economy);\r\n          switch(action.payload.what){\r\n            case 'farm':\r\n              WorldSfxInstance.play('moo');\r\n              break;\r\n            case 'hospital':\r\n              WorldSfxInstance.play('pills');\r\n              break;\r\n            case 'house':\r\n              WorldSfxInstance.play('door');\r\n              break;\r\n          }\r\n        }\r\n      },\r\n      upgradeDistrict: (state, action: PayloadAction<{city: number, district: number}>) => {\r\n        const district = state.districts.byID[action.payload.district];\r\n        if (!district)\r\n          return;\r\n        const newKind = district.kind === 'rural' ? 'urban' : 'rural';\r\n        if (newKind === 'rural'){\r\n          const cost: PlayerResources = state.alien.difficulty.cost.hex.fallow_2_rural;\r\n          if (PlayerTryPurchase(state.alien, cost)) {\r\n            DistrictAddLots(district, state.lots, 'rural');\r\n            district.kind = 'rural';\r\n            // WorldSfxInstance.play('moo');\r\n          }\r\n        } else {\r\n          const cost: PlayerResources = state.alien.difficulty.cost.hex.rural_2_urban;\r\n          if (PlayerTryPurchase(state.alien, cost)) {\r\n            DistrictAddLots(district, state.lots, 'urban');\r\n            district.kind = 'urban';\r\n            // WorldSfxInstance.play('moo');\r\n          }\r\n        }\r\n      },\r\n      changeEnterprise: (state, action: PayloadAction<{enterpriseKey: number, newType: EnterpriseType}>) => {\r\n        state.enterprises.byID[action.payload.enterpriseKey].enterpriseType = action.payload.newType;\r\n      },\r\n      fireBean: (state, action: PayloadAction<{cityKey: number, beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        BeanLoseJob(bean, state);\r\n      },\r\n      upgrade: (state, action: PayloadAction<{buildingKey: number}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.upgrade;\r\n        const what = state.buildings.byID[action.payload.buildingKey];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          what.upgradedJobs = true;\r\n        }\r\n      },\r\n      upgradeLoft: (state, action: PayloadAction<{buildingKey: number}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.add_loft;\r\n        const what = state.buildings.byID[action.payload.buildingKey];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          what.upgradedLoft = true;\r\n          const loft: IDwelling = {\r\n            key: 0,\r\n            buildingKey: action.payload.buildingKey,\r\n            kind: 'loft'\r\n          }\r\n          EntityAddToSlice(state.dwellings, loft);\r\n          what.dwellingKeys = [loft.key];\r\n        }\r\n      },\r\n      upgradeStorage: (state, action: PayloadAction<{buildingKey: number}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.upgrade;\r\n        const what = state.buildings.byID[action.payload.buildingKey];\r\n        if (PlayerTryPurchase(state.alien, cost)) {\r\n          what.upgradedStorage = true;\r\n        }\r\n      },\r\n      beam: (state, action: PayloadAction<{cityKey: number, where: HexPoint}>) => {\r\n        const cost = state.alien.difficulty.cost.hex.beam;\r\n        if (PlayerCanAfford(state.alien, cost)) {\r\n          PlayerPurchase(state.alien, cost);\r\n          const ufo: IUFO = {\r\n            key: state.ufos.nextID++,\r\n            action: 'beam-in',\r\n            duration: 0,\r\n            point: {...action.payload.where},\r\n            cityKey: action.payload.cityKey\r\n          };\r\n          state.ufos.allIDs.push(ufo.key);\r\n          state.ufos.byID[ufo.key] = ufo;\r\n          state.cities.byID[action.payload.cityKey].ufoKeys.push(ufo.key);\r\n        }\r\n      },\r\n      remove_ufo: (state, action: PayloadAction<{ufoKey: number}>) => {\r\n        const ufo = state.ufos.byID[action.payload.ufoKey];\r\n        const newBean = GenerateBean(state, state.cities.byID[0], undefined, ufo.point);\r\n        newBean.priorities = GetPriorities(newBean, state.seed, state.cities.byID[newBean.cityKey], state.alien.difficulty);\r\n        delete state.ufos.byID[action.payload.ufoKey];\r\n        state.ufos.allIDs = state.ufos.allIDs.filter(x => x != action.payload.ufoKey);\r\n        state.cities.byID[ufo.cityKey].ufoKeys = state.cities.byID[ufo.cityKey].ufoKeys.filter(x => x != action.payload.ufoKey);\r\n        \r\n        state.beans.byID[newBean.key] = newBean;\r\n        state.beans.allIDs.push(newBean.key);\r\n        state.cities.byID[ufo.cityKey].beanKeys.push(newBean.key);\r\n        MoverStoreInstance.Get('bean', newBean.key).current = {\r\n          point: hex_to_pixel(state.cities.byID[ufo.cityKey].hex_size, state.cities.byID[ufo.cityKey].petriOrigin, ufo.point), \r\n          velocity: {x: 0, y: 0}\r\n        };\r\n      },\r\n      abduct: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.abduct)) {\r\n          const bean = state.beans.byID[action.payload.beanKey];\r\n          if (bean.lifecycle === 'alive'){\r\n            bean.lifecycle = 'abducted';\r\n            if (bean.employerEnterpriseKey){\r\n              const building = state.buildings.byID[bean.employerEnterpriseKey];\r\n              BuildingUnsetJob(building, bean);\r\n            }\r\n            state.cities.byID[bean.cityKey].beanKeys = state.cities.byID[bean.cityKey].beanKeys.filter(x => x != bean.key);\r\n            state.alien.abductedBeanKeys.push(bean.key);\r\n          }\r\n        }\r\n      },\r\n      cheatAdd: (state) => {\r\n        state.alien.energy.amount += 10;\r\n        state.alien.bots.amount += 10;\r\n        state.alien.hedons.amount += 10;\r\n      },\r\n      release: (state) => {\r\n        if (state.alien.abductedBeanKeys.length > 0) {\r\n          const lucky_bean_key = state.alien.abductedBeanKeys.shift();\r\n          if (lucky_bean_key != null){\r\n            const luckyBean = state.beans.byID[lucky_bean_key];\r\n            luckyBean.lifecycle = 'alive';\r\n            state.cities.byID[luckyBean.cityKey].beanKeys.push(lucky_bean_key);\r\n          }\r\n        }\r\n\r\n      },\r\n      washCommunity: (state, action: PayloadAction<{beanKey: number, faith: TraitFaith}>) => {\r\n        // if (bean.canPurchase(state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n        //   bean.loseSanity(state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n        //   if (bean.community === 'ego')\r\n        //     bean.community = 'state';\r\n        //   else bean.community = 'ego';\r\n        //   return true;\r\n        // }\r\n      },\r\n      washMotive: () => {\r\n\r\n        // if (bean.canPurchase(state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n        //   bean.loseSanity(state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n        //   if (bean.ideals === 'prog')\r\n        //     bean.ideals = 'trad';\r\n        //   else bean.ideals = 'prog';\r\n        //   this.setState({ world: state });\r\n        //   return true;\r\n        // }\r\n      },\r\n      washNarrative: (state, action: PayloadAction<{beanKey: number, faith: TraitFaith}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainwash_ideal, 0)) {\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainwash_ideal.sanity || 0);\r\n          const oldFaith = bean.faith;\r\n          while (bean.faith === oldFaith){\r\n            bean.faith = GetRandom(state.seed, ['rocket', 'dragon', 'music', 'noFaith']);\r\n          }\r\n        }\r\n      },\r\n      washBelief: (state, action: PayloadAction<{beanKey: number, trait: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const sanityCostBonus = HasResearched(state.alien.techProgress, 'sanity_bonus') ? -1 : 0;\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary, sanityCostBonus)) {\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary.sanity || 0);\r\n          bean.sanity = BeanCalculateSanity(bean, state.alien.difficulty);\r\n          bean.beliefs.splice(\r\n            bean.beliefs.indexOf(action.payload.trait), 1\r\n          );\r\n          state.insanityEvent = BeanMaybeGetInsanity(state.seed, bean);\r\n          if (state.insanityEvent){\r\n            bean.beliefs = [...bean.beliefs, state.insanityEvent.newInsanity];\r\n            WorldSfxInstance.play('crazy_laugh');\r\n          } else {\r\n            WorldSfxInstance.play('wash_out');\r\n          }\r\n        }\r\n      },\r\n      extractBelief: (state, action: PayloadAction<{beanKey: number, trait: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const sanityCostBonus = HasResearched(state.alien.techProgress, 'sanity_bonus') ? -1 : 0;\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary, sanityCostBonus)) {\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainwash_secondary.sanity || 0);\r\n          bean.sanity = BeanCalculateSanity(bean, state.alien.difficulty);\r\n          const existing = state.alien.beliefInventory.find((x) => x.trait === action.payload.trait);\r\n          const chargeBonus = HasResearched(state.alien.techProgress, 'neural_duplicator') ? 1 : 0;\r\n          if (existing) {\r\n            existing.gems += ChargePerExtract + chargeBonus;\r\n          } else {\r\n            state.alien.beliefInventory.push({trait: action.payload.trait, gems: ChargePerExtract + chargeBonus});\r\n          }\r\n          state.insanityEvent = BeanMaybeGetInsanity(state.seed, bean);\r\n          if (state.insanityEvent){\r\n            bean.beliefs = [...bean.beliefs, state.insanityEvent.newInsanity];\r\n            WorldSfxInstance.play('crazy_laugh');\r\n          } else {\r\n            WorldSfxInstance.play('wash_out');\r\n          }\r\n        }\r\n      },\r\n      acknowledgeNewInsanity: (state) =>{\r\n        state.insanityEvent = undefined;\r\n      },\r\n      setResearch: (state, action: PayloadAction<{t: Tech}>) => {\r\n        state.alien.currentlyResearchingTech = action.payload.t;\r\n      },\r\n      implant: (state, action: PayloadAction<{beanKey: number, trait: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const sanityCostBonus = HasResearched(state.alien.techProgress, 'sanity_bonus') ? -1 : 0;\r\n        if (BeanCanPurchase(bean, state.alien.difficulty.cost.bean_brain.brainimplant_secondary, sanityCostBonus) && \r\n          state.alien.beliefInventory.filter(x => x.trait == action.payload.trait && x.gems > 0)) {\r\n          bean.beliefs.push(action.payload.trait);\r\n          PlayerUseTraitGem(state.alien, action.payload.trait);\r\n          BeanLoseSanity(bean, state.alien.difficulty.cost.bean_brain.brainimplant_secondary.sanity || 0); \r\n          bean.sanity = BeanCalculateSanity(bean, state.alien.difficulty);\r\n          state.insanityEvent = BeanMaybeGetInsanity(state.seed, bean);\r\n          if (state.insanityEvent){\r\n            bean.beliefs = [...bean.beliefs, state.insanityEvent.newInsanity];\r\n            WorldSfxInstance.play('crazy_laugh');\r\n          } else {\r\n            WorldSfxInstance.play('wash_in');\r\n          }\r\n        }\r\n      },\r\n      scan: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.scan)) {\r\n          state.alien.scanned_bean[bean.key] = true;\r\n          bean.beliefs.forEach((b) => {\r\n            if (!state.alien.seenBeliefs[b]){\r\n              state.alien.seenBeliefs[b] = true;\r\n              SignalStoreInstance.newTraitSeen.publish({k: SecondaryBeliefData[b].noun, v: true});\r\n            }\r\n          });\r\n          WorldSfxInstance.play('scan');\r\n        }\r\n      },\r\n      vaporize: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        if (PlayerTryPurchase(state.alien, state.alien.difficulty.cost.bean.vaporize)) {\r\n          const bean = state.beans.byID[action.payload.beanKey];\r\n          const d = BeanDie(bean, state.seed, 'vaporization');\r\n          EntityAddToSlice(state.events, d.death);\r\n          BeanLoseJob(bean, state);\r\n          d.emotes.map(e => EntityAddToSlice(state.pickups, e));\r\n        }\r\n      },\r\n      pickUpPickup: (state, action: PayloadAction<{cityKey: number, pickupKey: number}>) => {\r\n        const pickup = state.pickups.byID[action.payload.pickupKey];\r\n\r\n        const amt = EmotionWorth[pickup.type];\r\n        state.alien.hedons.amount += amt;\r\n        state.cities.byID[action.payload.cityKey].pickupKeys = state.cities.byID[action.payload.cityKey].pickupKeys.filter(x => x != action.payload.pickupKey);\r\n        state.pickups.allIDs = state.pickups.allIDs.filter(x => x != action.payload.pickupKey);\r\n        delete state.pickups.byID[action.payload.pickupKey];\r\n        \r\n        SignalStoreInstance.alienHedons.publish({change: amt});\r\n        WorldSfxInstance.play(pickup.type);\r\n      },\r\n      changeState: (state, action: PayloadAction<{beanKey: number, newState: IActivityData}>) => {\r\n        const oldAct = state.beans.byID[action.payload.beanKey].action;\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const ADS = AgentDurationStoreInstance.Get('bean', bean.key);\r\n        if (oldAct === 'chat')\r\n          bean.lastChatMS = Date.now();\r\n        if (oldAct === 'sleep'){\r\n          bean.discrete_stamina = 7;\r\n          BeanCalculateStamina(bean, state.alien.difficulty);\r\n        }\r\n        if (action.payload.newState.act === 'idle'){\r\n          bean.priorities = GetPriorities(bean, state.seed, state.cities.byID[bean.cityKey], state.alien.difficulty);\r\n        }\r\n        bean.activity_duration[oldAct] += ADS.elapsed;\r\n        bean.action = action.payload.newState.act;\r\n        bean.actionData = action.payload.newState;\r\n        const p = MoverStoreInstance.Get('bean', bean.key).current?.point;\r\n        if (p) {\r\n          bean.lastPoint = {\r\n            ...p\r\n          };\r\n        }\r\n        ADS.elapsed = 0;\r\n      },\r\n      beanHitDestination: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.actionData.destinationIndex != null){\r\n          bean.actionData.destinationIndex++;\r\n        }\r\n      },\r\n      beanBePersuaded: (state, action: PayloadAction<{beanKey: number, belief: TraitBelief}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        bean.beliefs.push(action.payload.belief);\r\n        WorldAddEvent(state, {\r\n            key: 0,\r\n            icon: '🗣️', \r\n            trigger: 'persuasion', \r\n            message: `${bean.name} now believes in ${SecondaryBeliefData[action.payload.belief].icon} ${SecondaryBeliefData[action.payload.belief].noun}!`, \r\n            beanKey: bean.key, cityKey: bean.cityKey,\r\n            point: bean.lastPoint\r\n        });\r\n        WorldSfxInstance.play('mhmm')\r\n      },\r\n      beanGiveCharity: (state, action: PayloadAction<{senderBeanKey: number, needyBeanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.senderBeanKey];\r\n        bean.cash -= 0.5;\r\n        _emote(bean, state, {emote: 'happiness', source: 'Charity'});\r\n        const needy = state.beans.byID[action.payload.needyBeanKey];\r\n        needy.cash += 0.5;\r\n        _emote(needy, state, {emote: 'happiness', source: 'Charity'});\r\n      },\r\n      beanWork: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        if (bean.job === 'jobless'){\r\n        } else {\r\n            switch(bean.job){\r\n                case 'farmer':\r\n                    bean.discrete_food = Math.min(bean.discrete_food+1, GoodToThreshold.food.sufficient*2);\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Parochialism', 'happiness', ParochialHappyChance);\r\n                    break;\r\n                case 'doc':\r\n                    bean.discrete_health = Math.min(bean.discrete_health+1, GoodToThreshold.medicine.sufficient*2);\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Germophobia', 'unhappiness', GermophobiaHospitalWorkChance);\r\n                    break;\r\n                case 'builder': \r\n                    bean.stamina = 'awake';\r\n                    bean.discrete_stamina = 7;\r\n                    break;\r\n                case 'entertainer':\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Cosmopolitanism', 'happiness', CosmopolitanHappyChance);\r\n                break;\r\n            }\r\n            _ifBelievesInMaybeEmote(state, bean, 'Diligence', 'happiness', DiligenceHappyChance);\r\n            _ifBelievesInMaybeEmote(state, bean, 'Hedonism', 'unhappiness', HedonismHateWorkChance);\r\n            bean.ticksSinceLastSale++;\r\n            if (bean.ticksSinceLastSale > UnderemploymentThresholdTicks && bean.employerEnterpriseKey != null){\r\n                // const cityHasOtherWorkers = state.cities.byID[bean.cityKey].beans.get.filter(x => x.job === bean.job).length > 1 : false;\r\n                // cityHasOtherWorkers &&\r\n                const employer = state.enterprises.byID[bean.employerEnterpriseKey];\r\n                // underemployment\r\n                if (employer.ownerBeanKey != bean.key && Math.random() > 0.5) {\r\n                    const newJob = EconomyMostInDemandJob(state.economy);\r\n                    if (newJob){\r\n                      BeanTryFindJob(state, bean, bean.employerEnterpriseKey);\r\n                      bean.ticksSinceLastSale = 0;\r\n                    }\r\n                }\r\n            }\r\n            let workedForEmployer = false;\r\n            if (bean.employerEnterpriseKey){\r\n                const employer = state.enterprises.byID[bean.employerEnterpriseKey];\r\n                if (employer){\r\n                    EconomyEmployAndPrice(state.economy, employer, JobToGood(bean.job), 4, bean.fairGoodPrice);\r\n                    workedForEmployer = true;\r\n                    switch(employer.enterpriseType){\r\n                        case 'company':\r\n                            _ifBelievesInMaybeEmote(state, bean, 'Communism', 'unhappiness', 0.1);\r\n                            if (employer.ownerBeanKey === bean.key)\r\n                              _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'co-op':                            \r\n                            _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'unhappiness', 0.1);\r\n                                \r\n                            _ifBelievesInMaybeEmote(state, bean, 'Socialism', 'happiness', 0.1);\r\n                            break;\r\n                        case 'commune':                            \r\n                          _ifBelievesInMaybeEmote(state, bean, 'Capitalism', 'unhappiness', 0.1);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (!workedForEmployer)\r\n              EconomyProduceAndPrice(state.economy, bean, JobToGood(bean.job), 4, bean.fairGoodPrice);\r\n        }\r\n      },\r\n      beanEmote: (state, action: PayloadAction<{beanKey: number, emote: TraitEmote, source: string}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        _emote(bean, state, action.payload);\r\n        if (BeanBelievesIn(bean, 'Hedonism') && (\r\n          action.payload.emote === 'happiness' || action.payload.emote === 'love'\r\n          ) && Math.random() < HedonismExtraChance){\r\n            _emote(bean, state, {emote: 'happiness', source: 'Hedonism'});\r\n        }\r\n      },\r\n      beanCrime: (state, action: PayloadAction<{beanKey: number, good: 'food'|'medicine'}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        \r\n        const listing = GetRandom(state.seed, state.economy.market.listings[action.payload.good]);\r\n        if (listing == null){\r\n        } else {\r\n          const stolen = Math.min(listing.quantity, 3);\r\n          MarketListingSubtract(state.economy.market, listing, action.payload.good, stolen);\r\n          if (stolen != null){\r\n              switch(action.payload.good){\r\n                  case 'food':\r\n                      bean.discrete_food += stolen;\r\n                      break;\r\n                  case 'medicine':\r\n                      bean.discrete_health += stolen;\r\n                      break;\r\n              }\r\n          }\r\n        }\r\n      },\r\n      beanRelax: (state, action: PayloadAction<{beanKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        bean.discrete_fun += 1;\r\n        _emote(bean, state, {emote: 'happiness', source: 'Relaxation'});\r\n        if (BeanBelievesIn(bean, 'Naturalism'))\r\n          _emote(bean, state, {emote: 'happiness', source: 'Naturalism'});\r\n      },\r\n      enactLaw: (state, action: PayloadAction<{lawKey: LawKey}>) => {\r\n        const data = LawData[action.payload.lawKey];\r\n        state.law.lawTree[data.axis] = data;\r\n      },\r\n      repealLaw: (state, action: PayloadAction<{lawKey: LawKey}>) => {\r\n        const data = LawData[action.payload.lawKey];\r\n        delete state.law.lawTree[data.axis];\r\n      },\r\n      \r\n    buyBots: (state, action: PayloadAction<{amount: number}>) => {\r\n      const cost = state.alien.difficulty.cost.market.resource.bots;\r\n      if (PlayerTryPurchase(state.alien, cost, action.payload.amount)) {\r\n        state.alien.bots.amount += action.payload.amount;\r\n      }\r\n    },\r\n    buyEnergy: (state, action: PayloadAction<{amount: number}>) => {\r\n      const cost = state.alien.difficulty.cost.market.resource.bots;\r\n      if (PlayerTryPurchase(state.alien, cost, action.payload.amount)) {\r\n        state.alien.energy.amount += action.payload.amount;\r\n      }\r\n    },\r\n    scrubHedons: (state) => {\r\n      const cost = state.alien.difficulty.cost.market.scrubHedons;\r\n      if (PlayerTryPurchase(state.alien, cost)) {\r\n        const old = state.alien.hedons.amount;\r\n        state.alien.hedons.amount = 0;\r\n      }\r\n    },\r\n    buyTrait: (state, action: PayloadAction<{l: MarketTraitListing}>) => {\r\n      if (PlayerTryPurchase(state.alien, action.payload.l.cost)) {\r\n        const existing = state.alien.beliefInventory.find((x) => x.trait === action.payload.l.trait);\r\n        if (existing) {\r\n          existing.gems += ChargePerMarket;\r\n        } else\r\n          state.alien.beliefInventory.push({trait: action.payload.l.trait, gems: ChargePerMarket});\r\n      }\r\n    },\r\n      beanBuy: (state, action: PayloadAction<{beanKey: number, good: TraitGood}>) =>{\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        const getSeller = (l: IListing) => {\r\n          if (l.sellerEnterpriseKey != null)\r\n            return state.enterprises.byID[l.sellerEnterpriseKey];\r\n          else if (l.sellerBeanKey)\r\n            return state.beans.byID[l.sellerBeanKey];\r\n          else\r\n            return state.law;\r\n        }\r\n        let receipt: IMarketReceipt|undefined;\r\n        switch(action.payload.good){\r\n          case 'food':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'food', getSeller, 0.5, 3);\r\n            if (receipt?.bought) {\r\n                bean.discrete_food += receipt.bought;\r\n                if (bean.food === 'stuffed'){\r\n                    _emote(bean, state, {emote:'happiness', source: 'Stuffed'});\r\n                    _ifBelievesInMaybeEmote(state, bean, 'Gluttony', 'happiness', 1);\r\n                }\r\n            }\r\n            break;\r\n          // case 'shelter':\r\n          //   receipt = EconomyTryTransact(state.economy, state.law, bean, 'shelter', getSeller);\r\n          //   if (receipt?.bought) {\r\n          //       bean.discrete_stamina = 10;\r\n          //       bean.stamina = 'awake';\r\n          //   } else if (bean.discrete_stamina <= 0){\r\n          //       bean.stamina = 'homeless';\r\n          //   }\r\n          //   break;\r\n          case 'medicine':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'medicine', getSeller, 0.5, 3);\r\n            if (receipt?.bought){\r\n                bean.discrete_health += receipt.bought;\r\n                if (bean.health === 'fresh')\r\n                    _emote(bean, state, {emote:'happiness', source: 'Robust'});\r\n            }\r\n            break;\r\n          case 'fun':\r\n            receipt = EconomyTryTransact(state.economy, state.law, bean, 'fun', getSeller);\r\n            if (receipt?.bought) {\r\n                bean.discrete_fun = 1;\r\n                _emote(bean, state, {emote:'happiness', source:'Entertainment'});\r\n                _emote(bean, state, {emote:'happiness', source:'Entertainment'});\r\n            }\r\n            break;\r\n        }\r\n        bean.actionData.buyAttempts = (bean.actionData.buyAttempts || 0) + 1;\r\n        if (receipt){\r\n          WorldSfxInstance.play('cash');\r\n          if (receipt.tax){\r\n            _ifBelievesInMaybeEmote(state, bean, 'Libertarianism', 'unhappiness', LibertarianTaxUnhappyChance);\r\n            _ifBelievesInMaybeEmote(state, bean, 'Progressivism', 'happiness', ProgressivismTaxHappyChance);\r\n          }\r\n          bean.actionData.buyReceipt = receipt;\r\n        }\r\n      },\r\n      addTitle: (state, action: PayloadAction<{}>) => {\r\n        EntityAddToSlice(state.titles, {\r\n          key: 0,\r\n          name: 'Title',\r\n          privileges: []\r\n        })\r\n      },\r\n      editTitle: (state, action: PayloadAction<{newT: ITitle}>) => {\r\n        const oldTitle = state.titles.byID[action.payload.newT.key];\r\n        state.titles.byID[action.payload.newT.key] = action.payload.newT;\r\n        if (oldTitle && oldTitle.badge != action.payload.newT.badge){\r\n          state.beans.allIDs.forEach((x) => {\r\n            if (state.beans.byID[x].titleKey === oldTitle.key)\r\n              state.beans.byID[x].badge = action.payload.newT.badge;\r\n          });\r\n        }\r\n        if (oldTitle && oldTitle.headwear != action.payload.newT.headwear){\r\n          state.beans.allIDs.forEach((x) => {\r\n            if (state.beans.byID[x].titleKey === oldTitle.key)\r\n              state.beans.byID[x].hat = action.payload.newT.headwear;\r\n          });\r\n        }\r\n      },\r\n      manualSave: (state) => {\r\n        GameStorageInstance.SaveGame(state);\r\n      },\r\n      beanSetTitle: (state, action: PayloadAction<{beanKey: number, titleKey: number}>) => {\r\n        const bean = state.beans.byID[action.payload.beanKey];\r\n        bean.titleKey = action.payload.titleKey;\r\n        const title = state.titles.byID[action.payload.titleKey];\r\n        bean.badge = title.badge;\r\n        bean.hat = title.headwear;\r\n      }\r\n    }\r\n  });\r\n\r\n  function _ifBelievesInMaybeEmote(state: IWorldState, bean: IBean, source: TraitBelief, emote: TraitEmote, chance: number){\r\n    if (BeanBelievesIn(bean, source) && Math.random() < chance){\r\n      _emote(bean, state, {emote: emote, source: source});\r\n    }\r\n  }\r\n  function _emote(bean: IBean, state: IWorldState, payload: {emote: TraitEmote, source: string}){\r\n    bean.discrete_sanity = MathClamp(bean.discrete_sanity + EmotionSanity[payload.emote], 0, 10);\r\n    bean.hedonHistory[0][payload.source] = (bean.hedonHistory[0][payload.source] || 0) + EmotionWorth[payload.emote];\r\n    \r\n    const beanPosition = MoverStoreInstance.Get('bean', bean.key).current || OriginAccelerator;\r\n\r\n    const pickup: IPickup = {\r\n        key: state.pickups.nextID++,\r\n        point: {\r\n          x: beanPosition.point.x,\r\n          y: beanPosition.point.y\r\n        },\r\n        type: payload.emote,\r\n        velocity: {x: 0, y: 0}\r\n    };\r\n    state.cities.byID[bean.cityKey].pickupKeys.push(pickup.key);\r\n    state.pickups.byID[pickup.key] = pickup; \r\n    state.pickups.allIDs.push(pickup.key);\r\n    MoverStoreInstance.Get('pickup', pickup.key).publish({\r\n      point: {\r\n        x: beanPosition.point.x,\r\n        y: beanPosition.point.y\r\n      },\r\n      velocity: {x: 0, y: 0}\r\n    });\r\n  }\r\n  \r\n  export const { \r\n    refreshMarket, magnetChange, worldTick, \r\n    remove_ufo, upgradeDistrict,\r\n    newGame, loadGame, build, changeEnterprise, fireBean, upgrade, upgradeLoft, upgradeStorage, beam,\r\n    abduct, release, scan, vaporize, pickUpPickup,\r\n    implant, washBelief, washNarrative, washCommunity, washMotive,extractBelief,\r\n    changeState, beanEmote, beanGiveCharity, beanHitDestination, beanWork, beanRelax, beanBuy, beanCrime,\r\n    beanBePersuaded, cheatAdd, manualSave,\r\n    addTitle, editTitle, beanSetTitle, acknowledgeNewInsanity,\r\n    enactLaw, repealLaw, setResearch, buyBots, buyEnergy, buyTrait, scrubHedons\r\n  } = worldSlice.actions\r\n  \r\n  export const selectCityBeanIDs = (state: IWorldState, cityKey: number) => state.cities.byID[cityKey].beanKeys;\r\n  export const selectBeans = (state: IWorldState) => state.beans.byID;\r\n  export const selectBeansByCity = createSelector(\r\n    selectCityBeanIDs,\r\n    selectBeans,\r\n    (cityBeanIDs, beansByID) => cityBeanIDs.reduce((all, cityBeanKey) => {\r\n      all.push(beansByID[cityBeanKey])\r\n      return all;\r\n    }, [] as IBean[])\r\n  );\r\n  export const selectCity = (state: IWorldState, cityKey: number) => state.cities.byID[cityKey];\r\n  export const selectBuilding = (state: IWorldState, buildingKey: number) => state.buildings.byID[buildingKey];\r\n  export const selectCityBuildingByHex = (state: IWorldState, cityKey: number, hexKey: string) => {\r\n    const buildingKey = state.cities.byID[cityKey].buildingMap[hexKey];\r\n    if (buildingKey != null)\r\n      return selectBuilding(state, buildingKey);\r\n    else\r\n      return undefined;\r\n  }\r\n  export const selectBuildingKeysByCity = (state: IWorldState, cityKey: number) => {\r\n    return state.cities.byID[cityKey].buildingKeys;\r\n  }\r\n  export const selectBuildingsByCity = (state: IWorldState, cityKey: number) => {\r\n    return selectBuildingKeysByCity(state, cityKey).reduce((x: IBuilding[], id) => {\r\n      x.push(state.buildings.byID[id]);\r\n      return x;\r\n    }, [] as IBuilding[]);\r\n  }\r\n  \r\n  export const selectMajorityEthnicity = createSelector(selectBeansByCity, (cityBeans) => {\r\n    const c = cityBeans.reduce((count: {circle: number, square: number, triangle: number}, bean) => {\r\n        switch(bean.ethnicity){\r\n            case 'circle': count.circle++;break;\r\n            case 'square': count.square++;break;\r\n            case 'triangle': count.triangle++;break;\r\n        }\r\n        return count;\r\n    }, {circle: 0, square: 0, triangle: 0});\r\n    if (c.circle > c.square && c.circle > c.triangle){\r\n      return 'circle';\r\n    } else if (c.square > c.circle && c.square > c.triangle){\r\n      return 'square';\r\n    } else {\r\n      return 'triangle';\r\n    }\r\n  });\r\n  \r\n  export default worldSlice.reducer;\r\n  ","import { IEvent } from '../../events/Events'\r\nimport { DefaultDifficulty } from '../../Game'\r\nimport { IBean } from '../../simulation/Agent'\r\nimport { InsanityTraits } from '../../simulation/Beliefs'\r\nimport { ICity } from '../../simulation/City'\r\nimport { IEconomy } from '../../simulation/Economy'\r\nimport { IDistrict, ILot } from '../../simulation/Geography'\r\nimport { IGovernment, ILaw, LawAxis } from '../../simulation/Government'\r\nimport { IEnterprise } from '../../simulation/Institutions'\r\nimport { MarketTraitListing } from '../../simulation/MarketTraits'\r\nimport { IPickup } from '../../simulation/Pickup'\r\nimport { IPlayerData } from '../../simulation/Player'\r\nimport { IBuilding, IDwelling } from '../../simulation/RealEstate'\r\nimport { IDate, Season } from '../../simulation/Time'\r\nimport { ITitle } from '../../simulation/Titles'\r\nimport { IUFO } from '../../simulation/Ufo'\r\nimport { GenerateCity } from '../../WorldGen'\r\nimport { CreateEmptyEntitySlice, CreateEntitySlice, IEntitySlice } from '../entity.state'\r\n\r\nexport interface IWorldState {\r\n  buildings: IEntitySlice<IBuilding>,\r\n  enterprises: IEntitySlice<IEnterprise>,\r\n  cities: IEntitySlice<ICity>,\r\n  beans: IEntitySlice<IBean>,\r\n  ufos: IEntitySlice<IUFO>,\r\n  events: IEntitySlice<IEvent>,\r\n  pickups: IEntitySlice<IPickup>,\r\n  districts: IEntitySlice<IDistrict>,\r\n  lots: IEntitySlice<ILot>,\r\n  titles: IEntitySlice<ITitle>,\r\n  dwellings: IEntitySlice<IDwelling>,\r\n  economy: IEconomy,\r\n  law: IGovernment,\r\n  marketTraitsForSale: MarketTraitListing[],\r\n  date: IDate,\r\n  alien: IPlayerData,\r\n  spotlightEvent: IEvent | undefined,\r\n  insanityEvent: {beanKey: number, newInsanity: InsanityTraits}|undefined,\r\n  /**\r\n   * 1-based ID of save slot (1-3)\r\n   */\r\n  saveSlot: number,\r\n  seed: string\r\n}\r\n\r\nexport function GetBlankWorldState(seed: string = 'abcdef'): IWorldState{\r\n  return {\r\n    buildings: CreateEmptyEntitySlice<IBuilding>(),\r\n    enterprises: CreateEmptyEntitySlice<IEnterprise>(),\r\n    cities: CreateEntitySlice<ICity>([\r\n      GenerateCity()\r\n    ]),\r\n    beans: CreateEmptyEntitySlice<IBean>(),\r\n    ufos: CreateEmptyEntitySlice<IUFO>(),\r\n    events: CreateEmptyEntitySlice<IEvent>(),\r\n    pickups: CreateEmptyEntitySlice<IPickup>(),\r\n    lots: CreateEmptyEntitySlice<ILot>(),\r\n    districts: CreateEmptyEntitySlice<IDistrict>(),\r\n    titles: CreateEmptyEntitySlice<ITitle>(),\r\n    dwellings: CreateEmptyEntitySlice<IDwelling>(),\r\n    economy: {\r\n      unfulfilledMonthlyDemand: { food: 0, medicine: 0, fun: 0, },\r\n      monthlyDemand: { food: 0, medicine: 0, fun: 0, },\r\n      monthlySupply: { food: 0, medicine: 0, fun: 0, },\r\n      market: {\r\n        listings: {\r\n          food: [], fun: [], medicine: []\r\n          //, shelter: []\r\n        }\r\n      }\r\n    },\r\n    law: {\r\n      cash: 0,\r\n      lawTree: {} as {[key in LawAxis]: ILaw|undefined},\r\n      laws: [] as ILaw[],\r\n      ticksSinceLastSale: 0\r\n    },\r\n    date: {year: 1, season: Season.Spring, day: 1, hour: 1},\r\n    marketTraitsForSale: [],\r\n    alien: {\r\n      scanned_bean: {},\r\n      seenBeliefs: {},\r\n      beliefInventory: [],\r\n      speechcrimes: {},\r\n      abductedBeanKeys: [],\r\n      energy: { amount: 16, income: 2/30},\r\n      bots: { amount: 10, income: 2/30},\r\n      hedons: { amount: 0, income: 0},\r\n      // tortrons: { amount: 0, income: 0},\r\n      next_grade: { year: 1, season: 3, day: 1, hour: 0 },\r\n      difficulty: {...DefaultDifficulty},\r\n      goals: ['found_utopia', 'build_house_n_farm',  'beam_3', 'scan', 'brainwash', 'set_policy', 'c+_grade'],\r\n      goalProgress: {},\r\n      pastReportCards: [],\r\n      workingReportCard: {\r\n          Happiness: 'D',\r\n          Prosperity: 'D',\r\n          Stability: 'D',\r\n          Dogma: 'D',\r\n      },\r\n      techProgress: {},\r\n      currentlyResearchingTech: undefined\r\n    },\r\n    spotlightEvent: undefined,\r\n    insanityEvent: undefined,\r\n    saveSlot: 1,\r\n    seed: seed\r\n  }\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './state'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { HexPoint } from \"../../simulation/Geography\"\r\n\r\nexport interface ISelectedSlice{\r\n    selectedCityKey: number|undefined;\r\n    selectedBeanKey: number|undefined;\r\n    selectedDistrictKey: number|undefined;\r\n    selectedLotKey: number|undefined;\r\n    selectedBuildingKey: number|undefined;\r\n}\r\nexport const selectedSlice = createSlice({\r\n    name: 'selected',\r\n    initialState: {\r\n        selectedCityKey: undefined,\r\n        selectedBeanKey: undefined\r\n    } as ISelectedSlice,\r\n    reducers: {\r\n      doSelectCity: (state, action: PayloadAction<{cityKey: number}>) => {\r\n        return {\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: undefined,\r\n            selectedDistrictKey: undefined,\r\n            selectedLotKey: undefined\r\n        }\r\n      },\r\n      doSelectDistrict: (state, action: PayloadAction<{cityKey: number, district: number}>) => {\r\n        return {\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: undefined,\r\n            selectedDistrictKey: action.payload.district,\r\n            selectedLotKey: undefined\r\n        }\r\n      },\r\n      doSelectLot: (state, action: PayloadAction<{cityKey: number, district: number, lot: number}>) => {\r\n        return {\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: undefined,\r\n            selectedDistrictKey: action.payload.district,\r\n            selectedLotKey: action.payload.lot\r\n        }\r\n      },\r\n      doSelectBuilding: (state, action: PayloadAction<{cityKey: number, buildingKey: number}>) => {\r\n        return {\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: undefined,\r\n            selectedBuildingKey: action.payload.buildingKey,\r\n            selectedLotKey: undefined,\r\n            selectedDistrictKey: undefined\r\n        }\r\n      },\r\n      doSelectBean: (state, action: PayloadAction<{cityKey: number, beanKey: number}>) => {\r\n        return {\r\n            selectedHexKey: undefined,\r\n            selectedCityKey: action.payload.cityKey,\r\n            selectedBeanKey: action.payload.beanKey,\r\n            selectedBuildingKey: undefined,\r\n            selectedDistrictKey: undefined,\r\n            selectedLotKey: undefined\r\n        }\r\n      },\r\n      doSelectNone: (state) => {\r\n        return {\r\n            selectedBeanKey: undefined, \r\n            selectedCityKey: undefined,\r\n            selectedHexKey: undefined,\r\n            selectedBuildingKey: undefined,\r\n            selectedDistrictKey: undefined,\r\n            selectedLotKey: undefined\r\n        }\r\n      },\r\n    }\r\n  })\r\n  \r\n  export const { doSelectDistrict, doSelectNone, doSelectBean, doSelectCity, doSelectBuilding, doSelectLot  } = selectedSlice.actions;","import { combineReducers, configureStore, createSelector, getDefaultMiddleware, Middleware } from '@reduxjs/toolkit';\r\nimport { GameStorageInstance } from '../GameStorage';\r\nimport { ISelectedSlice, selectedSlice } from './features/selected.reducer';\r\nimport { IWorldState } from './features/world';\r\nimport { selectBeans, worldSlice } from './features/world.reducer';\r\n\r\n// export type RootState = ReturnType<typeof store.getState>;\r\nexport type RootState = {\r\n  world: IWorldState,\r\n  selected: ISelectedSlice\r\n};\r\nexport const autosaveSignalMiddleware: Middleware<\r\n  {}, // Most middleware do not modify the dispatch return value\r\n  RootState\r\n> = storeApi => next => action => {\r\n  \r\n  switch (action.type){\r\n    case 'world/magnetChange':\r\n      break;\r\n    default:\r\n      if (!action.type.startsWith('selected')){\r\n        GameStorageInstance.Dirty.publish(true);\r\n      }\r\n  }\r\n  \r\n  return next(action)\r\n}\r\nexport const store = configureStore({\r\n  reducer: {\r\n    world: worldSlice.reducer,\r\n    selected: selectedSlice.reducer\r\n  },\r\n  middleware: getDefaultMiddleware().concat([autosaveSignalMiddleware])\r\n})\r\n\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const selectBeanById = (state: RootState, beanKey: number) => state.world.beans.byID[beanKey];\r\nexport const selectCityById = (state: RootState, cityKey: number) => state.world.cities.byID[cityKey];\r\nexport const selectSelectedCity = (state: RootState) => {\r\n  return state.selected.selectedCityKey != null ? state.world.cities.byID[state.selected.selectedCityKey] : undefined;\r\n}\r\nexport const selectSelectedBean = (state: RootState) => {\r\n  return state.selected.selectedBeanKey != null ? state.world.beans.byID[state.selected.selectedBeanKey] : undefined;\r\n}\r\nexport const selectSelectedBuilding = (state: RootState) => {\r\n  const city = state.selected.selectedCityKey != null && state.world.cities.byID[state.selected.selectedCityKey];\r\n  if (city && state.selected.selectedLotKey != null)\r\n  {\r\n    const buildingID = state.world.lots.byID[state.selected.selectedLotKey].buildingKey;\r\n    if (buildingID != null)\r\n      return state.world.buildings.byID[buildingID];\r\n  }\r\n  return undefined;\r\n}\r\nexport const selectEventIDs = (state: RootState) => {\r\n  return state.world.events.allIDs;\r\n};","import React from \"react\";\r\n\r\nexport class ConfirmButton extends React.Component<{\r\n    confirmText: string,\r\n    onConfirm: () => void,\r\n    disabled?: boolean,\r\n    className?: string\r\n}, {\r\n    confirming: boolean\r\n}> {\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            confirming: false\r\n        }\r\n    }\r\n    click(){\r\n        if (this.state.confirming){\r\n            this.props.onConfirm();\r\n            this.setState({confirming: false});\r\n        } else {\r\n            this.setState({confirming: true});\r\n        }\r\n    }\r\n    render(){\r\n        return <button className={this.props.className} onClick={() => this.click()} disabled={this.props.disabled}>\r\n            { this.state.confirming ? this.props.confirmText : this.props.children}\r\n        </button>\r\n    }\r\n}","import React, { ChangeEvent } from \"react\";\r\n\r\nexport interface StringDropdownPS{\r\n    options: Array<string>,\r\n    onChange: (key: any) => void,\r\n    hint?: string,\r\n    value?: any,\r\n    titleCase?: boolean\r\n}\r\ninterface StringDropdownS{\r\n    key: any;\r\n}\r\n\r\nexport class StringDropdown extends React.Component<StringDropdownPS, StringDropdownS> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            key: props.value || null\r\n        }\r\n    }\r\n    onChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        this.props.onChange(e.target.value);\r\n        this.setState({key: e.target.value})\r\n    }\r\n    hint(){\r\n        if (this.props.hint){\r\n            return <option value=\"\" disabled selected hidden>{this.props.hint}</option>\r\n        } \r\n        return undefined;\r\n    }\r\n    protected getTextForOption(data: string): string{\r\n        if (this.props.titleCase){\r\n            data = data[0].toUpperCase()+data.slice(1);\r\n        }\r\n        return data;\r\n    }\r\n    options(){\r\n        return this.props.options.map((str) => {\r\n            return <option value={str} key={str} title={this.getTitleForOption(str)}>\r\n                {this.getTextForOption(str)}\r\n            </option>\r\n        })\r\n    }\r\n    render(){\r\n        return <select onChange={this.onChange} value={this.state.key} required={this.props.hint != null}>\r\n            {this.hint()}\r\n            {this.options()}\r\n        </select>\r\n    }\r\n    protected getTitleForOption(data: string): string|undefined{\r\n        return undefined;\r\n    }\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport { BeliefsAll, IBeliefData, SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { StringDropdown } from \"../widgets/StringDropdown\";\r\nimport { TraitIcon } from \"../World\";\r\nimport './beliefs.css';\r\n\r\n\r\n\r\nexport const BeliefWidget: React.FC<{\r\n    data: IBeliefData,\r\n    cost?: number,\r\n    leftButton?: ReactElement,\r\n    titleView: ReactElement,\r\n    bottomView: ReactElement\r\n}> = (props) => {\r\n    return <div className=\"belief\">\r\n        <div className=\"horizontal badger\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {props.data.icon}\r\n                </div>\r\n                {\r\n                    props.leftButton\r\n                }\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">\r\n                    {\r\n                        props.titleView\r\n                    }\r\n                    {\r\n                        props.cost ? \r\n                        <span className=\"pull-r\">{props.cost}🧠</span>\r\n                        : null\r\n                    }\r\n                </div>\r\n                {\r\n                props.data.description ? props.data.description.split(';').map((x, i) => \r\n                    <small className=\"marg-b-6\" key={i}> {x}\r\n                    </small>\r\n                    ) : null\r\n                }\r\n                <div className=\"grow-1 text-center\">\r\n                    {\r\n                       props.bottomView\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const EditBeliefInput: React.FC<{\r\n    data: IBeliefData,\r\n    frozen?: boolean,\r\n    divergent?: boolean,\r\n    available: number,\r\n    cost: number,\r\n    wash: () => void,\r\n    extract: () => void,\r\n}> = (props) => {\r\n    return <div className=\"belief\">\r\n        <div className=\"horizontal edit badger\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {props.data.icon}\r\n                </div>\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">\r\n                    <strong title={props.data.description} className={props.divergent ? 'divergent marg-r-6': 'marg-r-6'}>\r\n                        {props.data.noun}\r\n                    </strong>\r\n                    <span className=\"pull-r\">{props.cost}🧠</span>\r\n                </div>\r\n                <small className=\"marg-b-6\">{props.data.description}</small>\r\n                <div className=\"grow-1 text-center\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"horizontal\">\r\n            {\r\n                props.frozen ? null : <ConfirmButton className=\"callout pad-4 marg-0\"\r\n                    confirmText={'-'+props.cost.toString()+'🧠?'} disabled={props.available < props.cost} onConfirm={props.wash}>\r\n                🚿 <small>Wash Out</small>\r\n                </ConfirmButton>\r\n            }\r\n            {\r\n                <ConfirmButton className=\"callout pad-4 marg-0\"\r\n                    confirmText={'-'+props.cost.toString()+'🧠?'} disabled={props.available < props.cost} onConfirm={props.extract}>\r\n                💎 <small>Copy to Gem</small>\r\n                </ConfirmButton>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst SortedBeliefs = BeliefsAll.slice().sort((a, b) => a.localeCompare(b));\r\nexport class AddBeliefInput extends React.Component<{\r\n    available: number,\r\n    cost: number,\r\n    add: (b: TraitBelief) => void\r\n}, {\r\n    belief: TraitBelief,\r\n}>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            belief: 'Neuroticism'\r\n        }\r\n    }\r\n    render(){\r\n        const data = SecondaryBeliefData[this.state.belief]\r\n        return <div className=\"belief\"><div className=\"horizontal badger add\">\r\n            <div className=\"vertical\">\r\n                <div className=\"circular\">\r\n                    {data.icon}\r\n                </div>\r\n                <ConfirmButton className=\"callout grow-0 pad-4 marg-0\" disabled={this.props.available < this.props.cost} \r\n                    confirmText={'-'+this.props.cost.toString()+'🧠?'} onConfirm={() => this.props.add(this.state.belief)}>\r\n                    💉 <small>Implant</small>\r\n                </ConfirmButton>\r\n            </div>\r\n            <div className=\"vertical\">\r\n                <div className=\"text-center\">                    \r\n                    <StringDropdown titleCase={true}\r\n                    options={SortedBeliefs} \r\n                    value={this.state.belief}\r\n                    onChange={(a: string) => {\r\n                        this.setState({belief: a as TraitBelief})\r\n                    }}\r\n                    ></StringDropdown>\r\n                    <span className=\"pull-r\">{this.props.cost}🧠</span>\r\n                </div>\r\n                <small className=\"marg-b-6\">{data.description}</small>\r\n                <div className=\"grow-1 text-center\">\r\n                    {\r\n                        (data.idealPro || []).map((x) => <span className=\"pos badge align-mid\" key={x}>+{TraitIcon[x]}</span>)\r\n                    }\r\n                    {\r\n                        (data.idealCon || []).map((x) => <span className=\"neg badge align-mid\" key={x}>-{TraitIcon[x]}</span>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div></div>\r\n    }\r\n}","import React from \"react\";\r\nimport { BeanBelievesIn, BeanGetFace } from \"../simulation/Bean\";\r\nimport { NarrativeBeliefData, SecondaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { HasResearched } from \"../simulation/Player\";\r\nimport { acknowledgeNewInsanity, extractBelief, implant, washBelief, washNarrative } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean } from \"../state/state\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { EmoteIcon } from \"../World\";\r\nimport { BeliefWidget, EditBeliefInput } from \"./BeliefRow\";\r\nimport './modals.css';\r\n\r\nexport const TraitInventoryList: React.FC<{\r\n    dogmatic: boolean,\r\n    beanKey: number\r\n}> = (props) => {\r\n    const beliefInventory = useAppSelector(x => x.world.alien.beliefInventory);\r\n    const dispatch = useAppDispatch();\r\n    return <>\r\n        {beliefInventory.map((x) => <BeliefWidget \r\n        key={x.trait} data={SecondaryBeliefData[x.trait]} titleView={<strong>{SecondaryBeliefData[x.trait].noun}</strong>}\r\n        leftButton={\r\n            <ConfirmButton onConfirm={() => dispatch(implant({beanKey: props.beanKey, trait: x.trait}))} className=\"callout marg-0\" confirmText=\"-1 🧠?\" disabled={x.gems < 1 || props.dogmatic}>\r\n                Implant\r\n            </ConfirmButton>\r\n        }\r\n        bottomView={<span><span className=\"trait-gem\"></span>x{x.gems}</span>}>\r\n        </BeliefWidget>)}\r\n    </>\r\n};\r\n\r\nexport const BrainwashingContent: React.FC<{\r\n}> = () => {\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const isScanned = useAppSelector(s => bean?.key != null && s.world.alien.scanned_bean[bean.key]);\r\n    const difficulty = useAppSelector(s => s.world.alien.difficulty);\r\n    const techProgress = useAppSelector(s => s.world.alien.techProgress);\r\n    const insanityEvent = useAppSelector(s => s.world.insanityEvent);\r\n    const dispatch = useAppDispatch();\r\n    const sanityCostBonus = HasResearched(techProgress, 'sanity_bonus') ? -1 : 0;\r\n    if (bean == null) return <div></div>;\r\n    const dogmatic = BeanBelievesIn(bean, 'Dogmatism');\r\n    const brains = [];\r\n    for (let i = 1; i < 11; i++) {\r\n        brains.push(bean.discrete_sanity >= i ? '🧠': '😵');\r\n    }\r\n    return <div>\r\n        <div className=\"horizontal fancy-header\">\r\n            <div>\r\n            🧠🚿 BRAINWASH\r\n            </div>\r\n            <div>\r\n                <strong>{BeanGetFace(bean)} {bean.name}</strong>\r\n            </div>\r\n            <div>\r\n                <table className=\"trait-measure\">\r\n                    <tbody>\r\n                    <tr>\r\n                        {\r\n                            brains.map((x, i) => <td key={i} className={x === '😵' ? 'grey' : ''}>{x}</td>)\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan={2} className=\"set-1\"><small>Psychotic</small></td>\r\n                        <td colSpan={2} className=\"set-2\"><small>Disturbed</small></td>\r\n                        <td colSpan={3} className=\"set-3\"><small>Stressed</small></td>\r\n                        <td colSpan={3} className=\"set-4\"><small>Sane</small></td>\r\n                        <td></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <p className=\"pad-4p text-center\">\r\n            {\r\n                bean.sanity != 'sane' ?\r\n                    <small>Brainwashing subjects with low sanity 🧠 has a 🎲 to add extremely negative traits!</small>\r\n                : null\r\n            }\r\n        </p>\r\n        {\r\n            insanityEvent && insanityEvent.beanKey === bean.key ? <div className=\"pad-4p text-center red-alert\">\r\n                <h2>\r\n                    {bean.name} is inflicted with {SecondaryBeliefData[insanityEvent.newInsanity].icon} {SecondaryBeliefData[insanityEvent.newInsanity].noun} due to brainwashing!\r\n                    <button onClick={() => dispatch(acknowledgeNewInsanity())}>❌</button>\r\n                </h2>\r\n            </div> : null\r\n        }\r\n        <div style={{clear: 'both'}}>\r\n            {\r\n                dogmatic ? <div className=\"text-center\">\r\n                    🐶 Dogmatic subjects cannot change their minds\r\n                </div> : null\r\n            }\r\n            { isScanned ? <div className=\"horizontal scroll\">\r\n                <EditBeliefInput\r\n                    available={bean.discrete_sanity} frozen={dogmatic}\r\n                    wash={() => dispatch(washNarrative({beanKey: bean.key, faith:bean.faith}))} \r\n                    extract={() => {\r\n                        \r\n                    }} \r\n                    cost={difficulty.cost.bean_brain.brainwash_ideal.sanity || 0}\r\n                    data={NarrativeBeliefData[bean.faith]}\r\n                ></EditBeliefInput>\r\n                {\r\n                    bean.beliefs.map((b) => <EditBeliefInput key={b}\r\n                    available={bean.discrete_sanity} frozen={dogmatic && b != 'Dogmatism'}\r\n                    divergent={false}\r\n                    wash={() => dispatch(washBelief({beanKey: bean.key, trait: b}))} \r\n                    extract={() => dispatch(extractBelief({beanKey: bean.key, trait: b}))} \r\n                        cost={(difficulty.cost.bean_brain.brainwash_secondary.sanity || 0) + sanityCostBonus}\r\n                        data={SecondaryBeliefData[b]}\r\n                    >\r\n                    </EditBeliefInput>)\r\n                }\r\n            </div> : <div className=\"text-center\">🛰️ Scan this subject to reveal its Traits! </div>}\r\n            <h3 className=\"pad-4p\">\r\n                <span className=\"trait-gem\"></span> Trait Gems\r\n            </h3>\r\n            <div className=\"horizontal scroll\">\r\n                <TraitInventoryList beanKey={bean.key}\r\n                    dogmatic={dogmatic}></TraitInventoryList>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nexport const Subtabs: React.FC<{\r\n    additionalClasses?: string,\r\n    active: string,\r\n    options: {icon: string, value: string, text: string, onClick: () => void}[]    \r\n}> = (props) => {\r\n\r\n    return <div className={'horizontal blue-orange cylinder f-size-125em marg-t-20'+(props.additionalClasses||'')}>\r\n        {\r\n            props.options.map((x) => <button type=\"button\" key={x.value} onClick={() => x.onClick()}  className={props.active === x.value ? 'active': ''}>\r\n                {x.icon} {x.text}\r\n            </button>)\r\n        }\r\n    </div>\r\n}","\r\nexport type TitleHeadwear = '👑'|'👒'|'🎩'|'🎓'|'🧢';\r\nexport type TitleBadge = '⭐'|'🛡️'|'⚖️'|'📋'|'🏅'|'🎀'|'🌸';\r\nexport type TitlePrivilege = 'social_deference'|'criminal_immunity'|'tax_exemption'|'hereditary'|'gentility';\r\nexport const PrivilegeData = {\r\n    social_deference: {\r\n        description: '🎲 that nearby subjects emit 💢; 🎲 that this subject gains 👍'\r\n    },\r\n    criminal_immunity: {\r\n        description: 'This subject will never be penalized due to crime.'\r\n    }, \r\n    tax_exemption: {\r\n        description: 'This subject will never pay taxes.'\r\n    }, \r\n    hereditary: {\r\n        description: 'Children of this subject automatically gain this title.'\r\n    }, \r\n    gentility: {\r\n        description: 'This subject will not work but will still be paid.'\r\n    }\r\n};\r\n\r\nexport interface ITitle{\r\n    key: number;\r\n    name: string;\r\n    headwear?: TitleHeadwear;\r\n    badge?: TitleBadge;\r\n    privileges: Array<TitlePrivilege|undefined>;\r\n}","import React, { useState } from \"react\";\r\nimport { Subtabs } from \"../chrome/Subtab\";\r\nimport { ITitle, TitleBadge, TitleHeadwear, TitlePrivilege, PrivilegeData } from \"../simulation/Titles\";\r\nimport { addTitle, editTitle } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\n\r\nexport const SocietyPanel: React.FC<{\r\n\r\n}> = (props) => {\r\n    const titles = useAppSelector(s => s.world.titles.allIDs.reduce( (all, id)=>{all.push(s.world.titles.byID[id]); return all;}, [] as ITitle[]));\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"pad-4p\">\r\n        <Subtabs active={'titles'} options={[{icon: '👑',text:'Titles',value:'titles',onClick:() => {}},{icon:'🔖',text:'Names',value:'names',onClick:() => {}}]}></Subtabs>\r\n        {/* <div className=\"subheader\">\r\n            <h3>Other</h3>\r\n        </div>\r\n        <div>\r\n\r\n        </div> */}\r\n        <div className=\"subheader\">\r\n            <h2>\r\n                👑 Titles\r\n                <button \r\n                    className=\"callout marg-0 pull-r\"\r\n                    onClick={() => {\r\n                        dispatch(addTitle({}));\r\n                    }}\r\n                >➕ Title</button>\r\n            </h2>\r\n        </div>\r\n        <div className=\"title-row\">\r\n            {\r\n                titles.map(y => <TitleEdit key={y.key} title={y} onEdit={(t) => {\r\n                    dispatch(editTitle({newT: t}))\r\n                }}></TitleEdit>)\r\n            }\r\n            {\r\n                titles.length === 0 ? <div>\r\n                    <p>\r\n                    <i>No Titles</i>\r\n                    </p>\r\n                    <p>\r\n                        Titles are cosmetic items and privileges that can be awarded to subjects.\r\n                    </p>\r\n                </div> : null\r\n            }\r\n        </div>\r\n      </div>\r\n}\r\n\r\n\r\nexport const TitleEdit: React.FC<{\r\n    title: ITitle,\r\n    onEdit: (newT: ITitle) => void\r\n}> = (props) => {\r\n    return <div className=\"title-box\">\r\n        <div>\r\n            <label>\r\n                Title:&nbsp;\r\n                <input type=\"text\" value={props.title.name} onChange={(ev) => props.onEdit({...props.title, name: ev.target.value})} />\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <label>\r\n                Headwear:&nbsp;\r\n                <select value={props.title.headwear} onChange={(e) => props.onEdit({\r\n                    ...props.title,\r\n                    headwear: e.target.value as TitleHeadwear\r\n                })}>\r\n                    <option value={undefined}>None</option>\r\n                    <option value='👑'>👑</option>\r\n                    <option value='👒'>👒</option>\r\n                    <option value='🎩'>🎩</option>\r\n                    <option value='🎓'>🎓</option>\r\n                    <option value='🧢'>🧢</option>\r\n                </select>\r\n            </label>\r\n            <label>\r\n                &nbsp;Badge:&nbsp;\r\n                <select value={props.title.badge} onChange={(e) => props.onEdit({\r\n                    ...props.title,\r\n                    badge: e.target.value as TitleBadge\r\n                })}>\r\n                    <option value={undefined}>None</option>\r\n                    <option value='⭐'>⭐</option>\r\n                    <option value='🛡️'>🛡️</option>\r\n                    <option value='⚖️'>⚖️</option>\r\n                    <option value='📋'>📋</option>\r\n                    <option value='🏅'>🏅</option>\r\n                    <option value='🎀'>🎀</option>\r\n                    <option value='🌸'>🌸</option>\r\n                </select>\r\n            </label>\r\n        </div>\r\n        <h3>\r\n            Privileges\r\n            <button \r\n                className=\"callout marg-0 pull-r\"\r\n                onClick={() => {\r\n                    const c = props.title.privileges.slice();\r\n                    c.push(undefined);\r\n                    props.onEdit({...props.title, privileges: c})\r\n                }}\r\n            >➕ Privilege</button>\r\n        </h3>\r\n        {\r\n            props.title.privileges.map((p,i) => <div key={p}>\r\n                <select key={i} value={p} onChange={(ev) => {\r\n                    const newArray = props.title.privileges.slice();\r\n                    if (ev.target.value === 'None'){\r\n                        newArray.splice(i, 1);\r\n                    } else {\r\n                        newArray.splice(i, 1, ev.target.value as TitlePrivilege);\r\n                    }\r\n                    props.onEdit({...props.title, privileges: newArray})\r\n                }}>\r\n                    <option value={undefined}>None</option>\r\n                    <option value={'social_deference'}>Social Deference</option>\r\n                    <option value={'criminal_immunity'}>Criminal Immunity</option>\r\n                    <option value={'tax_exemption'}>Tax Exemption</option>\r\n                    <option value={'hereditary'}>Hereditary</option>\r\n                    <option value={'gentility'}>Gentility</option>\r\n                </select>\r\n                {\r\n                    (p != null && PrivilegeData[p]) ? <div>{PrivilegeData[p].description}</div> : null\r\n                }\r\n            </div>)\r\n        }\r\n    </div>\r\n}","import { BuildingTypes } from \"../simulation/Geography\";\r\nimport { Trait } from \"../World\";\r\n\r\nexport const keyToName: { [key in Trait | BuildingTypes]: string } = {\r\n    state: 'Collectivist', ego: 'Independent',\r\n    trad: 'Elitist', prog: 'Progressive',\r\n    circle: 'Brunette', square: 'Blonde', triangle: 'Redhead',\r\n    rocket: 'Futuristic', dragon: 'Mythical', music: 'Dramatic', noFaith: 'Nihilistic',\r\n    starving: 'Starving', hungry: 'Hungry', sated: 'Sated', stuffed: 'Stuffed',\r\n    homeless: 'Homeless', sleepy: 'Sleepy', awake: 'Awake', rested: 'Rested',\r\n    sick: 'Sick', sickly: 'Sickly', bruised: 'Bruised', fresh: 'Robust',\r\n    sane: 'Sane', stressed: 'Confused', disturbed: 'Disturbed', 'psychotic': 'Psychotic',\r\n    housed: 'Housed',\r\n    house: 'House', hospital: 'Hospital', farm: 'Farm', theater: 'Theater', church: 'Church', courthouse: 'Courthouse', park: 'Park', nature: 'Elysian Scenery'\r\n  };","import React from \"react\";\r\nimport { Trait } from \"../World\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { IBean } from \"../simulation/Agent\";\r\n\r\nexport class NeedReadout extends React.Component<{\r\n    beans: IBean[], \r\n    need: (b: IBean) => Trait, \r\n    dire: Trait, \r\n    abundant: Trait,\r\n    className?: string}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    header(){\r\n        if (this.props.children){\r\n            return <b>{this.props.children}</b>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    render(){\r\n        const dire = this.props.beans.filter(b => this.props.need(b) == this.props.dire).length;\r\n        const dire_style = {\r\n            width: Math.floor((dire / this.props.beans.length)*100)+'%'\r\n        }\r\n        const full = this.props.beans.filter(b => this.props.need(b) == this.props.abundant).length;\r\n        const full_style = {\r\n            width: Math.floor((full / this.props.beans.length)*100)+'%'\r\n        }\r\n        return (                \r\n        <div className={this.props.className}>\r\n            {this.header()}\r\n            {/* <span>{keyToName[this.props.report.winner]}</span> */}\r\n            <div className=\"bar\">\r\n                <div className=\"bar-inner dire\" style={dire_style}>\r\n                    {(dire > 0 ? `${dire} ${keyToName[this.props.dire]}`: '')}\r\n                </div>\r\n                <div className=\"bar-inner abundant\" style={full_style}>\r\n                    {full > 0 ? full : ''}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","\r\nimport React from \"react\";\r\nimport { TraitJob } from \"../World\";\r\nimport { NeedReadout } from \"../widgets/NeedReadout\";\r\nimport { GetCostOfLiving, IListing } from \"../simulation/Economy\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { selectBeansByCity } from \"../state/features/world.reducer\";\r\n\r\nfunction median(values: Array<number>){\r\n  if(values.length ===0) return 0;\r\n\r\n  values.sort(function(a,b){\r\n    return a-b;\r\n  });\r\n\r\n  var half = Math.floor(values.length / 2);\r\n\r\n  if (values.length % 2)\r\n    return values[half];\r\n\r\n  return (values[half - 1] + values[half]) / 2.0;\r\n}\r\n\r\nexport const EconomyReport: React.FC<{}> = () => {\r\n    const beans = useAppSelector(s => selectBeansByCity(s.world, 0));\r\n    const economy = useAppSelector(s => s.world.economy);\r\n    const numDwellings = useAppSelector(s => s.world.dwellings.allIDs.length);\r\n    const food_median = median(beans.map(x => x.discrete_food));\r\n    const health_median = median(beans.map(x => x.discrete_health)).toFixed(1);\r\n    const shelter_median = median(beans.map(x => x.discrete_stamina)).toFixed(1);\r\n    const wealth_total = beans.reduce((sum, y) => sum + y.cash, 0);\r\n    const wealth_avg = wealth_total / (beans.length || 1);\r\n    const wealth_median = median(beans.map(x => x.cash));\r\n    const wealth_dire = beans.filter(x => x.cash < 1).length;\r\n    const wealth_marker = Math.max(wealth_avg, wealth_median);\r\n    const wealthy = beans.filter(x => x.cash > wealth_marker);\r\n    const wealthy_percentage = (wealthy.length / (beans.length || 1)) * 100;\r\n    const wealthy_ownership = (wealthy.reduce((s, x) => s+x.cash, 0) / wealth_total)*100;\r\n    const jobs = beans.reduce((obj, b) => {\r\n      obj[b.job] = (obj[b.job] || 0)+1;\r\n      return obj;\r\n    }, {} as {[key in TraitJob]: number});\r\n    const unemployed = (((jobs.jobless || 0) / beans.length)*100).toFixed(1);\r\n    function reducer(obj:  {supply: number, price: number, avg: number, count: number}, l: IListing){\r\n      obj.supply += l.quantity;\r\n      obj.price += l.price;\r\n      obj.count++;\r\n      obj.avg = obj.price / obj.count;\r\n      return obj;\r\n    }\r\n    const food = economy.market.listings['food'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    const meds = economy.market.listings['medicine'].reduce(reducer, {supply: 0, price: 0, avg: 0, count: 0});\r\n    return (\r\n      <div>\r\n        <div className=\"pad-4p\">\r\n          <h2>State of the Utopia</h2>\r\n        </div>\r\n        {/* <div className=\"pad-4p\">\r\n          <h3>Subject's Health</h3>\r\n        </div> */}\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>🍞 Food Security</strong>\r\n            <NeedReadout beans={beans} need={(b) => b.food} dire=\"hungry\" abundant=\"stuffed\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {food_median.toFixed(1)} 🍞</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {food.supply} 🍞 @ ${food.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.food} 🍞\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div>\r\n            <strong>🩺 Healthcare</strong>\r\n            <NeedReadout beans={beans} need={(b) => b.health} dire=\"sick\" abundant=\"fresh\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {health_median} 🩺</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {meds.supply} 🩺 @ ${meds.avg.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Deficit: {economy.unfulfilledMonthlyDemand.medicine} 🩺\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>🏡 Housing</strong> <br/>\r\n            <NeedReadout beans={beans} need={(b) => b.housing} dire=\"homeless\" abundant=\"housed\" className=\"big\"></NeedReadout>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Median {shelter_median} 🏡</td>\r\n                  <td className=\"text-center\">\r\n                    Supply: {numDwellings} 🏡\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"pad-4p\">\r\n          <h3>Economic Health</h3>\r\n        </div> */}\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <strong>💰 Wealth</strong> <br/>\r\n            {wealth_dire} penniless citizens &nbsp; &nbsp; Cost of Living: ${GetCostOfLiving(economy).toFixed(2)} <br/>\r\n            <table className=\"width-100p\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>Total ${wealth_total.toFixed(2)}</td>\r\n                  <td className=\"text-center\">\r\n                    Median: ${wealth_median.toFixed(2)} \r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    Avg: ${wealth_avg.toFixed(2)}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            Top {wealthy_percentage.toFixed(1)}% of subjects own {wealthy_ownership.toFixed(1)}% of the wealth\r\n          </div>\r\n          <span>\r\n            <strong>Unemployment</strong> {unemployed}% ({jobs.jobless})<br/>\r\n            <ul className=\"boxes\">\r\n              <li>{jobs.farmer || 0} farmers</li>\r\n              <li>{jobs.builder || 0} builders</li>\r\n              <li>{jobs.doc || 0} doctors</li>\r\n              <li>{jobs.entertainer || 0} entertainers</li>\r\n            </ul>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }","import React from 'react';\r\n\r\nexport const EscapeMenu: React.FC<{}> = (props) => {\r\n    return <div>\r\n        \r\n    </div>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nexport const TreasuryReport: React.FC<{\r\n\r\n}> = (props) => {\r\n    const coin = useAppSelector(s => s.world.law.cash);\r\n\r\n    return <div className=\"pad-4p\">\r\n        <div>\r\n            <strong>💰 Treasury: {coin.toFixed(2)}</strong>\r\n        </div>\r\n    </div>\r\n}","import React, { useState } from \"react\";\r\nimport { SecondaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { IsLaw, LawData, LawGroup, LawKey, PlayerCanSeePrereqs, PlayerKnowsPrereq, PlayerMeetsPrereqs, PrereqKey, PrereqString } from \"../simulation/Government\";\r\nimport { BeliefInventory } from \"../simulation/Player\";\r\nimport { enactLaw, repealLaw } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { TreasuryReport } from \"../widgets/TreasuryReport\";\r\n\r\nexport const GovernmentPanel: React.FC<{\r\n}> = (props) => {\r\n    const [view, setView] = useState<LawGroup|'funds'>('Welfare');\r\n    return <div>\r\n        <div className=\"col-2\">\r\n            <h2 className=\"marg-b-0\">Utopia Government</h2>\r\n            <div>\r\n                <div className=\"horizontal blue-orange cylinder f-size-125em marg-t-20\">\r\n                    <button type=\"button\" onClick={() => setView('Welfare')} className={view === 'Welfare' ? 'active' : ''}>\r\n                        🤲 Welfare\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('Crime')} className={view === 'Crime' ? 'active' : ''}>\r\n                        🚨 Crime\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('Taxation')} className={view === 'Taxation' ? 'active' : ''}>\r\n                        💰 Taxes\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => setView('funds')} className={view === 'funds' ? 'active' : ''}>\r\n                        💸 Funds\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {\r\n            view === 'funds' ? <div className=\"col-2\">\r\n                <div>\r\n                    <TreasuryReport></TreasuryReport>\r\n                </div>\r\n                <div>\r\n                </div>\r\n            </div> : <LawDetailList \r\n                group={view}\r\n            ></LawDetailList>\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\nexport const LawDetailList: React.FC<{\r\n    group: LawGroup\r\n}> = (props) => {\r\n    const laws = Object.values(LawData).filter(x => x.group === props.group);\r\n    const seenBeliefs = useAppSelector(s => s.world.alien.seenBeliefs);\r\n    const beliefs = useAppSelector(s => s.world.alien.beliefInventory);\r\n    const law = useAppSelector(s => s.world.law);\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"pad-4p\">\r\n        <strong>{props.group} Laws</strong>\r\n        <div className=\"horizontal scroll\">\r\n        {\r\n            laws.map((x) => <LawFormula seenBeliefs={seenBeliefs} id={x.key} beliefs={beliefs} key={x.key} enacted={IsLaw(law, x.key)}\r\n                enactLaw={(lKey) => dispatch(enactLaw({lawKey: lKey}))} revokeLaw={(l) => dispatch(repealLaw({lawKey: l}))}>\r\n            </LawFormula>)\r\n        }\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport const LawFormula: React.FC<{\r\n    id: LawKey,\r\n    seenBeliefs: {[belief: string]: boolean},\r\n    beliefs: BeliefInventory[],\r\n    enacted: boolean,\r\n    enactLaw: (l: LawKey) => void\r\n    revokeLaw: (l: LawKey) => void\r\n}> = (props) => {\r\n    const law = LawData[props.id];\r\n    const canSeeName = PlayerCanSeePrereqs(law.prereqs, props.seenBeliefs);\r\n    const unlocked = PlayerMeetsPrereqs(law.prereqs, props.seenBeliefs);\r\n    return <div className=\"vertical law-formula\">\r\n        <div className=\"horizontal\">\r\n            <div className=\"circular\">\r\n                {canSeeName ? law.icon : '❔'}\r\n            </div>\r\n            <div>\r\n                <strong>\r\n                    {canSeeName ? law.name : 'Unknown'}\r\n                </strong>\r\n                <div>\r\n                    {\r\n                        canSeeName ? <small> {law.description} </small> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"vertical\">\r\n            {\r\n                law.prereqs.map((x) => {\r\n                    const has = PlayerKnowsPrereq(x, props.seenBeliefs);\r\n                    const key = PrereqKey(x);\r\n                    return !has ? <span className=\"law-formula-ingredient unknown\" key={key}>\r\n                        ❔ Unknown\r\n                    </span> : <span className=\"law-formula-ingredient\" key={key}>\r\n                        {PrereqString(x)}\r\n                    </span>\r\n                })\r\n            }\r\n        </div>\r\n        {\r\n            props.enacted ? <button className=\"callout\"  onClick={() => props.revokeLaw(props.id)}>\r\n                🗑️&nbsp;Revoke Active Law\r\n            </button> : <button className=\"callout\" disabled={!unlocked} onClick={() => props.enactLaw(props.id)}>\r\n                {\r\n                    unlocked ? '✒️' : <span className=\"grey\">🔒</span>\r\n                }\r\n                &nbsp;Enact\r\n            </button>\r\n        }\r\n        {props.children}\r\n    </div>;\r\n}","import React from 'react';\r\nimport { EmoteIcon } from '../World';\r\n\r\nexport const GreetingPanel: React.FC<{\r\n    seed: string,\r\n    changeSeed: (s: string) => void\r\n}> = (props) => {\r\n    return <div>\r\n        <div className=\"col-2\">\r\n            <div>\r\n                <h3>Welcome to the</h3>\r\n                <h2>👽 Alien 🌍 Utopia 🔬 Laboratory</h2>\r\n                <div>\r\n                    Thank you for joining the <select><option>Human</option></select> Cultivation Division of the <strong>🌌&nbsp;Galactic Xenosensation Federation!</strong> Interdimensional petri dish <span style={{whiteSpace:'nowrap'}}>#<input type=\"text\" value={props.seed} onChange={(e) => props.changeSeed(e.currentTarget.value)} maxLength={19} style={{width:'115px', fontFamily:'monospace', fontSize:'11px'}} /></span> is ready for farming.\r\n                </div>\r\n                <p>\r\n                    As a <select><option>Human Emotion Farmer</option></select>, you are required to execute the following duties:\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        Construct <strong>🏠 Buildings</strong> for your <select><option>Human</option></select> subjects.\r\n                    </li>\r\n                    <li>\r\n                        <strong>🛸 Beam In</strong> <select><option>Human</option></select> subjects for cultivation.\r\n                    </li>\r\n                    <li>\r\n                        Harvest your subject's positive <strong>{EmoteIcon['happiness']} Hedons</strong>.\r\n                    </li>\r\n                    <li>\r\n                        Sell the Hedons on the <br/><strong>🌌 Galactic 😨 Emotion 💰 Market</strong>.\r\n                    </li>\r\n                </ul>\r\n                <div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <p>\r\n                    The GXF's records indicate <select><option>Humans</option></select> are a<br/><u>mentally malleable</u> and <u>physically fragile</u> species. Try the following cultivation methods:\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        <strong>🛰️ Scan</strong> your subject's primitive minds for information on what pleases them.\r\n                    </li>\r\n                    <li>\r\n                        <strong>🚿 Brainwash</strong> subjects to change their <strong>🧠&nbsp;Traits</strong>. Try to add Traits that emit more <strong>{EmoteIcon['happiness']}&nbsp;Hedons</strong>.\r\n                    </li>\r\n                    <li>\r\n                        Avoid letting your subjects die or endure pain; this makes <strong>{EmoteIcon['unhappiness']}&nbsp;Antihedons</strong> which are less profitable.\r\n                    </li>\r\n                    <li>\r\n                        Use your knowledge of Traits to modify the farm's <strong>🗳️&nbsp;Government</strong> to maximize Hedon generation.\r\n                    </li>\r\n                    <li>\r\n                        Use the GXF's <strong>🧪 Research Lab</strong> to upgrade your farm, when stocked with <strong>👾 Abducted</strong> subjects.\r\n                    </li>\r\n                </ul>\r\n                <h3>\r\n                    🌌 Galactic Xenosensation Federation <br/>\r\n                    <div className=\"text-right\">\r\n                        <small>\r\n                        {/* <i>THE market leader in corporeal sensations.</i> */}\r\n                        <i>1 trillion sensations. 100% organic. 100% gourmet.</i>\r\n                        </small>\r\n                    </div>\r\n                </h3>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nexport const LoadGameMenu: React.FC<{}> = (props) => {\r\n    return <div>\r\n        \r\n    </div>\r\n}","import React, { useState } from 'react';\r\nimport { GameStorageInstance } from '../GameStorage';\r\n\r\nexport const MainMenu: React.FC<{\r\n    startGame: () => void,\r\n    loadGame: (slot:number) => void\r\n}> = (props) => {\r\n    const [view, setView] = useState<'main'|'showslots'>('main');\r\n    const continueID = GameStorageInstance.HasContinueGame();\r\n    const slots = GameStorageInstance.GetGameSlots();\r\n    return <div>\r\n        <h1 className=\"text-center\">👽 Alien 🌍 Utopia 🔬 Lab</h1>\r\n        {\r\n            (view === 'main') ? <div>\r\n                {\r\n                    continueID != null ? <div className=\"text-center\">\r\n                        <button className=\"callout button f-size-15em\" onClick={() => props.loadGame(continueID)}>\r\n                        🧫 Continue Game\r\n                        </button>\r\n                    </div>: null\r\n                }\r\n                <div className=\"text-center\">\r\n                    <button className=\"callout button f-size-15em\" onClick={() => props.startGame()}>\r\n                    🛸 Start New Game\r\n                    </button>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <button className=\"callout button f-size-15em\" onClick={() => setView('showslots')} disabled={slots.every(x => x.brief == null)}>\r\n                    🗂️ Load Game\r\n                    </button>\r\n                </div>\r\n            </div> : <div className=\"card-parent vertical load-menu pad-4p\">\r\n                {\r\n                    slots.map(x => <div key={x.id} className=\"card marg-b-20\">\r\n                        <button disabled={x.brief == null} className=\"\" onClick={() => {\r\n                            if (x.brief)\r\n                                props.loadGame(x.id);\r\n                        }}>\r\n                        {\r\n                            x.brief ? <span className=\"f-size-125em\">\r\n                                <strong>{x.brief.Name}</strong>\r\n                                &nbsp;<span>Year {x.brief.Age.year}</span>\r\n                                &nbsp;<span>{x.brief.Population} 😐</span>\r\n                            </span> : <span className=\"f-size-125em\">\r\n                                Slot {x.id}\r\n                            </span> \r\n                        }\r\n                        </button>\r\n                    </div>)\r\n                }\r\n            </div>\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport class RobotArm extends React.Component<{\r\n    tool: string,\r\n    classN: string\r\n}, {\r\n\r\n}> {\r\n    render(){\r\n        const style = {};\r\n        return <svg width=\"100\" height=\"300\" xmlns=\"http://www.w3.org/2000/svg\" style={style} className={this.props.classN+\" robot-arm\"}>\r\n        <g>\r\n         <title>robotarm</title>\r\n         <rect fill=\"transparent\" id=\"canvas_background\" height=\"302\" width=\"102\" y=\"-1\" x=\"-1\"/>\r\n         <g display=\"none\" overflow=\"visible\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" id=\"canvasGrid\">\r\n          <rect fill=\"url(#gridpattern)\" strokeWidth=\"0\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\"/>\r\n         </g>\r\n        </g>\r\n        <g>\r\n         <title>Layer 1</title>\r\n         <rect id=\"svg_2\" height=\"200\" width=\"48\" y=\"91.63545\" x=\"25\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#BBBBBB\"/>\r\n         <ellipse ry=\"48\" rx=\"48\" id=\"svg_1\" cy=\"50\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#999999\"/>\r\n         <ellipse ry=\"20\" rx=\"20\" id=\"svg_3\" cy=\"50\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#444444\"/>\r\n         <ellipse ry=\"48\" rx=\"48\" id=\"svg_4\" cy=\"250\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#999999\"/>\r\n        <ellipse ry=\"20\" rx=\"20\" id=\"svg_5\" cy=\"250\" cx=\"50\" strokeWidth=\"1.5\" stroke=\"#000\" fill=\"#444444\">{this.props.tool}</ellipse>\r\n            \r\n        </g><text y=\"250\" x=\"-20\" fontSize=\"4em\">{this.props.tool}</text>\r\n       </svg>\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { IPlayerData, IPlayerTechProgress, ITechInfo, Tech, TechData, TechProgress } from \"../simulation/Player\";\r\nimport { release, setResearch } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { ConfirmButton } from \"../widgets/ConfirmButton\";\r\nimport { RobotArm } from \"../widgets/RobotArm\";\r\nimport './research.css';\r\n\r\nfunction renderTech(tech: ITechInfo, techProgress: TechProgress, currentlyResearchingTech: Tech|undefined, setResearch: (t: Tech) => void){\r\n  const unstarted = techProgress[tech.tech] == null;\r\n  const progress = unstarted ? 0 : techProgress[tech.tech].researchPoints;\r\n  const total = tech.techPoints;\r\n  const style = {width: (Math.min(progress/total*100, 100))+'%'};\r\n  const complete = progress >= total;\r\n  const isCurrent = currentlyResearchingTech === tech.tech;\r\n  const state: '⭕️'|'✅'|'🔬' = complete ? '✅' : isCurrent ? '🔬' : '⭕️';\r\n  const rootClassName = isCurrent ? 'active': 'inactive';\r\n  return <div className={\"card-parent \"+rootClassName} key={tech.tech}>\r\n    <button className=\"card button\" onClick={() => setResearch(tech.tech)}>\r\n      <strong>{tech.name}</strong>\r\n      <strong className=\"pull-r f-size-125em\">{state}</strong>\r\n      <div>\r\n        {tech.description}\r\n      </div>      \r\n      <div className=\"bar f-size-12 h-12\">\r\n          <div className=\"bar-inner text-center\" style={style}>\r\n          </div>\r\n          {progress}/{total} tech\r\n      </div>\r\n    </button>\r\n  </div>\r\n}\r\n\r\nconst tools = [\r\n'📡',\r\n'🗜️',\r\n'🔬',\r\n'💉',\r\n'🔎',\r\n'🧼',\r\n'🧲',\r\n'🎥',\r\n'🔧',\r\n];\r\nfunction loop(lastI: number){\r\n  let i = lastI + 1;\r\n  if (i === tools.length)\r\n    i = 0;\r\n  return i;\r\n}\r\nexport const ResearchPanel: React.FC<{}> = () => {\r\n  const abductedBeanKeys = useAppSelector(x => x.world.alien.abductedBeanKeys);\r\n  const techProgress = useAppSelector(x => x.world.alien.techProgress);\r\n  const currentTech = useAppSelector(x => x.world.alien.currentlyResearchingTech);\r\n  const dispatch = useAppDispatch();\r\n  const [tool1, setTool1] = useState(0);\r\n  const [tool2, setTool2] = useState(3);\r\n  const [tool3, setTool3] = useState(2);\r\n  const [tool4, setTool4] = useState(1);\r\n  useEffect(() => {\r\n    const interval = window.setInterval(() => {\r\n      if (Math.random() < .51)\r\n        setTool1(loop(tool1));\r\n      if (Math.random() < .51)\r\n        setTool2(loop(tool2));\r\n      if (Math.random() < .51)\r\n        setTool3(loop(tool3));\r\n      if (Math.random() < .51)\r\n        setTool4(loop(tool4));\r\n    }, 1000);\r\n    return () => {\r\n      window.clearInterval(interval);\r\n    }\r\n  });\r\n  const techs = Object.values(TechData);\r\n  return <div>\r\n      <div className=\"col-2\">\r\n        <div>\r\n          <h2>Research 🧪 Lab</h2>\r\n          <div className=\"vertical\">\r\n            {\r\n              techs.map((t) => renderTech(t, techProgress, currentTech, (t) => dispatch(setResearch({t: t}))))\r\n            }\r\n          </div>\r\n        </div>\r\n      <div className=\"vertical\">\r\n        <div>\r\n          <div className=\"robot\">\r\n            🤖\r\n            <RobotArm classN=\"far-left\" tool={tools[tool1]}></RobotArm>\r\n            <RobotArm classN=\"left\" tool={tools[tool2]}></RobotArm>\r\n            <RobotArm classN=\"near-right\" tool={tools[tool3]}></RobotArm>\r\n            <RobotArm classN=\"far-right\" tool={tools[tool4]}></RobotArm>\r\n          </div>\r\n        </div>\r\n        <div className=\"h-42em\">\r\n          {\r\n            abductedBeanKeys.map((b) => {\r\n              return <span key={b} className=\"victim bean triangle shake\">😨</span>\r\n            })\r\n          }\r\n        </div>\r\n\r\n        <div className=\"text-center\">\r\n          Currently probing {abductedBeanKeys.length} beings for {abductedBeanKeys.length} tech a day\r\n          <p>\r\n            <small>1 tech per research subject per day</small>\r\n          </p>\r\n        </div>\r\n        {\r\n          abductedBeanKeys.length > 0 ? <div className=\"text-right\">\r\n            <ConfirmButton className=\"callout\" onConfirm={() => {dispatch(release())}} confirmText=\"-1 Research Subject?\">\r\n            🎈 Release Research Subject\r\n            </ConfirmButton>\r\n          </div> : null\r\n        }\r\n      </div>\r\n    </div>\r\n    <div>\r\n\r\n    </div>\r\n  </div>\r\n}","import React, { ReactElement, useState } from \"react\";\r\nimport { BeliefsAll, IBeliefData, SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { BeliefWidget } from \"./BeliefRow\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\nexport const TraitsReport: React.FC = () => {\r\n  const beliefInventory = useAppSelector(x => x.world.alien.beliefInventory);\r\n  const seenBeliefs = useAppSelector(x => x.world.alien.seenBeliefs);\r\n  const [hoveredBelief, setHoveredBelief] = useState<TraitBelief>();\r\n  const beliefs: IBeliefData[] = [];\r\n  Object.keys(seenBeliefs).forEach((key) => {\r\n    if (SecondaryBeliefData[key as TraitBelief] != null){\r\n      beliefs.push(SecondaryBeliefData[key as TraitBelief]);\r\n    }\r\n  });\r\n  beliefs.sort((a, b) => a.noun.localeCompare(b.noun));\r\n  return (\r\n    <div className=\"vertical\">\r\n      <div className=\"pad-4p\">\r\n        <h2>Subject 🧠 Traits</h2>\r\n      </div>\r\n      <div className=\"col-2-30-60\">\r\n        <div>\r\n          <div className=\"scroll\">\r\n            <div className=\"scoll-sticky-h\">\r\n              <strong>\r\n                <span className=\"trait-gem\"></span>\r\n                Trait Gems\r\n              </strong>\r\n            </div>\r\n            {\r\n              beliefInventory.length < 1 ? <div>\r\n                No Trait Gems! <br/>\r\n                😵 Brainwash your subjects  <br/>\r\n                or buy from the 🛍️ Market\r\n                </div> : beliefInventory.map((x) => <div key={x.trait}>\r\n                      <div>\r\n                        <strong>\r\n                          {SecondaryBeliefData[x.trait].icon} {SecondaryBeliefData[x.trait].noun}\r\n                        </strong>\r\n                      </div>\r\n                      <div>\r\n                        This can be implanted {x.gems} more times\r\n                      </div>\r\n                    </div>)\r\n            }\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"modal-scroll-v\">\r\n            <div className=\"sticky-t-0\">\r\n              <strong>Discovered {beliefs.length} of {BeliefsAll.length} Traits</strong>\r\n            </div>\r\n            {\r\n              beliefs.length < 1 ? <div>\r\n                No Traits Scanned! <br/>\r\n                🛰️ Scan some of your subjects.\r\n              </div> : beliefs.map((x) => <BeliefWidget key={x.noun} data={x} cost={0}\r\n              titleView={<strong>{x.noun}</strong>}\r\n              bottomView={<span></span>}\r\n            ></BeliefWidget>)\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { UFO } from \"../simulation/City\";\r\nimport { hex_to_pixel, origin_point, transformPoint } from \"../simulation/Geography\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { WorldSfxInstance } from \"../WorldSound\";\r\n\r\n\r\nexport const AnimatedUFO2:  React.FC<{\r\n    ufoKey: number,\r\n    cityKey: number\r\n}> = (props) => {\r\n    const [showBeam, setShowBeam] = useState(false);\r\n    const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n    const ufo = useAppSelector(state => state.world.ufos.byID[props.ufoKey]);\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShowBeam(true);\r\n            WorldSfxInstance.play('teleport');\r\n            setTimeout(() => {\r\n                setShowBeam(false)\r\n            }, 1800);\r\n        }, 1800);\r\n    }, []);\r\n    let style = {\r\n        ...transformPoint(hex_to_pixel(city.hex_size, city.petriOrigin, ufo.point))\r\n    };\r\n    return <span style={style} className=\"ufo\">\r\n        🛸\r\n        {showBeam ? <span className=\"beam\"></span> : null}\r\n    </span>\r\n}","import { ISeller } from \"./Economy\";\r\nimport { TraitGood, GoodToJob } from \"../World\";\r\nimport { Policy } from \"./Politics\";\r\nimport { Government } from \"./Government\";\r\n\r\nexport type EnterpriseType = 'company'|'co-op'|'commune';\r\nexport const EnterpriseTypes: EnterpriseType[] = ['company','co-op','commune'];\r\nexport const EnterpriseTypeIcon: {[e in EnterpriseType]: string} = {\r\n    'company': '🎩', \r\n    'co-op': '🤝', \r\n    'commune': '⚒️'\r\n};\r\n\r\nexport interface IEnterprise extends ISeller{\r\n    key: number;\r\n    cityKey: number;\r\n    buildingKey: number;\r\n    enterpriseType: EnterpriseType;\r\n    ownerBeanKey?: number;\r\n}","import React from \"react\";\r\nimport { PlayerResources, triadToString } from \"../Game\";\r\n\r\nexport class CostSmall extends React.Component<{\r\n    cost: PlayerResources,\r\n    rider?: string,\r\n    qty?: number\r\n}>{\r\n\r\n    render(){\r\n        return <small>\r\n            {triadToString(this.props.cost, '-', this.props.qty)} {this.props.rider}\r\n        </small>\r\n    }\r\n}","import React from \"react\";\r\nimport { DwellingKindToIcon } from \"../simulation/RealEstate\";\r\nimport { toTitleCase } from \"../simulation/Utils\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\nexport const DwellingList: React.FC<{\r\n    dwellingKeys: number[]\r\n}> = (props) => {\r\n    const dwellings = useAppSelector(state => props.dwellingKeys.map(y => state.world.dwellings.byID[y]));\r\n    const beanNames = useAppSelector(state => dwellings.reduce((x, d) => {\r\n        if (d.occupantKey != null)\r\n            x[d.key] = state.world.beans.byID[d.occupantKey].name;\r\n        return x;\r\n    }, {} as {[dKey: number]: string}))\r\n    return <div>\r\n        <div>\r\n            <strong>\r\n                Housing:\r\n            </strong>\r\n        </div>\r\n        {\r\n            dwellings.map((x,i) => <div key={x.key}>\r\n                {DwellingKindToIcon[x.kind]} {toTitleCase(x.kind)} #{i+1} {beanNames[x.key] || ''}\r\n            </div>)\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { Subtabs } from \"../chrome/Subtab\";\r\nimport { IDifficulty } from \"../Game\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { BuildingIcon, BuildingJobIcon, BuildingToGood, BuildingTypes, HexPoint, IDistrict } from \"../simulation/Geography\";\r\nimport { EnterpriseType, EnterpriseTypeIcon, EnterpriseTypes, IEnterprise } from \"../simulation/Institutions\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { BuildingJobs, BuildingNumOfOpenJobs, IBuilding } from \"../simulation/RealEstate\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState, selectSelectedBuilding, selectSelectedCity } from \"../state/state\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { beam, build, changeEnterprise, fireBean, selectCity, upgrade, upgradeDistrict, upgradeLoft } from \"../state/features/world.reducer\";\r\nimport { doSelectCity, doSelectDistrict, doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { BuildingJobSlot } from \"../simulation/Occupation\";\r\nimport { GoodIcon, TraitGood } from \"../World\";\r\nimport { DwellingList } from \"./DwellingList\";\r\n\r\nexport const BeamButton: React.FC<{\r\n    city: number,\r\n    hex: HexPoint,\r\n    difficulty: IDifficulty\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"card-parent\">\r\n    <button className=\"card button\" type=\"button\" onClick={() => dispatch(beam({cityKey: props.city, where: props.hex}))}>\r\n        🛸 Beam In New Subject\r\n        <CostSmall cost={props.difficulty.cost.hex.beam} rider=\"+Subject\"></CostSmall>\r\n    </button>\r\n</div>\r\n}\r\nexport const BuildPanel: React.FC<{\r\n    cityKey: number,\r\n    selectedLotKey: number|undefined,\r\n    district: IDistrict,\r\n    difficulty: IDifficulty,\r\n}> = (props) => {\r\n    const districtLots = useAppSelector(x => props.district.lots.map(y => x.world.lots.byID[y]));\r\n    const targetLot = props.selectedLotKey ?? districtLots.find(z => z.buildingKey == null)?.key;\r\n    const dispatch = useAppDispatch();\r\n    const eHex = props.difficulty.cost.emptyHex;\r\n    if (targetLot != null){\r\n        return <div>\r\n\r\n        <h3>Build:</h3>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: props.cityKey, lot: targetLot, what: 'house'}))}>\r\n                {BuildingIcon['house']} House\r\n                <CostSmall cost={eHex.build.house}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: props.cityKey, lot: targetLot, what: 'farm'}))}>\r\n                {BuildingIcon['farm']} Farm\r\n                <CostSmall cost={eHex.build.farm}></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: props.cityKey, lot: targetLot, what: 'hospital'}))}>\r\n                {BuildingIcon['hospital']} Hospital\r\n                <CostSmall cost={eHex.build.hospital}></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: props.cityKey, lot: targetLot, what: 'theater'}))}>\r\n                {BuildingIcon['theater']} Theater\r\n                <CostSmall cost={eHex.build.theater}></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" type=\"button\" onClick={\r\n                () => dispatch(build({city: props.cityKey, lot: targetLot, what: 'park'}))}>\r\n                {BuildingIcon['park']} Park\r\n                <CostSmall cost={eHex.build.park}></CostSmall>\r\n            </button>\r\n        </div>\r\n        </div>\r\n    } else {\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nexport const DistrictTypeIcon = {\r\n    urban: '⛲',\r\n    rural: '📪',\r\n    fallow: '🌳',\r\n    nature: '🏔️'\r\n}\r\nconst DistrictTypeText = {\r\n    urban: 'Urban',\r\n    rural: 'Rural',\r\n    fallow: 'Empty',\r\n    nature: 'Nature'\r\n}\r\n\r\nexport const HexPanel: React.FC<{\r\n    difficulty: IDifficulty\r\n}> = (props) => {\r\n    const districtKey = useSelector((state: RootState) => state.selected.selectedDistrictKey);\r\n    const district = useAppSelector((x) => districtKey != null ? x.world.districts.byID[districtKey]: undefined);\r\n    const lotKey = useAppSelector((x) => x.selected.selectedLotKey);\r\n    const building = useSelector(selectSelectedBuilding);\r\n    const city = useSelector(selectSelectedCity);\r\n    const dispatch = useAppDispatch();\r\n    if (city && district == null){\r\n        return <div></div>\r\n    }\r\n    else if (city && building && district){\r\n        return <HexBuildingPanel building={building} city={city} hex={district} difficulty={props.difficulty}></HexBuildingPanel>\r\n    } else if (city && district){\r\n        return <div>\r\n        <div>\r\n            <strong>{DistrictTypeIcon[district.kind]} {DistrictTypeText[district.kind]} District</strong> in <strong>{city.name}</strong>\r\n            <button type=\"button\" className=\"pull-r\" onClick={() => dispatch(doSelectCity({cityKey: city.key}))} >❌</button>\r\n        </div>\r\n        {\r\n            lotKey != null ? <span>Lot #{lotKey+1}</span> : <br/>\r\n        }\r\n        {\r\n            district.kind === 'fallow' ? <div><div className=\"card-parent\">\r\n                <button className=\"card button\" type=\"button\" onClick={\r\n                    () => dispatch(upgradeDistrict({city: city.key, district: district.key}))}>\r\n                    🚧 Develop\r\n                    <CostSmall cost={props.difficulty.cost.hex.fallow_2_rural}></CostSmall>\r\n                </button>\r\n            </div></div> : district.kind === 'rural' ? <div><div className=\"card-parent\">\r\n                <button className=\"card button\" type=\"button\" onClick={\r\n                    () => dispatch(upgradeDistrict({city: city.key, district: district.key}))}>\r\n                    🏗️ Urbanize\r\n                    <CostSmall cost={props.difficulty.cost.hex.rural_2_urban}></CostSmall>\r\n                </button>\r\n            </div></div> : null\r\n        }\r\n\r\n        <BuildPanel cityKey={city.key} district={district} selectedLotKey={lotKey} difficulty={props.difficulty}></BuildPanel>\r\n\r\n        <h3>Beings:</h3>\r\n        <BeamButton difficulty={props.difficulty} hex={district} city={city.key}></BeamButton>\r\n    </div>\r\n    } else {\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nexport const HexBuildingPanel: React.FC<{\r\n    building: IBuilding,\r\n    difficulty: IDifficulty,\r\n    city: ICity,\r\n    hex: HexPoint\r\n}> = (props) => {\r\n    const b = props.building;\r\n    const enterprise = useAppSelector(s => b.enterpriseKey != null ? s.world.enterprises.byID[b.enterpriseKey]: undefined);\r\n    const good = BuildingToGood[b.type];\r\n    const dispatch = useAppDispatch();\r\n    const hasJobs = BuildingJobs[b.type] > 0;\r\n    const upgraded = props.building.upgradedJobs || props.building.upgradedStorage;\r\n    return <div>\r\n        <div>\r\n            <strong>{keyToName[b.type]}</strong>\r\n            <button type=\"button\" className=\"pull-r\" onClick={() => dispatch(doSelectNone())}>❌</button>\r\n        </div>\r\n        <div className=\"text-right\">\r\n            <small>\r\n            in&nbsp;<strong>{props.city.name}</strong>\r\n            </small>\r\n        </div>\r\n    {\r\n        (enterprise != null && good != null) ? <div>\r\n            <small>\r\n                ${enterprise.cash?.toFixed(2)} from sales today\r\n            </small>\r\n            <EnterpriseListings enterpriseKey={enterprise.key} good={good} buildingKey={b.key}></EnterpriseListings>\r\n        </div> : null\r\n    }\r\n    {\r\n        upgraded && hasJobs ? <div>\r\n            {renderDensityWarning(b.type)}\r\n        </div> : null\r\n    }\r\n    {\r\n        hasJobs && enterprise != null ?  <EnterpriseTypePicker \r\n            enter={enterprise} \r\n            changeEnterprise={(t) => dispatch(changeEnterprise({enterpriseKey: b.key, newType: t}))}>\r\n            </EnterpriseTypePicker> : null\r\n    }\r\n    {\r\n        hasJobs ? <WorkerList cityKey={props.city.key} building={b}></WorkerList> : null\r\n    }\r\n    {\r\n        !hasJobs ? null : <div>\r\n            <small>\r\n            This {keyToName[b.type]} can support {BuildingNumOfOpenJobs(b)} more jobs.\r\n            {\r\n                upgraded ? null : <span><br/>Add Worker Space to add 3 more job slots.</span>\r\n            }\r\n            </small>\r\n        </div>\r\n    }\r\n    {/* {renderDensityWarning(b.type)} */}\r\n    {\r\n        b.upgradedJobs || b.upgradedStorage || !hasJobs ? null : <div><div className=\"card-parent\">\r\n                <button className=\"card button\" type=\"button\" onClick={() => dispatch(upgrade({buildingKey: b.key}))}>\r\n                    🛠️ Add Worker Space\r\n                    <CostSmall cost={props.difficulty.cost.hex.upgrade}></CostSmall>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n    {\r\n        b.upgradedJobs || b.upgradedStorage || !hasJobs ? null : <div><div className=\"card-parent\">\r\n                <button className=\"card button\" type=\"button\" onClick={() => dispatch(upgrade({buildingKey: b.key}))}>\r\n                    📦 Add Storage Space\r\n                    <CostSmall cost={props.difficulty.cost.hex.upgrade}></CostSmall>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n    {\r\n        b.dwellingKeys != null && b.dwellingKeys.length ? <DwellingList dwellingKeys={b.dwellingKeys}></DwellingList> : null\r\n    }\r\n    {\r\n        b.upgradedLoft || !hasJobs ? null : <div><div className=\"card-parent\">\r\n                <button className=\"card button\" type=\"button\" onClick={() => dispatch(upgradeLoft({buildingKey: b.key}))}>\r\n                    🛌 Add Loft Housing\r\n                    <CostSmall cost={props.difficulty.cost.hex.add_loft}></CostSmall>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n    <BeamButton city={props.city.key} difficulty={props.difficulty} hex={props.hex}></BeamButton>\r\n    </div>\r\n}\r\n\r\nconst renderDensityWarning = (typ: BuildingTypes) => {\r\n    if (typ === 'house')\r\n    return <>\r\n        <div className=\"text-center\">\r\n        <small>\r\n        🐮 Parochial subjects may emit 👎<br/>when living in dense buildings\r\n        </small>\r\n    </div> \r\n    <div className=\"text-center\">\r\n        <small>\r\n        🍸 Cosmopolitan subjects may emit 👎<br/>when living in small buildings\r\n        </small>\r\n    </div>\r\n    </>;\r\n    else return <div>\r\n\r\n    </div>\r\n}\r\n\r\nexport const WorkerList: React.FC<{\r\n    cityKey: number,\r\n    building: IBuilding\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const beans = useAppSelector(x => props.building.employeeBeanKeys.map((k) => x.world.beans.byID[k]));\r\n    const enterprise = useAppSelector(s => s.world.enterprises.byID[props.building.key]);\r\n    if (beans.length < 0) {\r\n        return <div>No Workers</div>\r\n    }\r\n    return <div>\r\n    <strong>Workers:</strong>\r\n    {\r\n        beans.map((x) => <div key={x.key}>\r\n            {BuildingJobIcon[props.building.type]} {x.name} {enterprise && enterprise.enterpriseType === 'company' && x.key === enterprise.ownerBeanKey ? '🎩' : ''}\r\n            <button title=\"Fire\" className=\"callout marg-0\" onClick={() => x ? dispatch(fireBean({cityKey: props.cityKey, beanKey: x.key})) : null}>\r\n                🔥\r\n            </button>\r\n        </div>)\r\n    }\r\n</div>\r\n}\r\nexport const EnterpriseTypePicker: React.FC<{\r\n    enter: IEnterprise,\r\n    changeEnterprise: (newType: EnterpriseType) => void,\r\n}> = (props) => {\r\n    const options = EnterpriseTypes.map((x) => {\r\n        return {\r\n            icon: EnterpriseTypeIcon[x],\r\n            text: x[0].toUpperCase()+x.substring(1),\r\n            value: x,\r\n            onClick: () => {\r\n                props.changeEnterprise(x);\r\n            }\r\n        }\r\n    }); \r\n    return <Subtabs active={props.enter.enterpriseType} options={options}></Subtabs>\r\n}\r\n\r\nexport const EnterpriseListings: React.FC<{\r\n    enterpriseKey: number,\r\n    buildingKey: number,\r\n    good: TraitGood\r\n}> = (props) => {\r\n    const listings = useAppSelector(s => s.world.economy.market.listings[props.good]);\r\n    const building = useAppSelector(s => s.world.buildings.byID[props.buildingKey]);\r\n    return <div className=\"horizontal\">\r\n        {\r\n            listings.filter(y => y.sellerEnterpriseKey === props.enterpriseKey).map((x,i) => <div key={i}>\r\n                {x.quantity} {GoodIcon[props.good]} @ ${x.price.toFixed(2)}\r\n            </div>)\r\n        }\r\n        <div>\r\n            📦 Storage x{building.upgradedStorage ? 20 : 10}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nfunction HexStringToHex(hex: string): HexPoint {\r\n    const split = hex.split(',');\r\n    return {\r\n        q: +split[0],\r\n        r: +split[1]\r\n    }\r\n}\r\n","\r\nimport React, { ReactElement } from \"react\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { BuildingIcon, hex_directions, transformPoint, hex_to_pixel, origin_point, HexPoint, BuildingJobIcon, UpgradedBuildingIcon, ILot, BuildingTypes, BuildingToGood } from \"../simulation/Geography\";\r\nimport { BuildingJobSlot } from \"../simulation/Occupation\";\r\nimport { IBuilding } from \"../simulation/RealEstate\";\r\nimport { build } from \"../state/features/world.reducer\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { GoodIcon, TraitGood } from \"../World\";\r\nimport { GetRandom } from \"../WorldGen\";\r\nimport './Building.css';\r\n\r\nconst slot_size = {\r\n    x: 25,\r\n    y: 25\r\n}\r\nexport function getSlotOffset(direction: HexPoint){\r\n    return hex_to_pixel(slot_size, origin_point, direction);\r\n}\r\nexport function getRandomSlotOffset(seed: string){\r\n    return getSlotOffset(GetRandom(seed, hex_directions));\r\n}\r\nconst hexDirectionToJobSlot: {[key: number]: number} = {\r\n    2: 0,\r\n    0: 1,\r\n    4: 2,\r\n    1: 3,\r\n    5: 4,\r\n    3: 5,\r\n}\r\n\r\nexport const BuildingToJobIcon: {[type in BuildingTypes]: string} = {\r\n    'farm':'🪕',\r\n    'house':'🧹',\r\n    'hospital':'🩺',\r\n    'church':'',\r\n    'theater':'👘',\r\n    'courthouse':'💼',\r\n    'park':'🎒',\r\n    'nature': '🎒'\r\n};\r\n\r\nexport const PetriGoods: React.FC<{\r\n    goodType: TraitGood,\r\n    enterpriseKey: number\r\n}> = (props) => {\r\n    const quantity = useAppSelector(state => state.world.economy.market.listings[props.goodType].filter(\r\n        x => x.sellerEnterpriseKey === props.enterpriseKey).reduce(\r\n        (sum, l) => sum + l.quantity, 0)\r\n    );\r\n    if (quantity < 1)\r\n        return null;\r\n    else {\r\n        const is: {row: number, col: number}[] = [];\r\n        for (let i = 0; i < quantity; i++) {\r\n            is.push({\r\n                row: Math.floor(i/2),\r\n                col: i % 2\r\n            });\r\n        }\r\n        return <>\r\n            {\r\n                is.map((i, ii) => <text x={270+(i.col*-12)+\"px\"} y={(85+(i.row*-12))+\"px\"} style={{fontSize:'11px'}} key={ii}>{GoodIcon[props.goodType]}</text>)\r\n            }\r\n        </>;\r\n    }\r\n}\r\nexport const PetriBuilding: React.FC<{\r\n    lotKey: number\r\n}> = (props) => {\r\n    const lot: ILot = useAppSelector(state => state.world.lots.byID[props.lotKey]);\r\n    const building: IBuilding|undefined = useAppSelector(state => lot.buildingKey != null ? state.world.buildings.byID[lot.buildingKey]: undefined);\r\n    if (building){\r\n        const good = BuildingToGood[building.type];\r\n        const upgraded = building.upgradedJobs || building.upgradedStorage;\r\n        return <>\r\n        <text x=\"280px\" y=\"77.859px\" style={{fontSize:'36px'}}>{upgraded ? UpgradedBuildingIcon[building.type] : BuildingIcon[building.type]}</text>\r\n        {\r\n            building.employeeBeanKeys.map((y,i) => <text x=\"325px\" y={(85+(i*-14))+\"px\"} style={{fontSize:'11px'}} key={y}>{BuildingToJobIcon[building.type]}</text>)\r\n        }\r\n        {(building.enterpriseKey != null && good) ? <PetriGoods enterpriseKey={building.enterpriseKey} goodType={good}></PetriGoods> : null}\r\n    </>\r\n    }\r\n    else \r\n        return <text x=\"280.931px\" y=\"77.859px\" style={{fontSize:'36px'}}>{lot.kind === 'rural' ? '🌼' : '🚏'}</text>\r\n}\r\n\r\nexport const UIBuilding: React.FC<{\r\n    building: IBuilding,\r\n    style: React.CSSProperties,\r\n    getStyle: (h: HexPoint) => React.CSSProperties\r\n}> = (props) => {\r\n    const upgraded = props.building.upgradedJobs || props.building.upgradedStorage;\r\n    return <div key={props.building.type+props.building.key} style={props.style} \r\n    className={\"building \"+props.building.type}>\r\n    {upgraded ? UpgradedBuildingIcon[props.building.type] : BuildingIcon[props.building.type]}\r\n    <UIBuildingSlots building={props.building} getStyle={props.getStyle}></UIBuildingSlots>\r\n    {props.children}\r\n    </div>\r\n}\r\nexport const UIBuildingSlots: React.FC<{\r\n    building: IBuilding,\r\n    getStyle: (h: HexPoint) => React.CSSProperties\r\n}> = (props) => {\r\n    return <>{hex_directions.map((d, i: number) => {\r\n        const jobSlot: BuildingJobSlot = hexDirectionToJobSlot[i];\r\n        const hasJob = props.building.employeeBeanKeys[jobSlot] != null;\r\n        return <span key={i} className=\"slot\" style={props.getStyle(d)}>\r\n            {hasJob ? BuildingJobIcon[props.building.type] : null}\r\n        </span>\r\n    })}</>\r\n}","import React, { useRef } from \"react\";\r\nimport { DistrictTypeIcon } from \"../right-panel/HexPanel\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { transformPoint } from \"../simulation/Geography\";\r\nimport { IBuilding } from \"../simulation/RealEstate\";\r\nimport { doSelectDistrict, doSelectLot } from \"../state/features/selected.reducer\";\r\nimport { magnetChange, selectBuildingsByCity } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { PetriBuilding, UIBuilding } from \"./Building\";\r\nimport { hex_style } from \"./WorldTile\";\r\n\r\nexport const PetriLot: React.FC<{\r\n    cityKey: number,\r\n    districtKey: number,\r\n    lotKey: number,\r\n    lotDrawn: string,\r\n    className: string\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const selected = useAppSelector(state => state.selected.selectedLotKey === props.lotKey);\r\n\r\n    return <g className={\"lot \"+ props.className + (selected ? \" selected\": \"\")} transform=\"matrix(1.21104,0,0,0.901051,-221.832,-145.114)\" onClick={(e) => {dispatch(doSelectLot({cityKey: props.cityKey, district: props.districtKey, lot: props.lotKey})); e.preventDefault();return false;}}>\r\n        <path d={props.lotDrawn} />\r\n    </g>\r\n}\r\n\r\nexport const PetriHex: React.FC<{\r\n    cityKey: number,\r\n    districtKey: number\r\n}> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const district = useAppSelector(state => state.world.districts.byID[props.districtKey]);\r\n    const selected = useAppSelector(state => state.selected.selectedDistrictKey === props.districtKey);\r\n    const extraClasses = selected ? 'hex-selected' : ''; \r\n    return <div className={\"hex \"+extraClasses}\r\n        key={props.districtKey}\r\n        style={{ ...hex_style, ...transformPoint(district.point) }}\r\n        onMouseEnter={(e) => { dispatch(magnetChange({cityKey: props.cityKey, px: district.point})) }}\r\n        onClick={(e) => {\r\n            if (!e.isDefaultPrevented()){\r\n                dispatch(doSelectDistrict({cityKey: props.cityKey, district: props.districtKey})); \r\n                e.stopPropagation(); \r\n                return false;\r\n            }\r\n        }\r\n        }>\r\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 104 120\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style={{position:'absolute',left:'0%',top:'0%',opacity:0.5}} className=\"svg-hex\">\r\n            <g transform=\"matrix(1,0,0,1,-233.288,0)\">\r\n            {\r\n            (district.kind === 'fallow') ? <g id=\"rural-circle-120\" transform=\"matrix(0.990588,0,0,1.33139,453.063,64.7779)\">\r\n                    <g id=\"circle\" transform=\"matrix(1.0095,0,0,0.751097,-457.368,-48.6545)\">\r\n                        <circle className=\"district-circle\"  cx=\"285.248\" cy=\"60.588\" r=\"17.271\"/>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-287.943,-23.1242)\">\r\n                        <text x=\"265.931px\" y=\"77.859px\" style={{fontSize:'46.631px'}}>🌳</text>\r\n                    </g>\r\n                </g>: (district.kind === 'rural') ? <g id=\"rural-circle-120\" transform=\"matrix(0.990588,0,0,1.33139,453.063,64.7779)\">\r\n                    <g transform=\"matrix(1.0095,0,0,0.751097,-457.368,-48.6545)\">\r\n                        <path className=\"district-circle\" d=\"M285.25,0L285.251,43.341M300.181,69.173L337.211,89.968L300.181,69.173ZM270.408,69.173L233.288,90.21M285.248,43.317C294.78,43.317 302.519,51.056 302.519,60.588C302.519,70.12 294.78,77.859 285.248,77.859C275.716,77.859 267.977,70.12 267.977,60.588C267.977,51.056 275.716,43.317 285.248,43.317Z\" />\r\n                    </g>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"rural_3\" lotKey={district.lots[2]} lotDrawn=\"M43.3,112.51L43.301,142.954L43.3,142.954C35.334,142.954 28.868,149.421 28.868,157.387C28.868,160.061 29.596,162.566 30.866,164.714L6.474,178.584C2.37,171.965 0,164.162 0,155.81C0,131.912 19.402,112.51 43.3,112.51L43.3,112.51Z\"></PetriLot>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"rural_2\" lotKey={district.lots[1]} lotDrawn=\"M55.735,164.713L80.126,178.583C72.489,190.9 58.846,199.11 43.3,199.11C27.754,199.11 14.111,190.9 6.474,178.584L30.866,164.714C33.378,168.965 38.009,171.819 43.3,171.819C48.592,171.819 53.223,168.964 55.735,164.713ZM0,155.81C0,155.81 0,155.81 0,155.81Z\"></PetriLot>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"rural_1\" lotKey={district.lots[0]} lotDrawn=\"M43.3,112.51C67.198,112.51 86.6,131.912 86.6,155.81C86.6,164.162 84.23,171.965 80.126,178.583L55.735,164.713C57.004,162.564 57.732,160.06 57.732,157.387C57.732,149.421 51.266,142.954 43.301,142.954L43.3,112.51Z\"></PetriLot>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-271.444,-46.211)\">\r\n                        <PetriBuilding lotKey={district.lots[0]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-271.444,1.20645)\">\r\n                        <PetriBuilding lotKey={district.lots[1]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-323.46,-21.9919)\">\r\n                        <PetriBuilding lotKey={district.lots[2]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-287.943,-23.1242)\">\r\n                        <text x=\"265.931px\" y=\"77.859px\" style={{fontSize:'36.631px'}}>\r\n                            📪\r\n                        </text>\r\n                    </g>\r\n                </g> : (district.kind === 'urban') ? <g id=\"rural-circle-120\" transform=\"matrix(0.990588,0,0,1.33139,453.063,64.7779)\">\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-271.444,-46.211)\">\r\n                        <PetriBuilding lotKey={district.lots[0]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-253.016,-21.9919)\">\r\n                        <PetriBuilding lotKey={district.lots[1]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-271.444,1.20645)\">\r\n                        <PetriBuilding lotKey={district.lots[2]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-306.821,1.20645)\">\r\n                        <PetriBuilding lotKey={district.lots[3]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-323.46,-21.9919)\">\r\n                        <PetriBuilding lotKey={district.lots[4]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-306.821,-46.211)\">\r\n                        <PetriBuilding lotKey={district.lots[5]}></PetriBuilding>\r\n                    </g>\r\n                    <g transform=\"matrix(1.0095,0,0,0.751097,-457.368,-48.6545)\">\r\n                        <path className=\"district-circle\" d=\"M285.25,0L285.251,43.341M300.181,69.173L337.211,89.968L300.181,69.173ZM270.408,69.173L233.288,90.21M285.248,43.317C294.78,43.317 302.519,51.056 302.519,60.588C302.519,70.12 294.78,77.859 285.248,77.859C275.716,77.859 267.977,70.12 267.977,60.588C267.977,51.056 275.716,43.317 285.248,43.317Z\"/>\r\n                    </g>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"urban_9\" lotKey={district.lots[5]} lotDrawn=\"M5.135,135.352C12.441,121.76 26.798,112.51 43.3,112.51L43.3,112.51L43.301,142.954L43.3,142.954C37.962,142.954 33.298,145.858 30.801,150.17L5.135,135.352Z\"></PetriLot>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"urban_8\" lotKey={district.lots[4]} lotDrawn=\"M5.158,135.317L30.861,150.068C29.594,152.215 28.868,154.717 28.868,157.387C28.868,160.061 29.596,162.566 30.866,164.714L6.474,178.584C2.37,171.965 0,164.162 0,155.81C0,148.284 1.774,141.487 5.158,135.317Z\"></PetriLot>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"urban_7\" lotKey={district.lots[3]} lotDrawn=\"M43.3,171.819L43.3,199.11C27.754,199.11 14.111,190.9 6.474,178.584L30.866,164.714C33.378,168.965 38.009,171.819 43.3,171.819ZM0,155.81C0,155.81 0,155.81 0,155.81Z\"></PetriLot>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"urban_6\" lotKey={district.lots[2]} lotDrawn=\"M43.3,171.819C48.592,171.819 53.223,168.964 55.735,164.713L80.126,178.583C72.489,190.9 58.846,199.11 43.3,199.11L43.3,171.819Z\"></PetriLot>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"urban_5\" lotKey={district.lots[1]} lotDrawn=\"M81.453,135.317C84.837,141.487 86.6,148.284 86.6,155.81C86.6,164.162 84.23,171.965 80.126,178.583L55.735,164.713C57.004,162.564 57.732,160.06 57.732,157.387C57.732,154.717 57.006,152.215 55.739,150.068L81.453,135.317Z\"></PetriLot>\r\n                    <PetriLot cityKey={props.cityKey} districtKey={props.districtKey} className=\"urban_4\" lotKey={district.lots[0]} lotDrawn=\"M55.725,150.044C53.211,145.801 48.585,142.954 43.301,142.954L43.3,112.51C59.792,112.51 74.143,121.75 81.453,135.331L55.725,150.044Z\"></PetriLot>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-287.943,-23.1242)\">\r\n                        <text x=\"265.931px\" y=\"77.859px\" style={{fontSize:'46.631px'}}>\r\n                            {(district.q === 0 && district.r === 0) ? '🏫' : '⛲'}\r\n                        </text>\r\n                    </g>\r\n                </g>: <g transform=\"matrix(0.990588,0,0,1.33139,453.063,64.7779)\">\r\n                    <g id=\"circle\" transform=\"matrix(1.0095,0,0,0.751097,-457.368,-48.6545)\">\r\n                        <circle className=\"district-circle\" cx=\"285.248\" cy=\"60.588\" r=\"17.271\"/>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-287.943,-23.1242)\">\r\n                        <text x=\"265.931px\" y=\"77.859px\" style={{fontSize:'46.631px'}}>{DistrictTypeIcon['nature']}</text>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-287.943,-23.1242)\">\r\n                        <text x=\"270px\" y=\"-20px\" style={{fontSize:'36.631px'}}>🏕️</text>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-287.943,-23.1242)\">\r\n                        <text x=\"180.931px\" y=\"147.859px\" style={{fontSize:'36.631px'}}>🏕️</text>\r\n                    </g>\r\n                    <g transform=\"matrix(0.402264,0,0,0.299296,-287.943,-23.1242)\">\r\n                        <text x=\"365.931px\" y=\"147.859px\" style={{fontSize:'36.631px'}}>🏕️</text>\r\n                    </g>\r\n                </g>}\r\n            </g>\r\n        </svg> \r\n        {props.children}\r\n    </div>\r\n\r\n}\r\n\r\nexport const PetriHexes2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n    const districtKeys = useAppSelector(state => state.world.cities.byID[props.cityKey]?.districtKeys);\r\n    return <>{districtKeys.map((dKey, i) => {\r\n        return <PetriHex cityKey={props.cityKey }key={dKey} districtKey={dKey}>\r\n        </PetriHex>\r\n    })}</>\r\n}\r\nexport const SocialBuildings: React.FC<{\r\n    city: ICity,\r\n    onClickBuilding: (b: IBuilding) => void;\r\n}> = (props) => {\r\n    const buildings = useAppSelector(state => selectBuildingsByCity(state.world, props.city.key));\r\n    return <>\r\n        {\r\n            buildings.map((x) => <div key={x.key} className=\"building-node\" onClick={() => props.onClickBuilding(x)}>\r\n                <UIBuilding building={x} style={{}} getStyle={() => {return{}}}></UIBuilding>\r\n            </div> )\r\n        }\r\n    </>\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nexport const Magnet2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const magnetPoint = useAppSelector(state => state.world.cities.byID[props.cityKey].pickupMagnetPoint);\r\n\r\n    if (magnetPoint){\r\n        return <div className=\"magnet\" style={{transform: `translate(${magnetPoint.x}px, ${magnetPoint.y}px)`}}>🧲</div>\r\n    } else {\r\n        return null;\r\n    }\r\n}","import React from \"react\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { BeanGetFace, BeanGetSpeech } from \"../simulation/Bean\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { RootState } from \"../state/state\";\r\nimport { GoodIcon } from \"../World\";\r\n\r\ninterface AnimatedBeanP {\r\n  cityKey: number;\r\n  beanKey: number;\r\n  sitStill?: boolean;\r\n  static?: boolean;\r\n}\r\n\r\nfunction BeanIsBuying(bean: IBean){\r\n  return bean.actionData.act == 'buy';\r\n}\r\n\r\nexport const selectBeanAnimation = (state: RootState, beanKey: number) => {\r\n  const bean = state.world.beans.byID[beanKey];\r\n  const working = bean.actionData.act === 'work';\r\n  return {\r\n    speech: BeanGetSpeech(bean),\r\n    face: BeanGetFace(bean),\r\n    good: BeanIsBuying(bean) ? GoodIcon[bean.actionData.good || 'food'] : undefined,\r\n    classes: [bean.job, bean.ethnicity, bean.actionData.act != 'travel' || bean.lifecycle === 'dead' ? 'paused' : '', ].join(' '),\r\n    animationClasses: ['bean-walker', working ? 'spin' : '', ].join(' '),\r\n    badge: bean.badge,\r\n    hat: bean.hat\r\n  }\r\n}\r\n\r\nexport const AnimatedBean: React.FC<AnimatedBeanP> = (props) => {\r\n  const state = useAppSelector(st => selectBeanAnimation(st, props.beanKey));\r\n  const isSelected = useAppSelector(st => st.selected.selectedBeanKey === props.beanKey);\r\n  const classes = ['bean interactable', state.classes, props.sitStill ? '' : state.animationClasses, isSelected ? 'selected' : ''].join(' ');\r\n\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <span className={classes}\r\n      onClick={(e) => {e.stopPropagation(); dispatch(doSelectBean({cityKey: props.cityKey, beanKey: props.beanKey})) }}\r\n    >\r\n      {state.badge ? <span className={\"badge \"+state.badge}>{state.badge}</span>: null}{state.face} {state.good ? <span className=\"purchase\">\r\n        <span className=\"money\">💸</span>\r\n        <span className=\"purchase-good\">{state.good}</span>\r\n      </span>: null} {state.speech ? <span className=\"speech\">\r\n        <span className=\"\">{state.speech}</span>\r\n      </span>: null}{state.hat?<span className={\"hat \"+state.hat}>{state.hat}</span>:null}\r\n    </span>\r\n  )\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { SfxContext } from \"../App\";\r\nimport { UFO, Pickup } from \"../simulation/City\";\r\nimport { transformPoint, hex_to_pixel } from \"../simulation/Geography\";\r\nimport { IPickup } from \"../simulation/Pickup\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { EmoteIcon } from \"../World\";\r\n\r\nexport const AnimatedPickup: React.FC<{\r\n    pickupKey: number\r\n}> = (props) => {\r\n    const [played, setPlayed] = useState(false);\r\n    const pickup = useAppSelector(state => state.world.pickups.byID[props.pickupKey]);\r\n    const sfx = React.useContext(SfxContext);\r\n    useEffect(() => {\r\n        if (!played && sfx){\r\n            sfx.play('drop');\r\n            setPlayed(true);\r\n        }\r\n    })\r\n    return <span className=\"pickup bob\">\r\n        {EmoteIcon[pickup.type]}\r\n    </span>\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { MoverContext } from \"../App\";\r\nimport { IAccelerator } from \"../simulation/Geography\";\r\nimport { MoverType } from \"../simulation/MoverBus\";\r\nimport { selectCityBeanIDs } from \"../state/features/world.reducer\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { AnimatedBean } from \"./AnimatedBean\";\r\nimport { AnimatedPickup } from \"./AnimatedPickup\";\r\n\r\nexport const Mover: React.FC<{\r\n    moverType: MoverType,\r\n    moverKey: number,\r\n}> = (props) => {\r\n    const mover = React.useContext(MoverContext);\r\n    const el = useRef<HTMLDivElement|null>(null);\r\n    const onMove = (p: IAccelerator) => {\r\n        if (el.current && p)\r\n            el.current.style.transform = `translate(${p.point.x}px, ${p.point.y}px)`;\r\n    }\r\n    useEffect(() => {\r\n        const pubsub = mover.Get(props.moverType, props.moverKey);\r\n        pubsub.subscribe(onMove);\r\n        if (pubsub.current)\r\n            onMove(pubsub.current);\r\n        return () => mover.Get(props.moverType, props.moverKey).unsubscribe(onMove)\r\n    }, []);\r\n    return <div ref={el}>\r\n        {props.children}\r\n    </div>\r\n}\r\n\r\nexport const PetriBeanList: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const beanKeys = useAppSelector(state => selectCityBeanIDs(state.world, props.cityKey));\r\n    return <>\r\n        {\r\n            beanKeys.map((beanKey: number) => {\r\n                return <Mover moverKey={beanKey} key={beanKey} moverType='bean'>\r\n                    <AnimatedBean cityKey={props.cityKey} beanKey={beanKey}></AnimatedBean>\r\n                </Mover>\r\n            })\r\n        }\r\n    </>;\r\n}\r\n\r\n\r\nexport const PickupList2: React.FC<{\r\n    cityKey: number\r\n}> = (props) => {\r\n    const list = useAppSelector(state => state.world.cities.byID[props.cityKey].pickupKeys);\r\n    return <>\r\n        {\r\n            list.map((pKey: number) => {\r\n                return <Mover moverKey={pKey} key={pKey} moverType='pickup'>\r\n                    <AnimatedPickup pickupKey={pKey}></AnimatedPickup>\r\n                </Mover>\r\n            })\r\n        }\r\n    </>;\r\n}","import React from \"react\";\r\nimport { HexSizeR, polarToPoint, transformPoint } from \"../simulation/Geography\";\r\nimport { magnetChange } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { AnimatedUFO2 } from \"./AnimatedUFO2\";\r\nimport { PetriHexes2 } from \"./PetriHexes\";\r\nimport { Magnet2 } from \"./Magnet\";\r\nimport { PetriBeanList, PickupList2 } from \"./Mover\";\r\n\r\nexport const hex_style = {\r\n  width: HexSizeR + 'px', \r\n  height: HexSizeR + 'px', \r\n  top: (-HexSizeR/2)+'px',\r\n  left: (-HexSizeR/2)+'px'\r\n}\r\n\r\ninterface WorldTilePs {\r\n  // tileKey: number;\r\n  cityKey: number;\r\n  onClick: () => void;\r\n}\r\nexport const WorldTile2: React.FC<WorldTilePs> = (props) => {\r\n\r\n  // const tile = useAppSelector(state => state.world.tiles.byID[props.tileKey]);\r\n  const city = useAppSelector(state => state.world.cities.byID[props.cityKey]);\r\n  const ufos = useAppSelector(state => state.world.cities.byID[props.cityKey].ufoKeys);\r\n  const spotlight = useAppSelector(state => state.world.spotlightEvent);\r\n  const spotlightBean = useAppSelector(state => {\r\n    if (state.world.spotlightEvent && state.world.spotlightEvent.beanKey)\r\n      return state.world.beans.byID[state.world.spotlightEvent.beanKey];\r\n    return undefined;\r\n  });\r\n\r\n  const dispatch = useAppDispatch()\r\n  const mtn_transforms: { transform: string }[] = [];\r\n\r\n  const mtnRadius = city.petriRadius - 20;\r\n  for (let i = 0; i < 360 / 5; i++) {\r\n    const az = i * 5 * Math.PI / 180;\r\n    const pt = polarToPoint({ r: mtnRadius, az: az });\r\n    pt.x += city.petriRadius; pt.y += city.petriRadius;\r\n    mtn_transforms.push(transformPoint(pt));\r\n  }\r\n  const deaths = city.deadBeanKeys.map((bk: number, i) => {\r\n    return (\r\n      <span key={i} className=\"dead\" style={{ left: (i * 10) + 'px' }}>⚰️</span>\r\n    )\r\n  });\r\n  const style = {\r\n    height: (city.petriRadius * 2) + 'px',\r\n    width: (city.petriRadius * 2) + 'px',\r\n  }\r\n  return (\r\n    <div className=\"tile\" onClick={() => props.onClick()} onMouseLeave={() => { dispatch(magnetChange({ cityKey: city.key })) }} style={style}>\r\n      <svg style={{ width: '100%', height: '100%' }} className=\"petri-base\">\r\n        <circle cx=\"50%\" cy=\"50%\" r=\"50%\" stroke=\"grey\" fill=\"rgba(255, 255, 255, 1)\" />\r\n      </svg>\r\n      <PetriHexes2 cityKey={city.key}></PetriHexes2>\r\n      {mtn_transforms.map((x, i) => {\r\n        return <span key={i} style={x} className=\"mtn\">⛰️</span>\r\n      })}\r\n      <PickupList2 cityKey={props.cityKey}></PickupList2>\r\n      <PetriBeanList cityKey={props.cityKey}></PetriBeanList>\r\n      {ufos.map((uK: number, i: number) => {\r\n        return <AnimatedUFO2 ufoKey={uK} key={uK} cityKey={city.key}></AnimatedUFO2>\r\n      })}\r\n      <Magnet2 cityKey={props.cityKey}></Magnet2>\r\n      <svg style={{ width: '100%', height: '100%' }} className=\"petri-lid\">\r\n        <circle cx=\"50%\" cy=\"50%\" r=\"50%\" stroke=\"grey\" fill=\"rgba(255, 255, 255, 0.2)\" />\r\n      </svg>\r\n      {/* {\r\n        (spotlight && spotlightBean && spotlight.point) ? <AnimatedSpotlight event={spotlight} bean={bean}></AnimatedSpotlight>: null\r\n      } */}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { NarrativeBeliefData, PrimaryBeliefData } from \"../simulation/Beliefs\";\r\nimport { Trait, TraitIcon } from \"../World\";\r\n\r\nexport class CardButton extends React.Component<{\r\n    icon: string,\r\n    name: string,\r\n    onClick?: () => void,\r\n    title?: string,\r\n    subtext?: string,\r\n    thin?: boolean,\r\n    singleLine?: boolean,\r\n    disabled?: boolean\r\n}>{\r\n    render(){\r\n        let classes = \"card button\";\r\n        if (this.props.thin) classes += ' thin';\r\n        if (this.props.singleLine) classes += ' single';\r\n        return <button className={classes} title={this.props.title} onClick={() => {\r\n            if (this.props.onClick) this.props.onClick()\r\n        }} type=\"button\" disabled={this.props.disabled}>\r\n            {this.props.icon} {this.props.name}\r\n            {\r\n                (this.props.subtext != null) ? <small>{this.props.subtext}</small> : null\r\n            }\r\n        </button>\r\n    }\r\n}\r\n\r\nexport function TraitToCard(bean: IBean, trait: Trait, onClick?: () => void){\r\n    switch(trait){\r\n        case 'trad':\r\n        case 'prog':\r\n        case 'ego':\r\n        case 'state':\r\n            return <CardButton icon={TraitIcon[trait]} title={PrimaryBeliefData[trait].description} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        case 'fresh':\r\n        case 'sick':\r\n        case 'hungry':\r\n        case 'starving':\r\n        case 'stuffed':\r\n        case 'homeless':\r\n        case 'rested':\r\n        case 'circle':\r\n        case 'square':\r\n        case 'triangle':\r\n        case 'sane':\r\n        case 'disturbed':\r\n        case 'stressed':\r\n            return <CardButton icon={TraitIcon[trait]} title={keyToName[trait]} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        case 'noFaith':\r\n        case 'rocket':\r\n        case 'dragon':\r\n        case 'music':\r\n            return <CardButton icon={TraitIcon[trait]} title={NarrativeBeliefData[trait].description} name=\"\" subtext={keyToName[trait]} thin={true} singleLine={true} onClick={onClick}></CardButton>\r\n        default:\r\n            return null;\r\n    }\r\n} ","import React, { useState } from \"react\";\r\nimport { Act, ActivityDisplay, ActivityIcon, GetPriorities, IBean } from \"../simulation/Agent\";\r\nimport { BeanGetFace } from \"../simulation/Bean\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { IPlayerData, PlayerCanAfford } from \"../simulation/Player\";\r\nimport { ITitle } from \"../simulation/Titles\";\r\nimport { doSelectCity, doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { abduct, beanSetTitle, scan, vaporize } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean, selectSelectedCity } from \"../state/state\";\r\nimport { CardButton, TraitToCard } from \"../widgets/CardButton\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { EmoteIcon, IHappinessModifier, TraitIcon } from \"../World\";\r\nimport './BeanPanel.css';\r\n\r\n\r\ninterface BeanPanelP{\r\n    city: ICity,\r\n    bean: IBean,\r\n    alien: IPlayerData;\r\n    brainwash: () => void;\r\n    entitle: () => void;\r\n}\r\nfunction happyTable(mods: IHappinessModifier[]){\r\n    return mods.filter((y) => y.mod != 0).map((x, i) => {\r\n        return <tr key={i}>\r\n            <td className=\"small text-right\">{x.reason}</td>\r\n            <td className=\"small\">{Math.round(x.mod * 100)}%</td>\r\n        </tr>\r\n    });\r\n}\r\nfunction hedonTable(bean: IBean){\r\n    return Object.keys(bean.happiness.all).map((x, i) => {\r\n        return <tr key={i}>\r\n            <td className=\"small text-right\">{bean.happiness.all[x]} {bean.happiness.all[x] >= 0 ? EmoteIcon['happiness'] : EmoteIcon['unhappiness']} from </td>\r\n            <td className=\"small\">{x}</td>\r\n        </tr>\r\n    });\r\n}\r\nfunction actDurations(bean: IBean){\r\n    const acts = Object.keys(bean.activity_duration).map((x) => x as Act);\r\n    acts.sort((a, b) => bean.activity_duration[b] - bean.activity_duration[a]);\r\n    return acts;\r\n}\r\nfunction beliefTable(beliefs: TraitBelief[]): React.ReactNode {\r\n    return beliefs.map((b, i) => {\r\n        const classes = 'belief-name shadow text-left '+SecondaryBeliefData[b].rarity;\r\n        return <table className=\"width-100p\" key={b+i}><tbody><tr>\r\n        <th className={classes}>\r\n            {SecondaryBeliefData[b].icon} {SecondaryBeliefData[b].adj}\r\n        </th>\r\n        <td className=\"text-right\">\r\n            {(SecondaryBeliefData[b].idealPro || []).map(y => <span key={y}>+{TraitIcon[y]}</span>)}\r\n            {(SecondaryBeliefData[b].idealCon || []).map(y => <span key={y}>-{TraitIcon[y]}</span>)}\r\n        </td>\r\n    </tr><tr><td className=\"small text-center\" colSpan={2}>{\r\n        SecondaryBeliefData[b].description ? SecondaryBeliefData[b].description?.split(';').map((x, i) => <div key={i}>{x}</div>) : null\r\n    }</td></tr></tbody></table>});\r\n}\r\nfunction renderInner(scanned: boolean, innerView: string, bean: IBean, city: ICity, alien: IPlayerData){\r\n    if (!scanned){\r\n        return <div className=\"width-100p text-center\">\r\n            <small>\r\n                Subject needs a Scan to reveal their thoughts\r\n            </small>\r\n        </div>\r\n    }\r\n    switch(innerView){\r\n        case 'beliefs':\r\n            return scanned ? beliefTable(bean.beliefs) : null\r\n        case 'feelings':\r\n            return <table className=\"width-100p\"><tbody>\r\n                {scanned ? hedonTable(bean) : null}\r\n                </tbody>\r\n            </table>\r\n        default:\r\n        case 'priorities':\r\n            return <table className=\"width-100p\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            Currently {ActivityDisplay(bean.actionData)}\r\n                        </td>\r\n                    </tr>\r\n                    {\r\n                        bean.priorities.map((x) => {\r\n                            return <tr key={`p-${x.act}-${x.good}`}>\r\n                                <td>\r\n                                {x.priority.toFixed(2)} {ActivityIcon(x)}\r\n                                </td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                    {\r\n                        actDurations(bean).filter((x) => bean.activity_duration[x] > 0).map((x) => {\r\n                            const act = x as Act;\r\n                            return <tr key={act}>\r\n                                <td>{x}</td>\r\n                                <td>\r\n                                    {\r\n                                        (bean.activity_duration[act] / 1000).toFixed(1)\r\n                                    }s\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n    }\r\n}\r\nfunction renderTraits(scanned: boolean, bean: IBean, alien: IPlayerData, brainwash: () => void, scan: () => void){\r\n    if (scanned){\r\n        return <div>\r\n            <div className=\"card-parent\">\r\n                {TraitToCard(bean, bean.ethnicity, undefined)}\r\n                {TraitToCard(bean, bean.faith, brainwash)}\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                {\r\n                    bean.beliefs.map((b) => <CardButton key={b} icon={SecondaryBeliefData[b].icon} title={SecondaryBeliefData[b].adj} name='' thin={true} singleLine={true} onClick={() => {brainwash()}}></CardButton>)\r\n                }\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                {TraitToCard(bean, bean.food, undefined)}\r\n                {TraitToCard(bean, bean.stamina, undefined)}\r\n                {TraitToCard(bean, bean.health, undefined)}\r\n                {TraitToCard(bean, bean.housing, undefined)}\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <div className=\"card-parent\">\r\n            <CardButton icon=\"🛰️\" name=\"Scan\" subtext=\"-Energy +Info\" onClick={scan} disabled={!PlayerCanAfford(alien, alien.difficulty.cost.bean.scan)}></CardButton>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport const BeanPanel: React.FC<BeanPanelP> = (props) => {\r\n    const dispatch = useAppDispatch();\r\n    const [faceOverride, setFaceOverride] = useState<string|undefined>(undefined);\r\n    const [innerView, setInnerView] = useState<'priorities'|'feelings'|'beliefs'>('beliefs');\r\n    const alien = useAppSelector(state => state.world.alien);\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const city = useAppSelector(selectSelectedCity);\r\n    function _resetFace(){\r\n        setTimeout(() => {\r\n            setFaceOverride(undefined);\r\n        }, 5000);\r\n    }\r\n    if (!bean || !city) \r\n        return null;\r\n    const classes = bean.job + ' ' + bean.ethnicity;\r\n    return (                \r\n    <div className=\"vertical bean-panel\">\r\n        <div className=\"bean-panel-header\">\r\n            <div>\r\n                <b>{bean.name}&nbsp;\r\n                {\r\n                    city ? <small> of {city.name} </small>\r\n                    : null\r\n                }\r\n                </b>\r\n                <button type=\"button\" className=\"pull-r\" onClick={() => {\r\n                    dispatch(doSelectCity({cityKey:bean.cityKey}))\r\n                }} >❌</button>\r\n            </div>\r\n            <div className=\"bean-view\">                \r\n                <span className={classes+\" bean\"}>\r\n                    {\r\n                        faceOverride === undefined ? BeanGetFace(bean) : faceOverride\r\n                    }\r\n                </span>\r\n            </div>\r\n            {\r\n                bean.titleKey != null ? <TitleView titleKey={bean.titleKey}></TitleView> : null\r\n            }\r\n            <div className=\"horizontal\">\r\n                <span className=\"text-center\">\r\n                    💰 ${bean.cash.toFixed(2)}\r\n                </span>\r\n                <span className=\"text-center\">\r\n                    🙂 {Math.round(bean.lastHappiness)}%\r\n                </span>\r\n                <span className=\"text-center\">\r\n                    {Math.round(bean.happiness.flatAverage)} {EmoteIcon['happiness']} /day\r\n                </span>\r\n            </div>\r\n            {renderTraits(alien.scanned_bean[bean.key], bean, alien, () => {\r\n                props.brainwash();\r\n            }, () => {\r\n                dispatch(scan({beanKey: bean.key}));\r\n                setFaceOverride('😨');\r\n                _resetFace();\r\n            })}\r\n        </div>\r\n        <div className=\"grow-1 pad-4 bean-panel-content\">\r\n            <div className=\"cylinder blue-orange horizontal\">\r\n                <button type=\"button\" className={innerView=='beliefs'?'active':''} onClick={()=>setInnerView('beliefs')}>\r\n                    😇 Traits\r\n                </button>\r\n                <button type=\"button\" className={innerView=='feelings'?'active':''} onClick={()=>setInnerView('feelings')}>\r\n                    😐 Feelings\r\n                </button>\r\n                <button type=\"button\" className={innerView=='priorities'?'active':''} onClick={()=>setInnerView('priorities')}>\r\n                    💪 Priorities\r\n                </button>\r\n            </div>\r\n            {renderInner(alien.scanned_bean[bean.key], innerView, bean, city, alien)}\r\n        </div>\r\n        <div className=\"bean-action-card-parent\">\r\n            <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\" onClick={() => {\r\n                    props.brainwash()\r\n                }}\r\n                    title=\"Rewrite one of this being's traits\"\r\n                >😵 Brainwash\r\n                    <small>-Sanity +-Trait</small>\r\n                </button>\r\n            </div>\r\n            {/* <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\"  onClick={() => brainwash()}  disabled={true}\r\n                    title=\"Give this being food or meds or cash\">\r\n                    🎁 Gift\r\n                    <small>-Energy +Things</small>\r\n                </button>\r\n            </div> */}\r\n            \r\n            <TitleButton beanKey={bean.key} entitle={props.entitle}></TitleButton>\r\n            <div className=\"card-parent\">\r\n                {/* <button type=\"button\" className=\"button card\" onClick={scan} disabled={true}\r\n                    title=\"Steal a bit of this being's mind\">\r\n                    🤪 Braindrain\r\n                    <small>-Energy -Sanity</small>\r\n                </button> */}\r\n                <button type=\"button\" className=\"button card\" onClick={() => {\r\n                    dispatch(vaporize({beanKey: bean.key}));\r\n                    setFaceOverride('😨');\r\n                    _resetFace();\r\n                }}\r\n                    disabled={!PlayerCanAfford(alien, alien.difficulty.cost.bean.vaporize)}\r\n                    title=\"Delete this being from the experiment\"\r\n                >\r\n                    ☠️ Vaporize\r\n                    <CostSmall cost={alien.difficulty.cost.bean.vaporize}></CostSmall>\r\n                </button>\r\n            </div>\r\n            <div className=\"card-parent\">\r\n                <button type=\"button\" className=\"button card\"\r\n                    disabled={bean.lifecycle != 'alive' || !PlayerCanAfford(alien, alien.difficulty.cost.bean.abduct)}\r\n                    onClick={() => dispatch(abduct({beanKey: bean.key}))}\r\n                    title=\"Remove this being for study\"\r\n                >\r\n                    👾 Abduct for Research\r\n                    <CostSmall cost={alien.difficulty.cost.bean.abduct} rider=\"+Tech\"></CostSmall>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport const TitleButton: React.FC<{\r\n    beanKey: number,\r\n    entitle: () => void\r\n}> = (props) => {\r\n    const titles = useAppSelector(s => s.world.titles.allIDs);\r\n    if (titles.length > 0){\r\n        return <div className=\"card-parent\">\r\n            <button type=\"button\" className=\"button card\"\r\n                // disabled={bean.lifecycle != 'alive' || !PlayerCanAfford(alien, alien.difficulty.cost.bean.abduct)}\r\n                onClick={() => props.entitle()}\r\n                title=\"Give this bean a title\"\r\n            >\r\n                👑 Give Title\r\n                <CostSmall cost={{}} rider=\"+Title\"></CostSmall>\r\n            </button>\r\n        </div>\r\n    }\r\n    return null\r\n}\r\n\r\nexport const TitleView: React.FC<{\r\n    titleKey: number\r\n}> = (props) => {\r\n    const title = useAppSelector(s => s.world.titles.byID[props.titleKey]);\r\n    return <div className=\"text-center\">\r\n        <strong>\r\n        {title.headwear} {title.name} {title.badge} \r\n        </strong>\r\n    </div>\r\n}","import React from \"react\";\r\nimport { keyToName } from \"../i18n/text\";\r\nimport { CityGetPopulationTraitsList, ICity } from \"../simulation/City\";\r\nimport { IPlayerData } from \"../simulation/Player\";\r\nimport { selectBeansByCity } from \"../state/features/world.reducer\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { CardButton } from \"../widgets/CardButton\";\r\nimport { NeedReadout } from \"../widgets/NeedReadout\";\r\nimport { Trait } from \"../World\";\r\n\r\ninterface OverviewPanelP {\r\n    city: ICity,\r\n    alien: IPlayerData,\r\n    clearCity: () => void;\r\n}\r\n\r\nexport const OverviewPanel: React.FC<OverviewPanelP> = (props) => {\r\n    const beans = useAppSelector(x => selectBeansByCity(x.world, props.city.key));\r\n    let header = <div>\r\n        Human Emotion Farm\r\n        <div>\r\n            <small>Part of the 🌌 Galactic Xenosensation Federation</small>\r\n        </div>\r\n    </div>;\r\n    if (props.city) {\r\n        header = <div>\r\n            <div>\r\n                <b>{props.city.name}</b>\r\n                <button type=\"button\" className=\"pull-r\" onClick={() => props.clearCity()} >❌</button>\r\n            </div>\r\n        </div>;\r\n    }\r\n    const avg_happy = beans.reduce((sum, x) => sum + x.lastHappiness, 0) / (beans.length || 1);\r\n    const avg_cash = beans.reduce((sum, x) => sum + x.cash, 0) / (beans.length || 1);\r\n    return (\r\n        <div>\r\n            {header}\r\n            {/* <div className=\"header\"><b>Demographics</b></div> */}\r\n            <div className=\"header\"><b>👥 Subjects</b></div>\r\n            <div>\r\n                <b>Population</b>&nbsp;\r\n                <span>{beans.length}</span>\r\n            </div>\r\n            {/* <AxisReadout report={reportEthno(beans)}>Ethnicity</AxisReadout> */}\r\n            <NeedReadout beans={beans} need={(b) => b.food} dire=\"starving\" abundant=\"stuffed\">Food Security</NeedReadout>\r\n            <NeedReadout beans={beans} need={(b) => b.stamina} dire=\"homeless\" abundant=\"rested\">Housing</NeedReadout>\r\n            <NeedReadout beans={beans} need={(b) => b.health} dire=\"sick\" abundant=\"fresh\">Healthcare</NeedReadout>\r\n            <b>Avg. Money</b> ${avg_cash.toFixed(2)} &nbsp;\r\n            <b>Avg. Happiness</b> {Math.round(avg_happy)}%\r\n            {\r\n                beans && beans.length ? <>\r\n                    <div className=\"header\"><b>🧠 Traits</b></div>\r\n                    <div className=\"max-w-300\">\r\n                        { \r\n                            CityGetPopulationTraitsList(props.alien.scanned_bean, beans).map((v) => \r\n                                <span key={v.noun} className=\"overview-belief\">\r\n                                    {v.icon}&nbsp;{v.noun}&nbsp;x{v.count}\r\n                                </span>)\r\n                        }\r\n                    </div>\r\n                </> : null\r\n            }\r\n            {\r\n                beans.length || 0 > 7 ? <div className=\"card-parent\">\r\n                    <CardButton icon=\"🛰️\" name=\"Scan All\" disabled={true} subtext=\"-Energy +Info\" onClick={() => {}}></CardButton>\r\n                </div> : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport class AxisReadout extends React.Component<{ report: { avg: number, winner: Trait } }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n        let maj = 'Leaning';\r\n        if (this.props.report.avg >= .51)\r\n            maj = 'Major'\r\n        if (this.props.report.avg >= .8)\r\n            maj = 'Extreme'\r\n        const percent = Math.floor(this.props.report.avg * 100);\r\n        const style = {\r\n            width: percent + '%'\r\n        }\r\n        return (\r\n            <div>\r\n                <b>\r\n                    {this.props.children}\r\n                </b>&nbsp;&nbsp;\r\n                <span>{maj} {keyToName[this.props.report.winner]}</span>\r\n                <div className=\"bar\">\r\n                    <div className=\"bar-inner\" style={style}>\r\n                        {percent}%\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { doSelectNone } from \"../state/features/selected.reducer\";\r\nimport { abduct } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectSelectedBean, selectSelectedCity } from \"../state/state\";\r\nimport { BeanPanel } from \"./BeanPanel\";\r\nimport { HexPanel } from \"./HexPanel\";\r\nimport { OverviewPanel } from \"./OverviewPanel\";\r\n\r\nexport const DetailPanel: React.FC<{\r\n    openBrainwash: () => void,\r\n    openEntitle: () => void,\r\n}> = (props) => {\r\n    const city = useAppSelector(selectSelectedCity);\r\n    const districtKey = useAppSelector((x) => x.selected.selectedDistrictKey);\r\n    const district = useAppSelector((x) => districtKey != null ? x.world.districts.byID[districtKey]: undefined);\r\n    const bean = useAppSelector(selectSelectedBean);\r\n    const alien = useAppSelector((x) => x.world.alien);\r\n    const dispatch = useAppDispatch();\r\n    if (bean && city){\r\n        return <BeanPanel bean={bean} city={city} alien={alien}\r\n        brainwash={() => props.openBrainwash()}\r\n        entitle={() => props.openEntitle()}\r\n        ></BeanPanel>\r\n    }\r\n    if (district) {\r\n        return <HexPanel difficulty={alien.difficulty}></HexPanel>\r\n    }\r\n    if (city) {\r\n        return <OverviewPanel city={city} clearCity={() => dispatch(doSelectNone())} alien={alien}></OverviewPanel>\r\n    }\r\n    return <div></div>\r\n}","import React from \"react\";\r\nimport { IEvent } from \"../events/Events\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { selectEventIDs } from \"../state/state\";\r\n\r\nfunction shouldEventJumpToBean(e: IEvent): boolean{\r\n    return e.beanKey != null && (\r\n        e.trigger === 'speechcrime' ||\r\n        e.trigger === 'birth');\r\n}\r\n\r\nexport const EventsPanel: React.FC<{\r\n    \r\n}> = (props) => {\r\n    const eventIDs = useAppSelector(selectEventIDs);\r\n    const events = useAppSelector(state => eventIDs.slice().reverse().map(id => state.world.events.byID[id]));\r\n    const dispatch = useAppDispatch();\r\n    let elements = events.map((e, i) => {\r\n        const alert = e.icon === '🚨';\r\n        const tallTrigger = e.trigger === 'nojobslots' || e.trigger === 'persuasion';\r\n        return <div key={i} className={alert||tallTrigger ? 'tall': ''}>\r\n            <span className={alert ? 'police-siren': ''}>{e.icon}</span>&nbsp;\r\n            {\r\n                shouldEventJumpToBean(e) ? <a onClick={() => {\r\n                    if (e.beanKey && e.cityKey) {\r\n                        dispatch(doSelectBean({beanKey: e.beanKey, cityKey: e.cityKey}));\r\n                    }\r\n            }} href=\"javascript:void(0)\">{e.message}</a> : <span>{e.message}</span>\r\n            }\r\n        </div>\r\n    });\r\n    if (events.length === 0){\r\n        elements = [<div key={0}>\r\n            <small>No events yet</small>\r\n        </div>]\r\n    }\r\n    return (                \r\n    <div className=\"events-panel\">\r\n        <div>\r\n            <b>Events</b>\r\n        </div>\r\n        {elements}\r\n    </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { DefaultDifficulty, triadToString } from \"../Game\";\r\nimport { Curriculums, GetAverage, Goals, IGoal, IGoalProgress, IPlayerData, IProgressable } from \"../simulation/Player\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\n\r\nfunction renderReward(g: IGoal){\r\n  return <div>\r\n    <small>\r\n    🎁 {triadToString(g.reward || {}, '+')}\r\n    </small>\r\n  </div>\r\n}\r\nfunction renderGoal(progress: IGoalProgress|undefined, g: IGoal){\r\n  return <li>\r\n    {progress?.done ? '☑️': '⭕️'}\r\n    {g.text}\r\n    {g.tooltip != null ? <small title={g.tooltip}>❔</small> : null}\r\n    {progress?.done || g.reward == null ? null : renderReward(g)}\r\n  </li>\r\n}\r\nexport const GoalsPanel: React.FC = () => {\r\n  const progress = useAppSelector(x => x.world.alien.goalProgress);\r\n  const goals = useAppSelector(x => x.world.alien.goals);\r\n  const workingReportCard = useAppSelector(x => x.world.alien.workingReportCard);\r\n  return (<div className=\"goals\">\r\n    <div><b>Goals</b></div>\r\n    <ul>\r\n      {goals.map((key) => {\r\n        return renderGoal(progress[key], Goals[key]);\r\n      })}\r\n    </ul>\r\n    <div><b>Report Card</b></div>\r\n    <p className=\"horizontal\">\r\n      <span>\r\n        Last Grade: <b>D</b>\r\n      </span>\r\n      <span>\r\n        Next Grade in: <b>2 mo.</b>\r\n      </span>\r\n    </p>\r\n    <p>\r\n    </p>\r\n    <table style={{margin: 'auto'}}>\r\n      <tbody>\r\n        <tr>\r\n          <th>🎯 Happiness\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Happiness}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects happy?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n            <small>\r\n          {Curriculums.Default.RubricDescription.Happiness}\r\n            </small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Prosperity</th>\r\n          <td>\r\n            {workingReportCard.Prosperity}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects fed and healthy?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Prosperity}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Stability\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Stability}\r\n          </td>\r\n          <td>\r\n            <small title=\"Are your subjects sane and civil?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Stability}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>🎯 Dogma\r\n          </th>\r\n          <td>\r\n            {workingReportCard.Dogma}\r\n          </td>\r\n          <td>\r\n            <small title=\"Do your society's rules match your utopian ideals?\">❔</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"text-left\" colSpan={3}>\r\n          <small>{Curriculums.Default.RubricDescription.Dogma}</small>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td colSpan={3}>\r\n            <hr />\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            Avg. Grade\r\n          </th>\r\n          <td>\r\n            {GetAverage(workingReportCard)}\r\n          </td>\r\n          <td></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { SecondaryBeliefData, TraitBelief } from \"../simulation/Beliefs\";\r\nimport { PlayerCanAfford } from \"../simulation/Player\";\r\nimport { buyBots, buyEnergy, buyTrait, scrubHedons } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport { CostSmall } from \"../widgets/CostSmall\";\r\nimport { EmoteIcon } from \"../World\";\r\n\r\n export const MarketPanel: React.FC<{\r\n }> = () => {\r\n     const player = useAppSelector(s => s.world.alien);\r\n     const dispatch = useAppDispatch();\r\n    return <div>\r\n        <div className=\"text-center\">\r\n            <strong>🌌 Galactic 😨 Emotion 💰 Market</strong>\r\n        </div>\r\n        <p>\r\n            <small>\r\n                The premier exchange for ⚡️, 🤖,  and {EmoteIcon['happiness']}!\r\n            </small>\r\n        </p>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(buyEnergy({amount: 1}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.energy)}>\r\n                +1 ⚡️ Energy\r\n                <CostSmall cost={player.difficulty.cost.market.resource.energy} qty={1} ></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" onClick={() => dispatch(buyEnergy({amount: 5}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.energy, 5)}>\r\n                +5 ⚡️ Energy\r\n                <CostSmall cost={player.difficulty.cost.market.resource.energy} qty={5} ></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(buyBots({amount: 1}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.bots)}>\r\n                +1 🤖 Bot\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={1} ></CostSmall>\r\n            </button>\r\n            <button className=\"card button\" onClick={() => dispatch(buyBots({amount: 5}))}\r\n                disabled={!PlayerCanAfford(player, player.difficulty.cost.market.resource.bots, 5)}>\r\n                +5 🤖 Bots\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={5} ></CostSmall>\r\n            </button>\r\n        </div>\r\n        <div className=\"card-parent\">\r\n            <button className=\"card button\" onClick={() => dispatch(scrubHedons())}\r\n                disabled={player.hedons.amount >= 0 || !PlayerCanAfford(player, player.difficulty.cost.market.scrubHedons)}>\r\n                Remove 💢 Negative Hedons\r\n                <CostSmall cost={player.difficulty.cost.market.scrubHedons} qty={1} ></CostSmall>\r\n            </button>\r\n            {/* <button className=\"card button\" onClick={() => buyBots(5)}\r\n                disabled={!PlayerCanAfford(player.difficulty.cost.market.resource.bots, 5)}>\r\n                +5 🤖 Bots\r\n                <CostSmall cost={player.difficulty.cost.market.resource.bots} qty={5} ></CostSmall>\r\n            </button> */}\r\n        </div>\r\n        <div>\r\n            \r\n            <small>\r\n                <i>Current <span className=\"trait-gem\"></span> Trait Gems for sale:</i>\r\n            </small>\r\n        </div>\r\n        <div className=\"short-scroll\">\r\n            {\r\n                <MarketTraits hedons={player.hedons.amount}></MarketTraits>\r\n            }\r\n        </div>\r\n    </div>\r\n }\r\n\r\n \r\nexport const MarketTraits: React.FC<{\r\n    hedons: number,\r\n}> = (props) => {\r\n    const list = useAppSelector(s => s.world.marketTraitsForSale);\r\n    const dispatch = useAppDispatch();\r\n    return <>\r\n    {\r\n    list.map((l, i) => {\r\n        const t = SecondaryBeliefData[l.trait];\r\n        const className = 'belief-name '+t.rarity;\r\n        return <div className=\"card-parent\" key={i}>\r\n            <button className=\"card button\" onClick={() => dispatch(buyTrait({l: l}))} disabled={props.hedons < (l.cost.hedons || 0)}>\r\n                <span className={className}>\r\n                    {t.icon} {t.noun}\r\n                </span>\r\n                <CostSmall cost={l.cost}></CostSmall>\r\n            </button>\r\n        </div>\r\n    })\r\n    }\r\n    </>\r\n}","const fourLetterWords = [\r\n'able','acid','aged','also','area','army','away','baby','back','ball','band','bank',\r\n'base','bath','bear','beat','been','beer','bell','belt','best','bill','bird','blow','blue','boat',\r\n'body','bomb','bond','bone','book','boom','born','boss','both','bowl','bulk','burn',\r\n'bush','busy','call','calm','came','camp','card','care','case','cash','cast','cell',\r\n'chat','chip','city','club','coal','coat','code','cold','come','cook','cool','cope',\r\n'copy','CORE','cost','crew','crop','dark','data','date','dawn','days','dead','deal',\r\n'dean','dear','debt','deep','deny','desk','dial','dick','diet','disc','disk','does',\r\n'done','door','dose','down','draw','drew','drop','drug','dual','duke','dust','duty',\r\n'each','earn','ease','east','easy','edge','else','even','ever','evil','exit','face',\r\n'fact','fail','fair','fall','farm','fast','fate','fear','feed','feel','feet','fell',\r\n'felt','file','fill','film','find','fine','fire','firm','fish','five','flat','flow',\r\n'food','foot','ford','form','fort','four','free','from','fuel','full','fund','gain',\r\n'game','gate','gave','gear','gene','gift','girl','give','glad','goal','goes','gold',\r\n'Golf','gone','good','gray','grew','grey','grow','gulf','hair','half','hall','hand',\r\n'hang','hard','harm','hate','have','head','hear','heat','held','hell','help','here',\r\n'hero','high','hill','hire','hold','hole','holy','home','hope','host','hour','huge',\r\n'hung','hunt','hurt','idea','inch','into','iron','item','jack','jane','jean','john',\r\n'join','jump','jury','just','keen','keep','kent','kept','kick','kill','kind','king',\r\n'knee','knew','know','lack','lady','laid','lake','land','lane','last','late','lead',\r\n'left','less','life','lift','like','line','link','list','live','load','loan','lock',\r\n'logo','long','look','lord','lose','loss','lost','love','luck','made','mail','main','make',\r\n'male','many','Mark','mass','matt','meal','mean','meat','meet','menu','mere','mike',\r\n'mile','milk','mill','mind','mine','miss','mode','mood','moon','more','most','move',\r\n'much','must','name','navy','near','neck','need','news','next','nice','nick','nine',\r\n'none','nose','note','okay','once','only','onto','open','oral','over','pace','pack',\r\n'page','paid','pain','pair','palm','park','part','pass','past','path','peak','pick',\r\n'pink','pipe','plan','play','plot','plug','plus','poll','pool','poor','port','post',\r\n'pull','pure','push','race','rail','rain','rank','rare','rate','read','real','rear',\r\n'rely','rent','rest','rice','rich','ride','ring','rise','risk','road','rock','role',\r\n'roll','roof','room','root','rose','rule','rush','ruth','safe','said','sake','sale',\r\n'salt','same','sand','save','seat','seed','seek','seem','seen','self','sell','send',\r\n'sent','sept','ship','shop','shot','show','shut','sick','side','sign','site','size',\r\n'skin','slip','slow','snow','soft','soil','sold','sole','some','song','soon','sort',\r\n'soul','spot','star','stay','step','stop','such','suit','sure','take','tale','talk',\r\n'tall','tank','tape','task','team','tech','tell','tend','term','test','text','than',\r\n'that','them','then','they','thin','this','thus','till','time','tiny','told','toll',\r\n'tone','tony','took','tool','tour','town','tree','trip','true','tune','turn','twin',\r\n'type','unit','upon','used','user','vary','vast','very','vice','view','vote','wage',\r\n'wait','wake','walk','wall','want','ward','warm','wash','wave','ways','weak','wear',\r\n'week','well','went','were','west','what','when','whom','wide','wife','wild','will',\r\n'wind','wine','wing','wire','wise','wish','with','wood','word','wore','work','yard',\r\n'yeah','year','your','zero','zone',\r\n];\r\n\r\nexport function GetSeedName(){\r\n    let seed = '';\r\n    for (let i = 0; i < 4; i++) {\r\n        if (i > 0)\r\n            seed += '-';\r\n        const rand = Math.random();\r\n        seed += fourLetterWords[Math.floor(rand * fourLetterWords.length)];\r\n    }\r\n    return seed;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { GameStorageInstance } from '../GameStorage';\r\nimport { manualSave } from '../state/features/world.reducer';\r\nimport { useAppDispatch } from '../state/hooks';\r\nexport const AutosaveWidget: React.FC<{}> = (props) => {\r\n    const [isDirty, setDirty] = useState(false);\r\n    const [isSaving, setSaving] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n    const onDirty = (dirty: boolean) => {\r\n        setDirty(dirty);\r\n    }\r\n    const onSaving = () => {\r\n        setSaving(true);\r\n        setTimeout(() => setSaving(false), 500);\r\n    }\r\n    const d = useEffect(() => {\r\n        GameStorageInstance.Dirty.subscribe(onDirty);\r\n        return () => GameStorageInstance.Dirty.unsubscribe(onDirty);\r\n    });\r\n    const s = useEffect(() => {\r\n        GameStorageInstance.Saving.subscribe(onSaving);\r\n        return () => GameStorageInstance.Saving.unsubscribe(onSaving);\r\n    });\r\n    return <button disabled={!isDirty || isSaving} onClick={() => {\r\n        dispatch(manualSave());\r\n    }}>\r\n            {\r\n                isSaving ? '💿' : isDirty ? '💾' : '✔️'\r\n            }\r\n        </button>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { ChangePubSub, PubSub } from \"../events/Events\";\r\n\r\ninterface Bubble {string: string, id: number, className?: string};\r\n\r\nfunction useBubbles<T>(sub: PubSub<T>, transform: (input: T) => {string: string, className: string}){\r\n    const [bubbles, setBubbles] = useState<Bubble[]>([]);\r\n    let bubbleSeed = 0;\r\n    const onEvent = (event: T) => {\r\n        const id = ++bubbleSeed;\r\n        setBubbles(bubbles.concat([{\r\n            id: id,\r\n            ...transform(event)\r\n        }]));\r\n        setTimeout(() => {\r\n            setBubbles(\r\n                bubbles.filter((b) => b.id != id)\r\n            )\r\n        }, 1500)\r\n    }\r\n    useEffect(() => {\r\n        sub.subscribe(onEvent);\r\n        return () => sub.unsubscribe(onEvent);\r\n    });\r\n    return bubbles;\r\n}\r\n\r\nexport class BubbleNumberText extends React.Component<{\r\n    bubbleClass?: string,\r\n    icon?: string,\r\n    changeEvent?: ChangePubSub\r\n}, {\r\n    bubbles: Array<Bubble>\r\n}> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            bubbles: []\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        if (this.props.changeEvent){\r\n            this.props.changeEvent.subscribe(this.onChange)\r\n        }\r\n    }\r\n    bubbleSeed = 0;\r\n    onChange = (ev: {change: number}) => {\r\n        const id = ++this.bubbleSeed;\r\n        const positive = ev.change > 0;\r\n        this.setState({\r\n            bubbles: this.state.bubbles.concat([{\r\n                string: (positive ? '+': '') + ev.change,\r\n                id: id,\r\n                className: positive ? 'pos' : 'neg'\r\n            }])\r\n        });\r\n        setTimeout(() => {\r\n            this.setState({\r\n                bubbles: this.state.bubbles.filter((b) => b.id != id)\r\n            })\r\n        }, 1500)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if (this.props.changeEvent){\r\n            this.props.changeEvent.unsubscribe(this.onChange);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const bubbles = this.state.bubbles.map((b) => <span key={b.id} className={[b.className, this.props.bubbleClass, \"bubbler\"].join(' ')}>\r\n            {this.props.icon} {b.string}\r\n        </span>)\r\n        return <span className=\"bubble-parent\">\r\n            {this.props.children}\r\n            {bubbles}\r\n        </span>\r\n    }\r\n}\r\n\r\nexport const BubbleSeenTraitsText: React.FC<{\r\n    bubbleClass?: string,\r\n    icon?: string,\r\n    changeEvent: PubSub<{k: string, v: boolean}>\r\n}> = (props) => {\r\n    const bubbles = useBubbles(props.changeEvent, (input: {k: string, v: boolean}) => {\r\n        return {\r\n            string: `Discovered ${input.k}!`,\r\n            className: 'seen-belief'\r\n        }\r\n    })\r\n    return <span className=\"bubble-parent\">\r\n        {props.children}\r\n        {bubbles.map((b) => <span key={b.id} className={[b.className, props.bubbleClass, \"bubbler\"].join(' ')}>\r\n            {props.icon} {b.string}\r\n        </span>)}\r\n    </span>\r\n}","import React from \"react\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\nexport class CapsuleLabel extends React.Component<{\r\n    icon?: string,\r\n    label?: string\r\n}, {\r\n}> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render(){\r\n        const classN = 'capsule-label '+this.props.label||'';\r\n        return <span className={classN}>\r\n            <span className=\"capsule-icon\">\r\n                {this.props.icon}\r\n            </span>\r\n            <span className=\"capsule-text\">\r\n                {this.props.label}:\r\n            </span>\r\n            <span className=\"capsule-value\">\r\n                {this.props.children}\r\n            </span>\r\n        </span>\r\n    }\r\n}\r\n\r\nexport const EnergyAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.energy.amount);\r\n    return <span>{amt.toFixed(1)}</span>\r\n}\r\nexport const BotsAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.bots.amount);\r\n    return <span>{amt.toFixed(1)}</span>\r\n}\r\nexport const HedonAmount: React.FC = () => {\r\n    const amt = useAppSelector(x => x.world.alien.hedons.amount);\r\n    return <span>{amt.toFixed(0)}</span>\r\n}","import React from \"react\";\r\n\r\nexport interface modalPs{\r\n    show: boolean;\r\n    onClick?: () => void;\r\n    closeButtonText?: string;\r\n    className?: string;\r\n}\r\nexport class Modal extends React.Component<modalPs> {\r\n    constructor(props: modalPs) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        }\r\n    }\r\n    getButton(){\r\n        if (!this.props.onClick)\r\n            return null;\r\n        else\r\n            return <button type=\"button\" className=\"done\" onClick={() => this.props.onClick && this.props.onClick()} >{this.props.closeButtonText || 'Done'}</button>\r\n    }\r\n    render() {\r\n        if (!this.props.show) {\r\n            return null;\r\n        }\r\n        return (\r\n        <div className={\"modal \" + (this.props.className || '')}>\r\n            {this.props.children}\r\n            {this.getButton()}\r\n        </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { PartOfDay, Season } from \"../simulation/Time\"\r\nimport { useAppSelector } from \"../state/hooks\"\r\n\r\nfunction SeasonHour(hour: number){\r\n    if (hour < PartOfDay.Morning)\r\n        return '🌙';\r\n    if (hour < PartOfDay.Noon)\r\n        return '🌄';\r\n    if (hour < PartOfDay.Evening)\r\n        return '☀️';\r\n    return '🌇';\r\n}\r\nexport const SeasonWidget: React.FC = () => {\r\n    const date = useAppSelector(s => s.world.date)\r\n    return <span>\r\n        &nbsp;Year {date.year},&nbsp;{Season[date.season]} {date.day} {SeasonHour(date.hour)}\r\n    </span>\r\n}","import React from \"react\";\r\nimport { AnimatedBean } from \"../petri-ui/AnimatedBean\";\r\nimport { SocialBuildings } from \"../petri-ui/PetriHexes\";\r\nimport { IBean } from \"../simulation/Agent\";\r\nimport { ICity } from \"../simulation/City\";\r\nimport { IBuilding } from \"../simulation/RealEstate\";\r\nimport { doSelectBean } from \"../state/features/selected.reducer\";\r\nimport { selectCityBeanIDs } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\nimport \"./SocialGraph.css\";\r\n\r\ninterface SocialGraphP{\r\n    city: ICity,\r\n    onClick: (b: IBean) => void;\r\n    onClickBuilding: (b: IBuilding) => void;\r\n}\r\n\r\nexport const SocialGraph: React.FC<SocialGraphP> = (props) => {\r\n    const beanKeys = useAppSelector(state => selectCityBeanIDs(state.world, props.city.key));\r\n    const scannedBeans = useAppSelector(s => s.world.alien.scanned_bean)\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"social-graph\">\r\n        <div className=\"social-graph-row\">\r\n        {\r\n            beanKeys.map((b) => \r\n            <div key={b} className=\"bean-node\" onClick={() => dispatch(doSelectBean({cityKey:props.city.key, beanKey: b}))}>\r\n                <AnimatedBean beanKey={b} static={true} sitStill={true} cityKey={props.city.key}>\r\n                </AnimatedBean>\r\n                {\r\n                    scannedBeans[b] ? null : <span className=\"social-graph-unscanned prohibited-emoji\">🛰️</span>\r\n                }\r\n            </div>)\r\n        }\r\n        </div>\r\n        <div className=\"social-graph-row\">\r\n        {\r\n            <SocialBuildings city={props.city} onClickBuilding={props.onClickBuilding}></SocialBuildings>\r\n        }\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport \"./StopPlayFast.css\"\r\n\r\nexport class StopPlayFastButtons extends React.Component<{\r\n    timeScale: number,\r\n    setTimeScale: (s: number) => void\r\n}>{\r\n    render(){\r\n        return <div className=\"s-p-f button-group cylinder blue-orange\">\r\n            ⌛️\r\n            <button type=\"button\" className={this.props.timeScale == 0 ? 'active': ''} onClick={() => this.props.setTimeScale(0)}>⏹</button>\r\n            <button type=\"button\" className={this.props.timeScale == 1 ? 'active': ''} onClick={() => this.props.setTimeScale(1)}>▶️</button>\r\n            <button type=\"button\" className={this.props.timeScale == 2 ? 'active': ''} onClick={() => this.props.setTimeScale(2)}>⏩</button>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport const GeoNetworkButtons: React.FC<{\r\n    activeMain: 'geo' | 'network';\r\n    setActiveMain: (v: 'geo' | 'network' ) => void\r\n}> = (props) => {\r\n    \r\n    return <div className=\"s-p-f button-group cylinder blue-orange\">\r\n        👁️\r\n        <button type=\"button\" className={props.activeMain == 'geo' ? 'active': ''} onClick={() => props.setActiveMain('geo')}>🌎</button>\r\n        <button type=\"button\" className={props.activeMain == 'network' ? 'active': ''} onClick={() => props.setActiveMain('network')}>🌐</button>\r\n    </div>\r\n    \r\n}","import React from \"react\";\r\nimport { IEvent, PubSub } from \"../events/Events\";\r\n\r\nexport class TimelyEventToggle extends React.Component<{\r\n    event: PubSub<IEvent>,\r\n    eventIcon: string,\r\n    eventClass: string\r\n}, {\r\n eventCount: number,\r\n}>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.props.event.subscribe(this.onEvent);\r\n        this.state = {\r\n            eventCount: 0\r\n        };\r\n    }\r\n    onEvent = (e: IEvent) => {\r\n        this.setState({eventCount: this.state.eventCount+1});\r\n        window.setTimeout(() => {\r\n            this.setState({\r\n                eventCount: this.state.eventCount-1\r\n            });\r\n        }, 3000);\r\n    }\r\n    render(){\r\n        return <span>\r\n            {this.state.eventCount < 1 ? this.props.children : <span className={this.props.eventClass}>{this.props.eventIcon}</span>}\r\n        </span>\r\n    }\r\n}","import React from \"react\";\r\nimport { ITitle } from \"../simulation/Titles\";\r\nimport { beanSetTitle } from \"../state/features/world.reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../state/hooks\";\r\n\r\nexport const EntitleModalContent: React.FC<{\r\n    closeModal: () => void\r\n}> = (props) => {\r\n    const selectedBeanKey = useAppSelector(s => s.selected.selectedBeanKey);\r\n    const titles = useAppSelector(s => s.world.titles.allIDs.reduce( (all, id)=>{all.push(s.world.titles.byID[id]); return all;}, [] as ITitle[]));\r\n    const dispatch = useAppDispatch();\r\n    return <div className=\"pad-4p\">\r\n        <h1>Award Title</h1>\r\n        <div>\r\n        {\r\n            titles.map((x, i) => <div key={i} className=\"card-parent\">\r\n                <button className=\"button card\" onClick={() => {\r\n                    if (selectedBeanKey != null){\r\n                        dispatch(beanSetTitle({beanKey: selectedBeanKey, titleKey: x.key}))\r\n                        props.closeModal();\r\n                    }\r\n                }}>\r\n                    {x.headwear} {x.name} {x.badge}\r\n                </button>\r\n            </div>)\r\n        }\r\n        </div>\r\n    </div>\r\n};","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\r\nimport './App.css';\r\nimport './chrome/chrome.css';\r\nimport { IEvent } from './events/Events';\r\nimport { GameStorageInstance, isGame } from './GameStorage';\r\nimport { BrainwashingContent } from './modal-content/Brainwashing';\r\nimport { SocietyPanel } from './modal-content/Society';\r\nimport { EconomyReport } from './modal-content/EconomyReport';\r\nimport { EscapeMenu } from './modal-content/EscapeMenu';\r\nimport { GovernmentPanel } from './modal-content/Gov';\r\nimport { GreetingPanel } from './modal-content/GreetingPanel';\r\nimport { LoadGameMenu } from './modal-content/LoadGameMenu';\r\nimport { MainMenu } from './modal-content/MainMenu';\r\nimport { ResearchPanel } from './modal-content/Research';\r\nimport { TraitsReport } from './modal-content/TraitsReport';\r\nimport { MoverStoreInstance } from './MoverStoreSingleton';\r\nimport { WorldTile2 } from './petri-ui/WorldTile';\r\nimport { DetailPanel } from './right-panel/DetailPanel';\r\nimport { EventsPanel } from './right-panel/Events';\r\nimport { GoalsPanel } from './right-panel/Goals';\r\nimport { MarketPanel } from './right-panel/MarketPanel';\r\nimport { SignalStoreInstance } from './SignalStore';\r\nimport { Point } from './simulation/Geography';\r\nimport { MoverStore } from './simulation/MoverBus';\r\nimport { GetSeedName } from './simulation/SeedGen';\r\nimport { animate_beans, animate_pickups, animate_ufos } from './simulation/WorldSim';\r\nimport { doSelectBean, doSelectBuilding, doSelectNone } from './state/features/selected.reducer';\r\nimport { cheatAdd, loadGame, newGame, worldTick } from './state/features/world.reducer';\r\nimport { RootState, store as StoreState } from './state/state';\r\nimport { AutosaveWidget } from './widgets/Autosave';\r\nimport { BubbleNumberText, BubbleSeenTraitsText } from './widgets/BubbleText';\r\nimport { BotsAmount, CapsuleLabel, EnergyAmount, HedonAmount } from './widgets/CapsuleLabel';\r\nimport { Modal } from './widgets/Modal';\r\nimport { SeasonWidget } from './widgets/Season';\r\nimport { SocialGraph } from './widgets/SocialGraph';\r\nimport { GeoNetworkButtons, StopPlayFastButtons } from './widgets/StopPlayFast';\r\nimport { TimelyEventToggle } from './widgets/TimelyEventToggle';\r\nimport { WorldSfxInstance, WorldSound } from './WorldSound';\r\nimport { EntitleModalContent } from './modal-content/Entitling';\r\n\r\nexport type ModalView = 'mainmenu'|'loadgame'|'escapemenu'|'greeting' | 'economy' | 'society' | 'gov' | 'polisci' | 'brainwash' | 'traits'|'entitle';\r\ninterface AppPs {\r\n}\r\ninterface AppState {\r\n  activeModal: ModalView | null;\r\n  activeMain: 'geo' | 'network';\r\n  activeRightPanel: 'events' | 'overview' | 'goals' | 'market';\r\n  timeScale: number;\r\n  spotlightEvent: IEvent | undefined;\r\n  cursor?: Point;\r\n  newGameSeed: string;\r\n}\r\nexport const SfxContext = React.createContext<WorldSound|undefined>(undefined);\r\nexport const MoverContext = React.createContext<MoverStore>(MoverStoreInstance);\r\n\r\nconst LogicTickMS = 2000;\r\nconst SpotlightDurationTimeMS = 5000;\r\nconst store = StoreState;\r\n\r\nconst AutosaveMilliseconds = 15 * 1000;\r\nclass App extends React.Component<AppPs, AppState>{\r\n  constructor(props: AppPs) {\r\n    super(props);\r\n    this.state = {\r\n      activeMain: 'geo',\r\n      activeModal: 'mainmenu',\r\n      activeRightPanel: 'overview',\r\n      timeScale: 0,\r\n      spotlightEvent: undefined,\r\n      newGameSeed: GetSeedName()\r\n    };\r\n  }\r\n  private previousTimeMS: DOMHighResTimeStamp = 0;\r\n  private logicTickAccumulatorMS: number = 0;\r\n  private millisecondsSinceLastSave: DOMHighResTimeStamp = 0;\r\n  private saveAccumulatorMS: number = 0;\r\n  componentDidMount() {\r\n    document.addEventListener(\"keyup\", this.keyupHandler, false);\r\n    window.requestAnimationFrame((time: DOMHighResTimeStamp) => {\r\n      this.previousTimeMS = time;\r\n      window.requestAnimationFrame(this.tick);\r\n    });\r\n    store.subscribe(() => {\r\n      const s = store.getState();\r\n      if ((s.selected.selectedBeanKey != null || s.selected.selectedBuildingKey != null || s.selected.selectedDistrictKey != null) && this.state.activeRightPanel != 'overview'){\r\n        this.setState({activeRightPanel: 'overview'});\r\n      }\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keyup\", this.keyupHandler);\r\n  }\r\n  tick = (timeMS: DOMHighResTimeStamp) => {\r\n    // Compute the delta-time against the previous time\r\n    const deltaTimeMS = (timeMS - this.previousTimeMS);\r\n    // Update the previous time\r\n    this.previousTimeMS = timeMS;\r\n\r\n    if (deltaTimeMS > 0) {\r\n      const gameDeltaTimeMS = deltaTimeMS * this.state.timeScale;\r\n\r\n      animate_ufos(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n      if (gameDeltaTimeMS > 0){\r\n        this.logicTickAccumulatorMS += deltaTimeMS;\r\n        animate_pickups(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n        animate_beans(store.getState().world, deltaTimeMS).map(x => store.dispatch(x));\r\n  \r\n        if (this.logicTickAccumulatorMS > LogicTickMS) {\r\n          store.dispatch(worldTick())\r\n          this.logicTickAccumulatorMS = 0;\r\n        }\r\n      }\r\n      this.millisecondsSinceLastSave += deltaTimeMS;\r\n      //save every 30 seconds\r\n      if(GameStorageInstance.Dirty.current && this.millisecondsSinceLastSave > AutosaveMilliseconds){\r\n        GameStorageInstance.SaveGame(store.getState().world);\r\n        this.millisecondsSinceLastSave = 0;\r\n      }\r\n    }\r\n    window.requestAnimationFrame(this.tick);\r\n  }\r\n  cheatMode: boolean = false;\r\n  keyupHandler = (event: KeyboardEvent) => {\r\n    if (event.key === ' ') {\r\n      if (this.state.timeScale > 0) {\r\n        this.setState({ timeScale: 0 });\r\n      } else {\r\n        this.setState({ timeScale: 1 });\r\n      }\r\n    } else if (event.key === 'Escape') {\r\n      if (this.state.activeModal === 'greeting')\r\n        store.dispatch(newGame({seed: this.state.newGameSeed}))\r\n      this.setState({activeModal: null});\r\n    } else if (this.cheatMode && event.key === 'A') {\r\n      store.dispatch(cheatAdd())\r\n    } else if (this.cheatMode && event.key === 'Q') {\r\n      // if (this.state.world.cities[0].book.getBuildings().filter(x => x.type === 'farm').length < 1){\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.farm.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.farm.bots || 0;\r\n      //   // this.build(this.state.world.cities[0], { q: 1, r: 1 }, 'farm');\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.house.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.house.bots || 0;\r\n      //   // this.build(this.state.world.cities[0], { q: 1, r: 0 }, 'house');\r\n      //   this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.emptyHex.build.hospital.energy || 0;\r\n      //   this.state.world.alien.bots.amount += this.state.world.alien.difficulty.cost.emptyHex.build.hospital.bots || 0;\r\n        // this.build(this.state.world.cities[0], { q: 0, r: 1 }, 'hospital');\r\n      // }\r\n      // this.state.world.alien.energy.amount += (this.state.world.alien.difficulty.cost.hex.beam.energy || 0) * 4;\r\n      // this.beam(this.state.world.cities[0], { q: 0, r: 0 });\r\n      // this.beam(this.state.world.cities[0], { q: 1, r: 0 });\r\n      // this.beam(this.state.world.cities[0], { q: 0, r: 1 });\r\n      // this.beam(this.state.world.cities[0], { q: 1, r: 1 });\r\n    } else if (this.cheatMode && event.key === 'S') {\r\n      // this.state.world.beans.get.forEach((b) => {\r\n      //   if (this.state.world.alien.difficulty.cost.bean.scan.energy){\r\n      //     if (this.state.world.alien.energy.amount < this.state.world.alien.difficulty.cost.bean.scan.energy)\r\n      //       this.state.world.alien.energy.amount += this.state.world.alien.difficulty.cost.bean.scan.energy;\r\n      //   }\r\n      //   // this.scan(b);\r\n      // });\r\n    }\r\n    this.cheatMode = event.shiftKey && event.key === 'C';\r\n  }\r\n  onDeath = (event: IEvent) => {\r\n    WorldSfxInstance.play('death');\r\n    this.startSpotlight(event);\r\n  }\r\n  private timescaleBeforeSpotlight: number = 1;\r\n  startSpotlight(event: IEvent) {\r\n    this.timescaleBeforeSpotlight = this.state.timeScale;\r\n    this.setState({\r\n      spotlightEvent: event,\r\n      timeScale: 0\r\n    }, () => {\r\n      setTimeout(() => this.endSpotlight(), SpotlightDurationTimeMS);\r\n    });\r\n  }\r\n  endSpotlight() {\r\n    this.setState({\r\n      timeScale: this.timescaleBeforeSpotlight,\r\n      spotlightEvent: undefined\r\n    });\r\n  }\r\n  getPanel() {\r\n    switch (this.state.activeRightPanel) {\r\n      case 'overview':\r\n        return <DetailPanel \r\n          openBrainwash={() => this.setState({ activeModal: 'brainwash' })}\r\n          openEntitle={() => this.setState({activeModal: 'entitle'})}\r\n        ></DetailPanel>\r\n      case 'goals':\r\n        return <GoalsPanel></GoalsPanel>\r\n      case 'events':\r\n        return <EventsPanel></EventsPanel>\r\n      case 'market': \r\n        return <MarketPanel></MarketPanel>\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n      <SfxContext.Provider value={WorldSfxInstance}>\r\n      <MoverContext.Provider value={MoverStoreInstance}>\r\n        <div className=\"canvas\">\r\n          {\r\n            this.state.activeMain === 'network' ? <div className=\"canvas\">\r\n              <SocialGraph\r\n                city={store.getState().world.cities.byID[0]}\r\n                onClickBuilding={(b) => store.dispatch(doSelectBuilding({\r\n                  cityKey: store.getState().world.cities.allIDs[0], \r\n                  buildingKey: b.key,\r\n                 }))}\r\n                onClick={(b) => {\r\n                  store.dispatch(doSelectBean({cityKey: b.cityKey, beanKey: b.key }));\r\n                }} ></SocialGraph>\r\n            </div> : <TransformWrapper\r\n              minScale={.65}\r\n              centerZoomedOut={true}\r\n              centerOnInit={true}\r\n              initialPositionX={5000}\r\n              limitToBounds={false}\r\n              alignmentAnimation={{disabled:true}}\r\n              wheel={{ step: 0.05 }}>\r\n              <TransformComponent>\r\n                <div className=\"world\">\r\n                  {\r\n                  store.getState().world.cities.allIDs.map((t) => {\r\n                    return (\r\n                      <WorldTile2 cityKey={t} key={t}\r\n                        onClick={() => {\r\n                          \r\n                        }}\r\n                      ></WorldTile2>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </TransformComponent>\r\n            </TransformWrapper>\r\n          }\r\n          <div className=\"overlay\">\r\n            <Modal show={this.state.activeModal == 'mainmenu'}>\r\n              <MainMenu startGame={() => this.setState({activeModal: 'greeting'})} loadGame={(slot: number) => {\r\n                const game = GameStorageInstance.GetGame(slot);\r\n                if (isGame(game)){\r\n                  store.dispatch(loadGame({newState: game.game}));\r\n                  this.setState({activeModal: null});\r\n                }\r\n              }}></MainMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'loadgame'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame({seed: this.state.newGameSeed}));\r\n              }\r\n            }>\r\n              <LoadGameMenu></LoadGameMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'escapemenu'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame({seed: this.state.newGameSeed}));\r\n              }\r\n            }>\r\n              <EscapeMenu></EscapeMenu>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'greeting'} onClick={() => {\r\n              this.setState({ activeModal: null });\r\n              store.dispatch(newGame({seed: this.state.newGameSeed}));\r\n              }\r\n            }>\r\n              <GreetingPanel seed={this.state.newGameSeed} changeSeed={(s) => this.setState({newGameSeed: s})}></GreetingPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'gov'} onClick={() => this.setState({ activeModal: null })}>\r\n              <GovernmentPanel></GovernmentPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'polisci'} onClick={() => this.setState({ activeModal: null })}>\r\n              <ResearchPanel></ResearchPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'society'} onClick={() => this.setState({ activeModal: null })}>\r\n              <SocietyPanel></SocietyPanel>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'economy'} onClick={() => this.setState({ activeModal: null })}>\r\n              {(this.state.activeModal == 'economy' ? <EconomyReport></EconomyReport> : '')}\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'traits'} onClick={() => this.setState({ activeModal: null })}>\r\n              <TraitsReport></TraitsReport>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'brainwash'} onClick={() => this.setState({ activeModal: null })}>\r\n              <BrainwashingContent></BrainwashingContent>\r\n            </Modal>\r\n            <Modal show={this.state.activeModal == 'entitle'} onClick={() => this.setState({ activeModal: null })} className=\"modal-tiny\">\r\n              <EntitleModalContent closeModal={() => this.setState({activeModal: null})}></EntitleModalContent>\r\n            </Modal>\r\n            <div className=\"left\">\r\n              <div className=\"top\">\r\n                <span>👽 Alien 🌍 Utopia 🔬 Lab</span>\r\n                <SeasonWidget></SeasonWidget>\r\n                <StopPlayFastButtons timeScale={this.state.timeScale} setTimeScale={(n: number) => { this.setState({ timeScale: n }) }}></StopPlayFastButtons>\r\n                <GeoNetworkButtons setActiveMain={(v) => this.setState({ activeMain: v })} activeMain={this.state.activeMain} ></GeoNetworkButtons>\r\n                <AutosaveWidget></AutosaveWidget>\r\n              </div>\r\n              <div className=\"bottom\">\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienEnergy} icon=\"⚡️\">\r\n                  <CapsuleLabel icon=\"⚡️\" label=\"Energy\">\r\n                    <EnergyAmount></EnergyAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienBots} icon=\"🤖\">\r\n                  <CapsuleLabel icon=\"🤖\" label=\"Bots\">\r\n                    <BotsAmount></BotsAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                <BubbleNumberText changeEvent={SignalStoreInstance.alienHedons} icon=\"👍\">\r\n                  <CapsuleLabel icon=\"👍\" label=\"Hedons\">\r\n                    <HedonAmount></HedonAmount>\r\n                  </CapsuleLabel>\r\n                </BubbleNumberText>\r\n                {/* <BubbleText changeEvent={this.state.world.alien.tortrons.change} icon=\"💔\">\r\n                  <CapsuleLabel icon=\"💔\" label=\"Tortrons\">\r\n                    {this.state.world.alien.tortrons.amount.toFixed(0)}\r\n                  </CapsuleLabel>\r\n                </BubbleText> */}\r\n                <span>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'economy' })}>📊 State of the Utopia</button>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'gov' })}>🗳️ Gov</button>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'polisci' })}>🧪 Research</button>\r\n                  <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'society' })}>👑 Society</button>\r\n                  <BubbleSeenTraitsText changeEvent={SignalStoreInstance.newTraitSeen} icon=\"🧠\">\r\n                    <button type=\"button\" className=\"callout\" onClick={() => this.setState({ activeModal: 'traits' })}>🧠 Traits</button>\r\n                  </BubbleSeenTraitsText>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"right\">\r\n              <div className=\"full-width-tabs\">\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'overview' });}}>📈 Info</button>\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'market' }); store.dispatch(doSelectNone())}}>🛍️ Market</button>\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'events' }); store.dispatch(doSelectNone())}}>\r\n                  <TimelyEventToggle event={SignalStoreInstance.events} eventIcon=\"🚨\" eventClass=\"police-siren\">📣</TimelyEventToggle> Events\r\n                </button>\r\n                <button onClick={() => {this.setState({ activeRightPanel: 'goals' }); store.dispatch(doSelectNone())}}>🏆 Goals</button>\r\n              </div>\r\n              <div className=\"right-panel\">\r\n                {this.getPanel()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          </div>\r\n      </MoverContext.Provider>\r\n      </SfxContext.Provider>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}